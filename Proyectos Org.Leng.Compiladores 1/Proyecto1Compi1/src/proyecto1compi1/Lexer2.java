/* The following code was generated by JFlex 1.7.0 */

package proyecto1compi1;

import static proyecto1compi1.sym2.*;
import java_cup.runtime.*;
import javax.swing.JTextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico2.flex</tt>
 */
public class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\70\1\72\2\26\1\0\2\25\16\70\4\0\1\26\1\0\1\35"+
    "\1\36\1\71\10\0\1\24\1\0\1\27\1\75\1\76\1\77\1\100"+
    "\6\74\1\73\1\0\1\30\1\32\1\31\2\0\1\53\1\51\1\61"+
    "\1\57\1\41\1\60\1\55\1\62\1\46\1\67\1\70\1\63\1\56"+
    "\1\37\1\43\1\54\1\66\1\52\1\45\1\47\1\40\1\42\1\50"+
    "\1\64\1\70\1\65\1\33\1\0\1\34\1\0\1\44\1\0\1\1"+
    "\1\2\1\3\1\70\1\4\1\70\1\5\1\6\1\7\1\10\1\70"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\4\70\1\0\1\101\2\0\41\70\2\0\4\70\4\0\1\70"+
    "\2\0\1\70\7\0\1\70\4\0\1\70\5\0\27\70\1\0\37\70"+
    "\1\0\u01ca\70\4\0\14\70\16\0\5\70\7\0\1\70\1\0\1\70"+
    "\21\0\165\70\1\0\2\70\2\0\4\70\10\0\1\70\1\0\3\70"+
    "\1\0\1\70\1\0\24\70\1\0\123\70\1\0\213\70\1\0\5\70"+
    "\2\0\236\70\11\0\46\70\2\0\1\70\7\0\47\70\7\0\1\70"+
    "\1\0\55\70\1\0\1\70\1\0\2\70\1\0\2\70\1\0\1\70"+
    "\10\0\33\70\5\0\3\70\15\0\5\70\6\0\1\70\4\0\13\70"+
    "\5\0\112\70\4\0\146\70\1\0\11\70\1\0\12\70\1\0\23\70"+
    "\2\0\1\70\17\0\74\70\2\0\145\70\16\0\66\70\4\0\1\70"+
    "\5\0\56\70\22\0\34\70\104\0\1\70\1\0\13\70\67\0\33\70"+
    "\1\0\144\70\2\0\12\70\1\0\7\70\1\0\7\70\1\0\3\70"+
    "\1\0\10\70\2\0\2\70\2\0\26\70\1\0\7\70\1\0\1\70"+
    "\3\0\4\70\2\0\11\70\2\0\2\70\2\0\4\70\10\0\1\70"+
    "\4\0\2\70\1\0\5\70\2\0\16\70\7\0\1\70\5\0\3\70"+
    "\1\0\6\70\4\0\2\70\2\0\26\70\1\0\7\70\1\0\2\70"+
    "\1\0\2\70\1\0\2\70\2\0\1\70\1\0\5\70\4\0\2\70"+
    "\2\0\3\70\3\0\1\70\7\0\4\70\1\0\1\70\7\0\20\70"+
    "\13\0\3\70\1\0\11\70\1\0\3\70\1\0\26\70\1\0\7\70"+
    "\1\0\2\70\1\0\5\70\2\0\12\70\1\0\3\70\1\0\3\70"+
    "\2\0\1\70\17\0\4\70\2\0\12\70\1\0\1\70\17\0\3\70"+
    "\1\0\10\70\2\0\2\70\2\0\26\70\1\0\7\70\1\0\2\70"+
    "\1\0\5\70\2\0\11\70\2\0\2\70\2\0\3\70\10\0\2\70"+
    "\4\0\2\70\1\0\5\70\2\0\12\70\1\0\1\70\20\0\2\70"+
    "\1\0\6\70\3\0\3\70\1\0\4\70\3\0\2\70\1\0\1\70"+
    "\1\0\2\70\3\0\2\70\3\0\3\70\3\0\14\70\4\0\5\70"+
    "\3\0\3\70\1\0\4\70\2\0\1\70\6\0\1\70\16\0\12\70"+
    "\11\0\1\70\7\0\3\70\1\0\10\70\1\0\3\70\1\0\27\70"+
    "\1\0\12\70\1\0\5\70\3\0\10\70\1\0\3\70\1\0\4\70"+
    "\7\0\2\70\1\0\2\70\6\0\4\70\2\0\12\70\22\0\2\70"+
    "\1\0\10\70\1\0\3\70\1\0\27\70\1\0\12\70\1\0\5\70"+
    "\2\0\11\70\1\0\3\70\1\0\4\70\7\0\2\70\7\0\1\70"+
    "\1\0\4\70\2\0\12\70\1\0\2\70\17\0\2\70\1\0\10\70"+
    "\1\0\3\70\1\0\51\70\2\0\10\70\1\0\3\70\1\0\5\70"+
    "\10\0\1\70\10\0\4\70\2\0\12\70\12\0\6\70\2\0\2\70"+
    "\1\0\22\70\3\0\30\70\1\0\11\70\1\0\1\70\2\0\7\70"+
    "\3\0\1\70\4\0\6\70\1\0\1\70\1\0\10\70\22\0\2\70"+
    "\15\0\72\70\4\0\20\70\1\0\12\70\47\0\2\70\1\0\1\70"+
    "\2\0\2\70\1\0\1\70\2\0\1\70\6\0\4\70\1\0\7\70"+
    "\1\0\3\70\1\0\1\70\1\0\1\70\2\0\2\70\1\0\15\70"+
    "\1\0\3\70\2\0\5\70\1\0\1\70\1\0\6\70\2\0\12\70"+
    "\2\0\4\70\40\0\1\70\27\0\2\70\6\0\12\70\13\0\1\70"+
    "\1\0\1\70\1\0\1\70\4\0\12\70\1\0\44\70\4\0\24\70"+
    "\1\0\22\70\1\0\44\70\11\0\1\70\71\0\112\70\6\0\116\70"+
    "\2\0\46\70\1\0\1\70\5\0\1\70\2\0\53\70\1\0\u014d\70"+
    "\1\0\4\70\2\0\7\70\1\0\1\70\1\0\4\70\2\0\51\70"+
    "\1\0\4\70\2\0\41\70\1\0\4\70\2\0\7\70\1\0\1\70"+
    "\1\0\4\70\2\0\17\70\1\0\71\70\1\0\4\70\2\0\103\70"+
    "\2\0\3\70\40\0\20\70\20\0\125\70\14\0\u026c\70\2\0\21\70"+
    "\1\0\32\70\5\0\113\70\3\0\3\70\17\0\15\70\1\0\7\70"+
    "\13\0\25\70\13\0\24\70\14\0\15\70\1\0\3\70\1\0\2\70"+
    "\14\0\124\70\3\0\1\70\3\0\3\70\2\0\12\70\41\0\3\70"+
    "\2\0\12\70\6\0\130\70\10\0\53\70\5\0\106\70\12\0\35\70"+
    "\3\0\14\70\4\0\14\70\12\0\50\70\2\0\5\70\13\0\54\70"+
    "\4\0\32\70\6\0\12\70\46\0\34\70\4\0\77\70\1\0\35\70"+
    "\2\0\13\70\6\0\12\70\15\0\1\70\130\0\114\70\4\0\12\70"+
    "\21\0\11\70\14\0\164\70\14\0\70\70\10\0\12\70\3\0\61\70"+
    "\122\0\3\70\1\0\43\70\11\0\347\70\25\0\u011a\70\2\0\6\70"+
    "\2\0\46\70\2\0\6\70\2\0\10\70\1\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\37\70\2\0\65\70\1\0\7\70\1\0\1\70"+
    "\3\0\3\70\1\0\7\70\3\0\4\70\2\0\6\70\4\0\15\70"+
    "\5\0\3\70\1\0\7\70\16\0\5\70\32\0\5\70\20\0\2\70"+
    "\23\0\1\70\13\0\5\70\5\0\6\70\1\0\1\70\15\0\1\70"+
    "\20\0\15\70\3\0\33\70\25\0\15\70\4\0\1\70\3\0\14\70"+
    "\21\0\1\70\4\0\1\70\2\0\12\70\1\0\1\70\3\0\5\70"+
    "\6\0\1\70\1\0\1\70\1\0\1\70\1\0\4\70\1\0\13\70"+
    "\2\0\4\70\5\0\5\70\4\0\1\70\21\0\51\70\u0a77\0\57\70"+
    "\1\0\57\70\1\0\205\70\6\0\11\70\14\0\46\70\1\0\1\70"+
    "\5\0\1\70\2\0\70\70\7\0\1\70\17\0\30\70\11\0\7\70"+
    "\1\0\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0\7\70"+
    "\1\0\7\70\1\0\7\70\1\0\40\70\57\0\1\70\u01d5\0\3\70"+
    "\31\0\17\70\1\0\5\70\2\0\5\70\4\0\126\70\2\0\2\70"+
    "\2\0\3\70\1\0\132\70\1\0\4\70\5\0\51\70\3\0\136\70"+
    "\21\0\33\70\65\0\20\70\u0200\0\u19b6\70\112\0\u51cd\70\63\0\u048d\70"+
    "\103\0\56\70\2\0\u010d\70\3\0\34\70\24\0\60\70\4\0\12\70"+
    "\1\0\31\70\7\0\123\70\45\0\11\70\2\0\147\70\2\0\4\70"+
    "\1\0\4\70\14\0\13\70\115\0\60\70\20\0\1\70\7\0\64\70"+
    "\14\0\105\70\13\0\12\70\6\0\30\70\3\0\1\70\4\0\56\70"+
    "\2\0\44\70\14\0\35\70\3\0\101\70\16\0\13\70\46\0\67\70"+
    "\11\0\16\70\2\0\12\70\6\0\27\70\3\0\2\70\4\0\103\70"+
    "\30\0\3\70\2\0\20\70\2\0\5\70\12\0\6\70\2\0\6\70"+
    "\2\0\6\70\11\0\7\70\1\0\7\70\221\0\53\70\1\0\2\70"+
    "\2\0\12\70\6\0\u2ba4\70\14\0\27\70\4\0\61\70\u2104\0\u016e\70"+
    "\2\0\152\70\46\0\7\70\14\0\5\70\5\0\14\70\1\0\15\70"+
    "\1\0\5\70\1\0\1\70\1\0\2\70\1\0\2\70\1\0\154\70"+
    "\41\0\u016b\70\22\0\100\70\2\0\66\70\50\0\15\70\3\0\20\70"+
    "\20\0\7\70\14\0\2\70\30\0\3\70\31\0\1\70\6\0\5\70"+
    "\1\0\207\70\2\0\1\70\4\0\1\70\13\0\12\70\7\0\32\70"+
    "\4\0\1\70\1\0\32\70\13\0\131\70\3\0\6\70\2\0\6\70"+
    "\2\0\6\70\2\0\3\70\3\0\2\70\3\0\2\70\22\0\3\70"+
    "\4\0\14\70\1\0\32\70\1\0\23\70\1\0\2\70\1\0\17\70"+
    "\2\0\16\70\42\0\173\70\105\0\65\70\210\0\1\70\202\0\35\70"+
    "\3\0\61\70\57\0\37\70\21\0\33\70\65\0\36\70\2\0\44\70"+
    "\4\0\10\70\1\0\5\70\52\0\236\70\2\0\12\70\u0356\0\6\70"+
    "\2\0\1\70\1\0\54\70\1\0\2\70\3\0\1\70\2\0\27\70"+
    "\252\0\26\70\12\0\32\70\106\0\70\70\6\0\2\70\100\0\4\70"+
    "\1\0\2\70\5\0\10\70\1\0\3\70\1\0\33\70\4\0\3\70"+
    "\4\0\1\70\40\0\35\70\203\0\66\70\12\0\26\70\12\0\23\70"+
    "\215\0\111\70\u03b7\0\107\70\37\0\12\70\20\0\73\70\2\0\1\70"+
    "\22\0\31\70\7\0\12\70\6\0\65\70\1\0\12\70\100\0\105\70"+
    "\13\0\12\70\u04a6\0\70\70\10\0\12\70\u0936\0\u036f\70\221\0\143\70"+
    "\u0b9d\0\u042f\70\u33d1\0\u0239\70\u04c7\0\105\70\13\0\57\70\20\0\21\70"+
    "\u4060\0\2\70\u2163\0\5\70\3\0\26\70\2\0\7\70\36\0\4\70"+
    "\224\0\3\70\u01bb\0\125\70\1\0\107\70\1\0\2\70\2\0\1\70"+
    "\2\0\2\70\2\0\4\70\1\0\14\70\1\0\1\70\1\0\7\70"+
    "\1\0\101\70\1\0\4\70\2\0\10\70\1\0\7\70\1\0\34\70"+
    "\1\0\4\70\1\0\5\70\1\0\1\70\3\0\7\70\1\0\u0154\70"+
    "\2\0\31\70\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70"+
    "\1\0\31\70\1\0\37\70\1\0\31\70\1\0\37\70\1\0\31\70"+
    "\1\0\10\70\2\0\62\70\u1600\0\4\70\1\0\33\70\1\0\2\70"+
    "\1\0\1\70\2\0\1\70\1\0\12\70\1\0\4\70\1\0\1\70"+
    "\1\0\1\70\6\0\1\70\4\0\1\70\1\0\1\70\1\0\1\70"+
    "\1\0\3\70\1\0\2\70\1\0\1\70\2\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\2\70\1\0\1\70"+
    "\2\0\4\70\1\0\7\70\1\0\4\70\1\0\4\70\1\0\1\70"+
    "\1\0\12\70\1\0\21\70\5\0\3\70\1\0\5\70\1\0\21\70"+
    "\u1144\0\ua6d7\70\51\0\u1035\70\13\0\336\70\u3fe2\0\u021e\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\70\36\0\140\70\200\0\360\70\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\11\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\62\0\1\7\3\0\1\10\1\0\1\11\14\0\1\12"+
    "\3\0\1\13\25\0\1\14\27\0\1\13\6\0\1\15"+
    "\22\0\1\16\3\0\1\17\1\20\26\0\1\15\16\0"+
    "\1\21\3\0\1\22\1\23\15\0\1\24\23\0\1\25"+
    "\12\0\1\26\5\0\1\27\17\0\1\30\1\0\1\31"+
    "\3\0\1\32\3\0\1\25\2\0\1\33\3\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\0\1\40\5\0\1\41"+
    "\2\0\1\42\11\0\1\43\1\30\1\31\1\0\1\44"+
    "\1\0\1\32\3\0\1\45\1\0\1\46\1\33\3\0"+
    "\1\34\1\35\1\47\1\0\1\50\1\51\3\0\1\52"+
    "\1\0\1\53\1\0\1\54\5\0\1\43\1\44\5\0"+
    "\1\45\1\46\3\0\1\55\1\56\2\0\1\57\20\0"+
    "\1\60\6\0\1\61\11\0\1\62\4\0\1\61\5\0"+
    "\1\63\14\0\1\63\6\0\1\64\13\0\1\64\4\0"+
    "\1\65\12\0\1\65\6\0\1\66\1\0\1\67\10\0"+
    "\1\66\1\67\2\0\1\70\1\0\1\71\3\0\1\72"+
    "\3\0\1\70\1\71\1\0\1\73\1\0\1\72\3\0"+
    "\1\73\1\0\1\74\2\0\1\75\1\0\1\74\1\0"+
    "\1\75\1\0\1\76\1\0\1\77\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[521];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\102\0\102\0\102\0\102\0\102\0\u0294"+
    "\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4"+
    "\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4"+
    "\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\u0906\0\u0948\0\u02d6\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\102\0\u0fba\0\u0ffc\0\u103e\0\102"+
    "\0\u1080\0\102\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\102\0\u13da"+
    "\0\u141c\0\u145e\0\u0948\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\102\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u0948"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\102\0\u266a\0\u26ac\0\u26ee\0\102\0\102"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\102\0\u2cdc"+
    "\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\102\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\102\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8"+
    "\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u0948\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\102"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\102\0\u3de0\0\u3e22"+
    "\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032"+
    "\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u0948\0\u41be\0\u0948"+
    "\0\u4200\0\u4242\0\u4284\0\u0948\0\u42c6\0\u4308\0\u434a\0\102"+
    "\0\u438c\0\u43ce\0\u0948\0\u4410\0\u4452\0\u4494\0\u0948\0\u44d6"+
    "\0\u0948\0\102\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662"+
    "\0\u46a4\0\u46e6\0\102\0\u4728\0\u476a\0\102\0\u47ac\0\u47ee"+
    "\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u0948"+
    "\0\102\0\102\0\u49fe\0\u0948\0\u4a40\0\102\0\u4a82\0\u4ac4"+
    "\0\u4b06\0\u0948\0\u4b48\0\u0948\0\102\0\u4b8a\0\u4bcc\0\u4c0e"+
    "\0\102\0\102\0\102\0\u4c50\0\102\0\u4c92\0\u4cd4\0\u4d16"+
    "\0\u4d58\0\102\0\u4d9a\0\102\0\u4ddc\0\102\0\u4e1e\0\u4e60"+
    "\0\u4ea2\0\u4ee4\0\u4f26\0\102\0\102\0\u4f68\0\u4faa\0\u4fec"+
    "\0\u502e\0\u5070\0\102\0\102\0\u50b2\0\u50f4\0\u5136\0\u5178"+
    "\0\102\0\u51ba\0\u51fc\0\102\0\u523e\0\u5280\0\u52c2\0\u5304"+
    "\0\u5346\0\u5388\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514"+
    "\0\u5556\0\u5598\0\u55da\0\u561c\0\102\0\u565e\0\u56a0\0\u56e2"+
    "\0\u5724\0\u5766\0\u57a8\0\u0948\0\u57ea\0\u582c\0\u586e\0\u58b0"+
    "\0\u58f2\0\u5934\0\u5976\0\u59b8\0\u59fa\0\102\0\u5a3c\0\u5a7e"+
    "\0\u5ac0\0\u5b02\0\102\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a\0\u5c4c"+
    "\0\u0948\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8\0\u5e1a"+
    "\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\102\0\u5fa6\0\u5fe8"+
    "\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u0948\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6"+
    "\0\102\0\u6408\0\u644a\0\u648c\0\u64ce\0\u0948\0\u6510\0\u6552"+
    "\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762"+
    "\0\102\0\u67a4\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u0948"+
    "\0\u6930\0\u0948\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u6abc"+
    "\0\u6afe\0\u6b40\0\102\0\102\0\u6b82\0\u6bc4\0\u0948\0\u6c06"+
    "\0\u0948\0\u6c48\0\u6c8a\0\u6ccc\0\u0948\0\u6d0e\0\u6d50\0\u6d92"+
    "\0\102\0\102\0\u6dd4\0\u0948\0\u6e16\0\102\0\u6e58\0\u6e9a"+
    "\0\u6edc\0\102\0\u6f1e\0\u0948\0\u6f60\0\u6fa2\0\u0948\0\u6fe4"+
    "\0\102\0\u7026\0\102\0\u7068\0\u0948\0\u70aa\0\u0948\0\102"+
    "\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[521];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\6\4\2"+
    "\1\7\1\2\1\10\2\2\1\11\2\2\1\12\1\2"+
    "\2\13\1\14\1\15\1\16\1\17\1\20\1\2\1\21"+
    "\1\2\1\7\1\2\1\5\1\12\2\2\1\11\5\2"+
    "\1\3\1\10\4\2\1\4\1\6\7\2\1\13\7\2"+
    "\105\0\1\22\15\0\1\23\25\0\1\23\11\0\1\22"+
    "\34\0\1\24\26\0\1\24\57\0\1\25\25\0\1\25"+
    "\41\0\1\26\36\0\1\26\47\0\1\27\26\0\1\27"+
    "\37\0\1\30\51\0\1\30\35\0\1\31\36\0\1\31"+
    "\34\0\1\32\51\0\1\32\26\0\6\33\1\34\15\33"+
    "\1\35\1\0\1\36\5\33\1\0\1\33\1\37\3\33"+
    "\1\40\1\33\1\35\1\33\1\41\1\42\4\33\1\43"+
    "\1\33\1\44\1\45\1\33\1\46\5\33\1\47\1\33"+
    "\1\35\1\0\1\33\1\50\1\51\3\50\1\33\25\52"+
    "\1\0\1\53\5\52\1\0\2\52\1\54\1\55\1\56"+
    "\1\52\1\57\1\52\1\60\1\61\1\62\1\52\1\63"+
    "\1\52\1\64\1\65\1\52\1\66\1\52\1\67\1\70"+
    "\10\52\1\0\7\52\3\0\1\71\55\0\1\71\37\0"+
    "\1\72\32\0\1\72\41\0\1\73\43\0\1\73\32\0"+
    "\1\74\36\0\1\74\43\0\1\75\56\0\1\75\24\0"+
    "\1\76\43\0\1\76\30\0\1\77\11\0\1\100\32\0"+
    "\1\100\2\0\1\77\45\0\1\101\25\0\1\101\43\0"+
    "\1\102\51\0\1\102\16\0\25\33\1\0\1\103\5\33"+
    "\1\104\35\33\1\0\6\33\1\105\21\33\1\106\3\33"+
    "\1\0\1\103\5\33\1\104\35\33\1\0\6\33\1\105"+
    "\1\33\24\35\1\0\1\107\5\33\1\110\2\33\33\35"+
    "\1\111\1\33\5\35\1\105\6\33\1\34\15\33\1\35"+
    "\1\0\1\36\5\33\1\112\1\33\1\37\3\33\1\40"+
    "\1\33\1\35\1\33\1\41\1\42\4\33\1\43\1\33"+
    "\1\44\1\45\1\33\1\46\5\33\1\47\1\33\1\35"+
    "\1\0\1\33\1\50\1\51\3\50\2\33\23\113\1\33"+
    "\1\0\1\103\5\33\1\104\2\33\33\113\1\114\1\33"+
    "\5\113\1\105\25\33\1\0\1\103\5\33\1\104\11\33"+
    "\1\115\23\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\21\33\1\116\6\33\1\117\4\33\1\0"+
    "\6\33\1\105\25\33\1\0\1\103\5\33\1\104\11\33"+
    "\1\120\23\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\16\33\1\121\16\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\103\5\33\1\104\4\33\1\122\30\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\4\33\1\123\30\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\4\33\1\124\30\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\3\33\1\125"+
    "\31\33\1\0\6\33\1\105\25\33\1\0\1\126\5\33"+
    "\1\127\35\33\1\0\1\33\5\130\1\105\25\33\1\0"+
    "\1\126\5\33\1\127\35\33\1\0\1\33\5\131\1\105"+
    "\25\52\1\0\1\132\5\52\1\0\1\133\34\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\2\52\1\134"+
    "\31\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\7\52\1\135\24\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\11\52\1\136\22\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\14\52\1\137\17\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\10\52\1\140"+
    "\23\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\21\52\1\141\12\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\3\52\1\142\4\52\1\143\23\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\5\52\1\144"+
    "\26\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\1\52\1\145\15\52\1\146\5\52\1\147\6\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\15\52\1\150"+
    "\16\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\5\52\1\151\26\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\3\52\1\152\30\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\5\52\1\153\17\52\1\154"+
    "\6\52\1\0\7\52\7\0\1\155\36\0\1\155\42\0"+
    "\1\156\36\0\1\156\50\0\1\157\36\0\1\157\43\0"+
    "\1\160\47\0\1\160\27\0\1\161\26\0\1\161\40\0"+
    "\1\162\46\0\1\162\37\0\1\163\36\0\1\163\34\0"+
    "\1\164\51\0\1\164\35\0\1\165\36\0\1\165\47\0"+
    "\1\166\26\0\1\166\36\0\25\167\1\0\1\103\5\167"+
    "\1\104\35\167\1\0\6\167\1\170\25\33\1\0\1\171"+
    "\5\33\1\104\35\33\1\0\6\33\1\105\21\33\1\172"+
    "\3\33\1\0\1\103\5\33\1\104\35\33\1\0\6\33"+
    "\1\105\25\167\1\0\1\107\5\167\1\110\35\167\1\0"+
    "\6\167\1\170\1\0\24\111\1\0\1\173\5\0\1\110"+
    "\2\0\34\111\1\0\5\111\1\0\1\33\23\174\1\33"+
    "\1\0\1\103\5\33\1\104\2\33\33\174\1\175\1\33"+
    "\5\174\1\105\1\0\23\175\13\0\34\175\1\0\5\175"+
    "\1\0\25\33\1\0\1\103\5\33\1\104\22\33\1\176"+
    "\12\33\1\0\6\33\1\105\25\33\1\0\1\103\5\33"+
    "\1\104\16\33\1\177\16\33\1\0\6\33\1\105\25\33"+
    "\1\0\1\103\5\33\1\104\31\33\1\200\3\33\1\0"+
    "\6\33\1\105\25\33\1\0\1\103\5\33\1\104\12\33"+
    "\1\201\22\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\15\33\1\202\17\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\103\5\33\1\104\2\33\1\203\32\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\15\33\1\204\17\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\2\33\1\205\32\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\10\33\1\206"+
    "\24\33\1\0\6\33\1\105\25\167\1\0\1\126\5\167"+
    "\1\127\35\167\1\0\6\167\1\170\25\33\1\0\1\126"+
    "\5\33\1\127\35\33\1\0\1\33\5\207\1\105\25\33"+
    "\1\0\1\103\5\33\1\104\35\33\1\0\1\33\5\210"+
    "\1\105\26\0\1\132\6\0\1\211\44\0\25\52\1\0"+
    "\1\132\5\52\1\0\1\133\3\52\1\212\30\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\2\52\1\213"+
    "\31\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\10\52\1\214\23\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\10\52\1\215\23\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\11\52\1\216\22\52\1\0"+
    "\34\52\1\0\1\217\5\52\1\0\1\220\34\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\26\52\1\221"+
    "\5\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\11\52\1\222\22\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\14\52\1\223\17\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\23\52\1\224\10\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\14\52\1\225"+
    "\17\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\10\52\1\226\1\227\22\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\11\52\1\230\5\52\1\231\1\52"+
    "\1\232\12\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\21\52\1\233\12\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\23\52\1\234\10\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\25\52\1\235\6\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\15\52"+
    "\1\236\16\52\1\0\7\52\14\0\1\237\26\0\1\237"+
    "\40\0\1\240\46\0\1\240\44\0\1\241\26\0\1\241"+
    "\60\0\1\242\15\0\1\242\61\0\1\243\24\0\1\243"+
    "\53\0\1\244\32\0\1\244\42\0\1\245\23\0\1\245"+
    "\54\0\1\246\43\0\1\246\37\0\1\247\26\0\1\247"+
    "\55\0\1\250\32\0\1\250\27\0\25\167\1\0\6\167"+
    "\1\112\35\167\1\0\7\167\25\251\1\0\1\252\5\251"+
    "\1\104\35\251\1\0\34\251\1\0\1\171\5\251\1\104"+
    "\35\251\1\0\6\251\1\253\15\33\1\254\7\33\1\0"+
    "\1\103\5\33\1\104\35\33\1\0\6\33\1\105\26\0"+
    "\1\173\5\0\1\110\45\0\1\33\23\255\1\33\1\0"+
    "\1\103\5\33\1\104\2\33\33\255\1\256\1\33\5\255"+
    "\1\105\1\0\23\256\13\0\34\256\1\0\5\256\1\0"+
    "\25\33\1\0\1\103\5\33\1\104\4\33\1\257\30\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\20\33\1\260\14\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\3\33\1\261\31\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\3\33\1\262"+
    "\31\33\1\0\6\33\1\105\25\33\1\0\1\103\5\33"+
    "\1\104\15\33\1\263\17\33\1\0\6\33\1\105\25\33"+
    "\1\0\1\103\5\33\1\104\3\33\1\264\31\33\1\0"+
    "\6\33\1\105\25\33\1\0\1\103\5\33\1\104\4\33"+
    "\1\265\30\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\12\33\1\266\22\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\103\5\33\1\104\12\33\1\267\22\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\126\5\33\1\127"+
    "\35\33\1\0\1\33\5\270\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\35\33\1\0\1\33\5\271\1\105\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\4\52\1\272\27\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\15\52"+
    "\1\273\16\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\30\52\1\274\3\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\17\52\1\275\14\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\276\23\52"+
    "\1\0\7\52\26\0\1\217\6\0\1\277\44\0\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\11\52\1\300\22\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\2\52"+
    "\1\301\31\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\14\52\1\302\17\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\24\52\1\303\7\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\3\52\1\304\30\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\1\52"+
    "\1\305\32\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\2\52\1\306\31\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\24\52\1\307\7\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\310\23\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\14\52"+
    "\1\311\17\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\312\23\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\24\52\1\313\7\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\5\52\1\314\26\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\7\52"+
    "\1\315\24\52\1\0\7\52\13\0\1\316\23\0\1\316"+
    "\64\0\1\317\15\0\1\317\54\0\1\320\23\0\1\320"+
    "\46\0\1\321\34\0\1\321\44\0\1\322\34\0\1\322"+
    "\41\0\1\323\51\0\1\323\32\0\1\324\34\0\1\324"+
    "\40\0\25\251\1\0\1\325\5\251\1\112\35\251\1\0"+
    "\6\251\1\253\25\251\1\0\1\252\5\251\1\112\35\251"+
    "\1\0\34\251\1\0\1\326\5\251\1\104\35\251\1\0"+
    "\6\251\1\253\20\33\1\327\4\33\1\0\1\103\5\33"+
    "\1\104\35\33\1\0\1\330\5\33\1\105\1\33\23\331"+
    "\1\33\1\0\1\103\5\33\1\104\2\33\33\331\1\332"+
    "\1\33\5\331\1\105\1\0\23\332\13\0\34\332\1\0"+
    "\5\332\1\0\25\33\1\0\1\103\5\33\1\104\6\33"+
    "\1\333\26\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\4\33\1\334\30\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\103\5\33\1\104\11\33\1\335\23\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\26\33\1\336\6\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\16\33\1\337\16\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\340\5\33\1\341\35\33\1\0"+
    "\6\33\1\105\25\33\1\0\1\103\5\33\1\104\24\33"+
    "\1\342\10\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\15\33\1\343\17\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\103\5\33\1\104\11\33\1\344\23\33"+
    "\1\0\6\33\1\105\24\33\1\345\1\0\1\126\5\33"+
    "\1\127\35\33\1\0\1\33\5\346\1\105\24\33\1\345"+
    "\1\0\1\103\5\33\1\104\35\33\1\0\6\33\1\105"+
    "\25\52\1\0\1\132\5\52\1\0\1\133\5\52\1\347"+
    "\7\52\1\350\16\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\14\52\1\351\17\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\2\52\1\352\31\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\3\52\1\353"+
    "\30\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\5\52\1\354\26\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\5\52\1\355\26\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\25\52\1\356\6\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\15\52\1\357"+
    "\16\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\5\52\1\360\26\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\17\52\1\361\14\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\3\52\1\362\30\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\14\52\1\363"+
    "\17\52\1\0\34\52\1\0\1\364\5\52\1\0\1\365"+
    "\34\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\1\52\1\366\32\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\3\52\1\367\30\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\22\52\1\370\11\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\15\52\1\371"+
    "\16\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\14\52\1\372\17\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\3\52\1\373\30\52\1\0\7\52\4\0"+
    "\1\374\34\0\1\374\61\0\1\375\25\0\1\375\36\0"+
    "\1\376\34\0\1\376\61\0\1\377\25\0\1\377\52\0"+
    "\1\u0100\24\0\1\u0100\55\0\1\u0101\25\0\1\u0101\32\0"+
    "\25\167\1\0\1\325\5\167\1\112\35\167\1\0\6\167"+
    "\1\170\25\251\1\0\1\326\5\251\1\112\35\251\1\0"+
    "\6\251\1\253\25\33\1\0\1\103\5\33\1\104\35\33"+
    "\1\0\1\330\5\33\1\105\25\33\1\0\1\103\1\u0102"+
    "\4\33\1\104\35\33\1\0\6\33\1\105\1\33\23\u0103"+
    "\1\33\1\0\1\103\5\33\1\104\2\33\33\u0103\1\u0104"+
    "\1\33\5\u0103\1\105\1\0\23\u0104\13\0\34\u0104\1\0"+
    "\5\u0104\1\0\25\33\1\0\1\u0105\5\33\1\u0106\35\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\2\33\1\u0107\32\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\4\33\1\u0108\30\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\6\33\1\u0109"+
    "\26\33\1\0\6\33\1\105\25\33\1\0\1\103\5\33"+
    "\1\104\23\33\1\u010a\11\33\1\0\6\33\1\105\25\167"+
    "\1\0\1\340\5\167\1\341\35\167\1\0\6\167\1\170"+
    "\25\33\1\0\1\103\5\33\1\104\25\33\1\u010b\7\33"+
    "\1\0\6\33\1\105\25\33\1\0\1\103\5\33\1\104"+
    "\16\33\1\u010c\16\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\103\5\33\1\104\23\33\1\u010d\11\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\35\33\1\0"+
    "\2\33\1\u010e\1\u010f\2\33\1\105\25\33\1\0\1\126"+
    "\5\33\1\127\35\33\1\0\1\33\5\346\1\105\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\6\52\1\u0110\25\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\6\52"+
    "\1\u0111\25\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\u0112\23\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\3\52\1\u0113\30\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\1\52\1\u0114\32\52"+
    "\1\0\34\52\1\0\1\u0115\5\52\1\0\1\u0116\34\52"+
    "\1\0\34\52\1\0\1\u0117\5\52\1\0\1\u0118\34\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\5\52"+
    "\1\u0119\26\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\14\52\1\u011a\17\52\1\0\34\52\1\0\1\u011b"+
    "\5\52\1\0\1\u011c\34\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\15\52\1\u011d\16\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\15\52\1\u011e\16\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\15\52"+
    "\1\u011f\16\52\1\0\7\52\26\0\1\364\6\0\1\u0120"+
    "\44\0\25\52\1\0\1\132\5\52\1\0\1\133\15\52"+
    "\1\u0121\16\52\1\0\34\52\1\0\1\u0122\5\52\1\0"+
    "\1\u0123\34\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\u0124\23\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\6\52\1\u0125\25\52\1\0\34\52"+
    "\1\0\1\u0126\5\52\1\0\1\u0127\34\52\1\0\34\52"+
    "\1\0\1\u0128\5\52\1\0\1\u0129\34\52\1\0\7\52"+
    "\20\0\1\u012a\24\0\1\u012a\50\0\1\u012b\26\0\1\u012b"+
    "\51\0\1\u012c\23\0\1\u012c\43\0\1\u012d\51\0\1\u012d"+
    "\45\0\1\u012e\32\0\1\u012e\27\0\25\33\1\0\1\103"+
    "\1\u012f\4\33\1\104\35\33\1\0\6\33\1\105\1\33"+
    "\23\u0130\1\33\1\0\1\103\5\33\1\104\2\33\33\u0130"+
    "\1\u0131\1\33\5\u0130\1\105\1\0\23\u0131\13\0\34\u0131"+
    "\1\0\5\u0131\1\0\25\167\1\0\1\u0105\5\167\1\u0106"+
    "\35\167\1\0\6\167\1\170\25\33\1\0\1\u0132\5\33"+
    "\1\u0133\35\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\15\33\1\u0134\17\33\1\0\6\33\1\105"+
    "\25\33\1\0\1\u0135\5\33\1\u0136\35\33\1\0\6\33"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\6\33\1\u0137"+
    "\26\33\1\0\6\33\1\105\25\33\1\0\1\103\5\33"+
    "\1\104\16\33\1\u0138\16\33\1\0\6\33\1\105\25\33"+
    "\1\0\1\103\5\33\1\104\15\33\1\u0138\17\33\1\0"+
    "\6\33\1\105\25\33\1\0\1\103\5\33\1\104\11\33"+
    "\1\u0139\23\33\1\0\6\33\1\105\25\33\1\0\1\103"+
    "\5\33\1\104\35\33\1\0\1\33\1\u013a\1\33\3\u013a"+
    "\1\105\25\33\1\0\1\103\5\33\1\104\35\33\1\0"+
    "\2\33\3\u013a\1\33\1\105\25\52\1\0\1\132\5\52"+
    "\1\0\1\133\7\52\1\u013b\24\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\16\52\1\u013c\15\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\5\52\1\u013d"+
    "\26\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\11\52\1\u013e\22\52\1\0\34\52\1\0\1\u013f\5\52"+
    "\1\0\1\u0140\34\52\1\0\7\52\26\0\1\u0115\6\0"+
    "\1\u0141\72\0\1\u0117\6\0\1\u0142\44\0\25\52\1\0"+
    "\1\u0143\5\52\1\0\1\u0144\34\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\6\52\1\u0145\25\52\1\0"+
    "\7\52\26\0\1\u011b\6\0\1\u0146\44\0\25\52\1\0"+
    "\1\132\5\52\1\0\1\133\14\52\1\u0147\17\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\23\52\1\u0148"+
    "\10\52\1\0\34\52\1\0\1\u0149\5\52\1\0\1\u014a"+
    "\34\52\1\0\34\52\1\0\1\u014b\5\52\1\0\1\u014c"+
    "\34\52\1\0\7\52\26\0\1\u0122\6\0\1\u014d\44\0"+
    "\25\52\1\0\1\132\5\52\1\0\1\133\23\52\1\u014e"+
    "\10\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\20\52\1\u014f\2\52\1\u0150\10\52\1\0\7\52\26\0"+
    "\1\u0126\6\0\1\u0151\72\0\1\u0128\6\0\1\u0152\64\0"+
    "\1\u0153\24\0\1\u0153\55\0\1\u0154\25\0\1\u0154\52\0"+
    "\1\u0155\24\0\1\u0155\50\0\1\u0156\26\0\1\u0156\36\0"+
    "\25\u0157\1\0\1\103\2\33\3\u0157\1\104\35\u0157\1\0"+
    "\6\u0157\1\u0158\25\33\1\0\1\u0159\5\33\1\u015a\35\33"+
    "\1\0\6\33\1\105\26\0\1\u0131\5\0\1\u015a\45\0"+
    "\25\167\1\0\1\u0132\5\167\1\u0133\35\167\1\0\6\167"+
    "\1\170\25\33\1\0\1\103\5\33\1\104\22\33\1\u010b"+
    "\12\33\1\0\6\33\1\105\25\167\1\0\1\u0135\5\167"+
    "\1\u0136\35\167\1\0\6\167\1\170\25\33\1\0\1\u015b"+
    "\5\33\1\u015c\35\33\1\0\6\33\1\105\25\33\1\0"+
    "\1\u015d\5\33\1\u015e\35\33\1\0\6\33\1\105\25\33"+
    "\1\0\1\103\5\33\1\104\24\33\1\343\10\33\1\0"+
    "\6\33\1\105\24\33\1\u015f\1\0\1\103\5\33\1\104"+
    "\35\33\1\0\6\33\1\105\25\52\1\0\1\132\5\52"+
    "\1\0\1\133\10\52\1\u0160\23\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\15\52\1\u0161\16\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\6\52\1\u0162"+
    "\25\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\15\52\1\u0163\16\52\1\0\7\52\26\0\1\u013f\6\0"+
    "\1\u0164\72\0\1\u0143\6\0\1\u0165\44\0\25\52\1\0"+
    "\1\132\5\52\1\0\1\133\7\52\1\u0166\6\52\1\u0167"+
    "\4\52\1\u0168\10\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\6\52\1\u0169\25\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\10\52\1\u016a\23\52\1\0"+
    "\7\52\26\0\1\u0149\6\0\1\u016b\72\0\1\u014b\6\0"+
    "\1\u016c\44\0\25\52\1\0\1\132\5\52\1\0\1\133"+
    "\15\52\1\u016d\16\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\5\52\1\u016e\26\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\14\52\1\u016f\17\52\1\0"+
    "\7\52\4\0\1\u0170\34\0\1\u0170\60\0\1\u0171\24\0"+
    "\1\u0171\34\0\25\u0157\1\0\1\u0172\1\u0173\1\33\3\u0157"+
    "\1\u0174\35\u0157\1\0\6\u0157\1\u0158\25\u0157\1\0\1\u0175"+
    "\1\u0173\1\33\3\u0157\1\u0174\35\u0157\1\0\6\u0157\1\u0158"+
    "\25\167\1\0\1\u0159\5\167\1\u015a\35\167\1\0\6\167"+
    "\1\170\25\167\1\0\1\u015b\5\167\1\u015c\35\167\1\0"+
    "\6\167\1\170\25\167\1\0\1\u015d\5\167\1\u015e\35\167"+
    "\1\0\6\167\1\170\25\33\1\0\1\103\5\33\1\104"+
    "\35\33\1\0\2\33\3\u0176\1\u0177\1\105\25\52\1\0"+
    "\1\132\5\52\1\0\1\133\11\52\1\u0178\22\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\17\52\1\u0179"+
    "\14\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\20\52\1\u017a\2\52\1\u017b\10\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\7\52\1\u017c\24\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\10\52\1\u017d"+
    "\23\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\15\52\1\u017e\16\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\5\52\1\u017f\26\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\23\52\1\u0180\10\52\1\0"+
    "\34\52\1\0\1\132\5\52\1\0\1\133\5\52\1\u0181"+
    "\26\52\1\0\34\52\1\0\1\132\5\52\1\0\1\133"+
    "\14\52\1\u0182\17\52\1\0\34\52\1\0\1\132\5\52"+
    "\1\0\1\133\21\52\1\u0183\12\52\1\0\34\52\1\0"+
    "\1\132\5\52\1\0\1\133\3\52\1\u0184\30\52\1\0"+
    "\7\52\20\0\1\u0185\24\0\1\u0185\34\0\25\167\1\0"+
    "\1\u0172\5\167\1\u0174\35\167\1\0\6\167\1\170\25\u0157"+
    "\1\0\1\u0172\2\33\3\u0157\1\u0174\35\u0157\1\0\6\u0157"+
    "\1\u0158\25\251\1\0\1\u0175\5\251\1\u0174\35\251\1\0"+
    "\6\251\1\253\25\33\1\0\1\103\5\33\1\104\35\33"+
    "\1\0\1\33\5\u0186\1\105\25\33\1\0\1\103\5\33"+
    "\1\104\35\33\1\0\2\33\2\u0186\2\33\1\105\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\u0187\23\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\10\52"+
    "\1\u0188\23\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u0189\26\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\14\52\1\u018a\17\52\1\0\34\52"+
    "\1\0\1\u018b\5\52\1\0\1\u018c\34\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\11\52\1\u018d\22\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\17\52"+
    "\1\u018e\14\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\20\52\1\u018f\13\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\5\52\1\u0190\26\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\1\52\1\u0191\32\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\6\52"+
    "\1\u0192\25\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\u0193\23\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\15\52\1\u0194\16\52\1\0\7\52"+
    "\25\33\1\0\1\u0195\5\33\1\u0196\35\33\1\0\6\33"+
    "\1\105\25\52\1\0\1\132\5\52\1\0\1\133\5\52"+
    "\1\u0197\26\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\1\52\1\u0198\32\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\21\52\1\u0199\12\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\3\52\1\u019a\30\52"+
    "\1\0\7\52\26\0\1\u018b\6\0\1\u019b\44\0\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\u019c\23\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\10\52"+
    "\1\u019d\23\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\16\52\1\u019e\15\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\20\52\1\u019f\13\52\1\0\34\52"+
    "\1\0\1\u01a0\5\52\1\0\1\u01a1\34\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\16\52\1\u01a2\4\52"+
    "\1\u01a3\10\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\22\52\1\u01a4\11\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\23\52\1\u01a5\10\52\1\0\7\52"+
    "\25\167\1\0\1\u0195\5\167\1\u0196\35\167\1\0\6\167"+
    "\1\170\25\52\1\0\1\132\5\52\1\0\1\133\6\52"+
    "\1\u01a6\25\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\15\52\1\u01a7\16\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\10\52\1\u01a8\23\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\15\52\1\u01a9\16\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\5\52"+
    "\1\u01aa\26\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\1\52\1\u01ab\32\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\5\52\1\u01ac\26\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\16\52\1\u01ad\15\52"+
    "\1\0\7\52\26\0\1\u01a0\6\0\1\u01ae\44\0\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\15\52\1\u01af\16\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\5\52"+
    "\1\u01b0\26\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\u01b1\23\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\10\52\1\u01b2\23\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\12\52\1\u01b3\21\52"+
    "\1\0\34\52\1\0\1\u01b4\5\52\1\0\1\u01b5\34\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\22\52"+
    "\1\u01b6\11\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\23\52\1\u01b7\10\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\6\52\1\u01b8\25\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\15\52\1\u01b9\16\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\1\52"+
    "\1\u01ba\32\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u01bb\26\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\17\52\1\u01bc\14\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\20\52\1\u01bd\13\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\23\52"+
    "\1\u01be\10\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u01bf\26\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\3\52\1\u01c0\30\52\1\0\7\52"+
    "\26\0\1\u01b4\6\0\1\u01c1\44\0\25\52\1\0\1\132"+
    "\5\52\1\0\1\133\10\52\1\u01c2\23\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\u01c3\23\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\12\52"+
    "\1\u01c4\21\52\1\0\34\52\1\0\1\u01c5\5\52\1\0"+
    "\1\u01c6\34\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\3\52\1\u01c7\30\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\1\52\1\u01c8\32\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\10\52\1\u01c9\23\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\16\52"+
    "\1\u01ca\15\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\15\52\1\u01cb\16\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\1\52\1\u01cc\32\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\13\52\1\u01cd\20\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\23\52"+
    "\1\u01ce\10\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u01cf\26\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\3\52\1\u01d0\30\52\1\0\7\52"+
    "\26\0\1\u01c5\6\0\1\u01d1\44\0\25\52\1\0\1\132"+
    "\5\52\1\0\1\133\1\52\1\u01d2\32\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\3\52\1\u01d3\30\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\1\52"+
    "\1\u01d4\32\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u01d5\26\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\23\52\1\u01d6\10\52\1\0\34\52"+
    "\1\0\1\u01d7\5\52\1\0\1\u01d8\34\52\1\0\34\52"+
    "\1\0\1\u01d9\5\52\1\0\1\u01da\34\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\15\52\1\u01db\16\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\1\52"+
    "\1\u01dc\32\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\13\52\1\u01dd\20\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\11\52\1\u01de\22\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\1\52\1\u01df\32\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\15\52"+
    "\1\u01e0\16\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\1\52\1\u01e1\32\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\10\52\1\u01e2\23\52\1\0\7\52"+
    "\26\0\1\u01d7\6\0\1\u01e3\72\0\1\u01d9\6\0\1\u01e4"+
    "\44\0\25\52\1\0\1\132\5\52\1\0\1\133\23\52"+
    "\1\u01e5\10\52\1\0\34\52\1\0\1\u01e6\5\52\1\0"+
    "\1\u01e7\34\52\1\0\34\52\1\0\1\u01e8\5\52\1\0"+
    "\1\u01e9\34\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\3\52\1\u01ea\30\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\11\52\1\u01eb\22\52\1\0\34\52"+
    "\1\0\1\u01ec\5\52\1\0\1\u01ed\34\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\3\52\1\u01ee\30\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\5\52"+
    "\1\u01ef\26\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\10\52\1\u01f0\23\52\1\0\7\52\26\0\1\u01e6"+
    "\6\0\1\u01f1\72\0\1\u01e8\6\0\1\u01f2\44\0\25\52"+
    "\1\0\1\u01f3\5\52\1\0\1\u01f4\34\52\1\0\34\52"+
    "\1\0\1\132\5\52\1\0\1\133\3\52\1\u01f5\30\52"+
    "\1\0\7\52\26\0\1\u01ec\6\0\1\u01f6\44\0\25\52"+
    "\1\0\1\132\5\52\1\0\1\133\1\52\1\u01f7\32\52"+
    "\1\0\34\52\1\0\1\132\5\52\1\0\1\133\1\52"+
    "\1\u01f8\32\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\5\52\1\u01f9\26\52\1\0\7\52\26\0\1\u01f3"+
    "\6\0\1\u01fa\44\0\25\52\1\0\1\u01fb\5\52\1\0"+
    "\1\u01fc\34\52\1\0\34\52\1\0\1\132\5\52\1\0"+
    "\1\133\11\52\1\u01fd\22\52\1\0\34\52\1\0\1\u01fe"+
    "\5\52\1\0\1\u01ff\34\52\1\0\34\52\1\0\1\132"+
    "\5\52\1\0\1\133\1\52\1\u0200\32\52\1\0\7\52"+
    "\26\0\1\u01fb\6\0\1\u0201\44\0\25\52\1\0\1\132"+
    "\5\52\1\0\1\133\3\52\1\u0202\30\52\1\0\7\52"+
    "\26\0\1\u01fe\6\0\1\u0203\44\0\25\52\1\0\1\u0204"+
    "\5\52\1\0\1\u0205\34\52\1\0\34\52\1\0\1\u0206"+
    "\5\52\1\0\1\u0207\34\52\1\0\7\52\26\0\1\u0204"+
    "\6\0\1\u0208\72\0\1\u0206\6\0\1\u0209\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28908];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\5\11\2\1\62\0\1\11\3\0"+
    "\1\11\1\0\1\11\14\0\1\11\3\0\1\1\25\0"+
    "\1\1\27\0\1\11\6\0\1\1\22\0\1\11\3\0"+
    "\2\11\26\0\1\11\16\0\1\1\3\0\1\11\1\1"+
    "\15\0\1\11\23\0\1\1\12\0\1\11\5\0\1\11"+
    "\17\0\1\1\1\0\1\1\3\0\1\1\3\0\1\11"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\5\0\1\11\2\0\1\11\11\0\1\1"+
    "\2\11\1\0\1\1\1\0\1\11\3\0\1\1\1\0"+
    "\1\1\1\11\3\0\3\11\1\0\1\11\1\1\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\5\0"+
    "\2\11\3\0\1\1\1\11\2\0\1\11\20\0\1\11"+
    "\6\0\1\1\11\0\1\11\4\0\1\11\5\0\1\1"+
    "\14\0\1\11\6\0\1\1\13\0\1\11\4\0\1\1"+
    "\12\0\1\11\6\0\1\1\1\0\1\1\10\0\2\11"+
    "\2\0\1\1\1\0\1\1\3\0\1\1\3\0\2\11"+
    "\1\0\1\1\1\0\1\11\3\0\1\11\1\0\1\1"+
    "\2\0\1\1\1\0\1\11\1\0\1\11\1\0\1\1"+
    "\1\0\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[521];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
	public int linea;
	public int columna;
	public char c;
	JTextArea textArea;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}

	private void error(String error, int linea, int columna) {
		String mensaje = "Se detecto un Error Lexico en la  Linea:" + linea + "  Columna: " + columna+"  El error:"+error;
		System.out.println(mensaje);
		this.textArea.append("\n" + mensaje);
	}

	public Lexer2 (java.io.Reader entrada, JTextArea textArea) {
		this.zzReader = entrada;
		this.textArea = textArea;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2536) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext(),yyline+1,yycolumn+1); return symbol(error, yytext());
            } 
            // fall through
          case 64: break;
          case 2: 
            { /* los ignoramos */
            } 
            // fall through
          case 65: break;
          case 3: 
            { System.out.printf(" FIN %s\n", yytext()); return symbol(DIAGONAL, yytext());
            } 
            // fall through
          case 66: break;
          case 4: 
            { System.out.printf(" ABRE: %s\n", yytext()); return symbol(ABRE, yytext());
            } 
            // fall through
          case 67: break;
          case 5: 
            { System.out.printf(" CIERRA: %s\n", yytext()); return symbol(CIERRA, yytext());
            } 
            // fall through
          case 68: break;
          case 6: 
            { System.out.printf(" IGUAL: %s\n", yytext()); return symbol(IGUAL, yytext());
            } 
            // fall through
          case 69: break;
          case 7: 
            { System.out.printf(" PARAMETRO ETIQUETAS: %s\n", yytext()); return symbol(PARAMETRO_ATRIBUTO_ETIQUETAS, yytext());
            } 
            // fall through
          case 70: break;
          case 8: 
            { System.out.printf(" PARAMETRO ID: %s\n", yytext()); return symbol(PARAMETRO_ID, yytext());
            } 
            // fall through
          case 71: break;
          case 9: 
            { System.out.printf(" PARAMETRO TEXTO: %s\n", yytext()); return symbol(PARAMETRO_TODO_TEXTO, yytext());
            } 
            // fall through
          case 72: break;
          case 10: 
            { System.out.printf(" PARAMETRO ALTURA: %s\n", yytext()); return symbol(PARAMETRO_ENTERO, yytext());
            } 
            // fall through
          case 73: break;
          case 11: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(NOMBRE_ETIQUETA, yytext());
            } 
            // fall through
          case 74: break;
          case 12: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_HIJO, yytext());
            } 
            // fall through
          case 75: break;
          case 13: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(ID, yytext());
            } 
            // fall through
          case 76: break;
          case 14: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_HIJOS, yytext());
            } 
            // fall through
          case 77: break;
          case 15: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_SITIO, yytext());
            } 
            // fall through
          case 78: break;
          case 16: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(VALOR, yytext());
            } 
            // fall through
          case 79: break;
          case 17: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ACCION, yytext());
            } 
            // fall through
          case 80: break;
          case 18: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(NOMBRE, yytext());
            } 
            // fall through
          case 81: break;
          case 19: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_PAGINA, yytext());
            } 
            // fall through
          case 82: break;
          case 20: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_MENU, yytext());
            } 
            // fall through
          case 83: break;
          case 21: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PATH, yytext());
            } 
            // fall through
          case 84: break;
          case 22: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_PAGINAS, yytext());
            } 
            // fall through
          case 85: break;
          case 23: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_VIDEO, yytext());
            } 
            // fall through
          case 86: break;
          case 24: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(SITIO, yytext());
            } 
            // fall through
          case 87: break;
          case 25: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(TEXTO, yytext());
            } 
            // fall through
          case 88: break;
          case 26: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ANCHO, yytext());
            } 
            // fall through
          case 89: break;
          case 27: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PADRE, yytext());
            } 
            // fall through
          case 90: break;
          case 28: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(COLOR, yytext());
            } 
            // fall through
          case 91: break;
          case 29: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(CLASE, yytext());
            } 
            // fall through
          case 92: break;
          case 30: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ACCIONES, yytext());
            } 
            // fall through
          case 93: break;
          case 31: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ATRIBUTO, yytext());
            } 
            // fall through
          case 94: break;
          case 32: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ETIQUETA, yytext());
            } 
            // fall through
          case 95: break;
          case 33: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_IMAGEN, yytext());
            } 
            // fall through
          case 96: break;
          case 34: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PARAMETRO_TITULO, yytext());
            } 
            // fall through
          case 97: break;
          case 35: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ORIGEN, yytext());
            } 
            // fall through
          case 98: break;
          case 36: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(TITULO, yytext());
            } 
            // fall through
          case 99: break;
          case 37: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ALTURA, yytext());
            } 
            // fall through
          case 100: break;
          case 38: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PAGINA, yytext());
            } 
            // fall through
          case 101: break;
          case 39: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ATRIBUTOS, yytext());
            } 
            // fall through
          case 102: break;
          case 40: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ETIQUETAS, yytext());
            } 
            // fall through
          case 103: break;
          case 41: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(PARAMETRO, yytext());
            } 
            // fall through
          case 104: break;
          case 42: 
            { System.out.printf(" PARAMETRO COLOR: %s\n", yytext()); return symbol(PARAMETRO_COLOR, yytext());
            } 
            // fall through
          case 105: break;
          case 43: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_PARRAFO, yytext());
            } 
            // fall through
          case 106: break;
          case 44: 
            { System.out.printf(" PARAMETRO ALINACION: %s\n", yytext()); return symbol(PARAMETRO_ALINEACION, yytext());
            } 
            // fall through
          case 107: break;
          case 45: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_COMPONENTE, yytext());
            } 
            // fall through
          case 108: break;
          case 46: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(PARAMETROS, yytext());
            } 
            // fall through
          case 109: break;
          case 47: 
            { System.out.printf(" PARAMETRO URL: %s\n", yytext()); return symbol(PARAMETRO_URL, yytext());
            } 
            // fall through
          case 110: break;
          case 48: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(E_COMPONENTES, yytext());
            } 
            // fall through
          case 111: break;
          case 49: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ATRIBUTO_ETIQUETAS, yytext());
            } 
            // fall through
          case 112: break;
          case 50: 
            { System.out.printf(" PARAMETRO FECHA: %s\n", yytext()); return symbol(PARAMETRO_FECHA, yytext());
            } 
            // fall through
          case 113: break;
          case 51: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ALINEACION, yytext());
            } 
            // fall through
          case 114: break;
          case 52: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(NUEVA_PAGINA, yytext());
            } 
            // fall through
          case 115: break;
          case 53: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_PAGINA, yytext());
            } 
            // fall through
          case 116: break;
          case 54: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(FECHA_CREACION, yytext());
            } 
            // fall through
          case 117: break;
          case 55: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(NUEVO_SITIO_WEB, yytext());
            } 
            // fall through
          case 118: break;
          case 56: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(USUARIO_CREACION, yytext());
            } 
            // fall through
          case 119: break;
          case 57: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_SITIO_WEB, yytext());
            } 
            // fall through
          case 120: break;
          case 58: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(MODIFICAR_PAGINA, yytext());
            } 
            // fall through
          case 121: break;
          case 59: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_COMPONENTE, yytext());
            } 
            // fall through
          case 122: break;
          case 60: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(AGREGAR_COMPONENTE, yytext());
            } 
            // fall through
          case 123: break;
          case 61: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(FECHA_MODIFICACION, yytext());
            } 
            // fall through
          case 124: break;
          case 62: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(USUARIO_MODIFICACION, yytext());
            } 
            // fall through
          case 125: break;
          case 63: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(MODIFICAR_COMPONENTE, yytext());
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer2 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer2 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer2(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
