/* The following code was generated by JFlex 1.7.0 */

package proyecto1compi1;

import static proyecto1compi1.sym.*;
import java_cup.runtime.*;
import javax.swing.JTextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\5\1\70\2\25\1\0\2\24\16\5\4\0\1\25\1\0\1\34"+
    "\1\35\1\67\10\0\1\23\1\0\1\26\1\73\1\74\1\75\1\76"+
    "\6\72\1\71\1\0\1\27\1\31\1\30\2\0\1\52\1\50\1\60"+
    "\1\56\1\40\1\57\1\54\1\61\1\45\1\66\1\5\1\62\1\55"+
    "\1\36\1\42\1\53\1\65\1\51\1\44\1\46\1\37\1\41\1\47"+
    "\1\63\1\5\1\64\1\32\1\0\1\33\1\0\1\43\1\0\1\1"+
    "\1\2\1\3\1\5\1\4\1\5\1\5\1\6\1\7\1\5\1\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\4\5\1\0\1\77\2\0\41\5\2\0\4\5\4\0\1\5"+
    "\2\0\1\5\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\21\0\165\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\5"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5"+
    "\10\0\33\5\5\0\3\5\15\0\5\5\6\0\1\5\4\0\13\5"+
    "\5\0\112\5\4\0\146\5\1\0\11\5\1\0\12\5\1\0\23\5"+
    "\2\0\1\5\17\0\74\5\2\0\145\5\16\0\66\5\4\0\1\5"+
    "\5\0\56\5\22\0\34\5\104\0\1\5\1\0\13\5\67\0\33\5"+
    "\1\0\144\5\2\0\12\5\1\0\7\5\1\0\7\5\1\0\3\5"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5"+
    "\3\0\4\5\2\0\11\5\2\0\2\5\2\0\4\5\10\0\1\5"+
    "\4\0\2\5\1\0\5\5\2\0\16\5\7\0\1\5\5\0\3\5"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5"+
    "\2\0\3\5\3\0\1\5\7\0\4\5\1\0\1\5\7\0\20\5"+
    "\13\0\3\5\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3\5\1\0\3\5"+
    "\2\0\1\5\17\0\4\5\2\0\12\5\1\0\1\5\17\0\3\5"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\2\0\11\5\2\0\2\5\2\0\3\5\10\0\2\5"+
    "\4\0\2\5\1\0\5\5\2\0\12\5\1\0\1\5\20\0\2\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\5"+
    "\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5\16\0\12\5"+
    "\11\0\1\5\7\0\3\5\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\10\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\1\0\2\5\6\0\4\5\2\0\12\5\22\0\2\5"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\11\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\5"+
    "\1\0\4\5\2\0\12\5\1\0\2\5\17\0\2\5\1\0\10\5"+
    "\1\0\3\5\1\0\51\5\2\0\10\5\1\0\3\5\1\0\5\5"+
    "\10\0\1\5\10\0\4\5\2\0\12\5\12\0\6\5\2\0\2\5"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5"+
    "\15\0\72\5\4\0\20\5\1\0\12\5\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\15\5"+
    "\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5\2\0\12\5"+
    "\2\0\4\5\40\0\1\5\27\0\2\5\6\0\12\5\13\0\1\5"+
    "\1\0\1\5\1\0\1\5\4\0\12\5\1\0\44\5\4\0\24\5"+
    "\1\0\22\5\1\0\44\5\11\0\1\5\71\0\112\5\6\0\116\5"+
    "\2\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5"+
    "\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5"+
    "\2\0\3\5\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5"+
    "\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\7\5"+
    "\13\0\25\5\13\0\24\5\14\0\15\5\1\0\3\5\1\0\2\5"+
    "\14\0\124\5\3\0\1\5\3\0\3\5\2\0\12\5\41\0\3\5"+
    "\2\0\12\5\6\0\130\5\10\0\53\5\5\0\106\5\12\0\35\5"+
    "\3\0\14\5\4\0\14\5\12\0\50\5\2\0\5\5\13\0\54\5"+
    "\4\0\32\5\6\0\12\5\46\0\34\5\4\0\77\5\1\0\35\5"+
    "\2\0\13\5\6\0\12\5\15\0\1\5\130\0\114\5\4\0\12\5"+
    "\21\0\11\5\14\0\164\5\14\0\70\5\10\0\12\5\3\0\61\5"+
    "\122\0\3\5\1\0\43\5\11\0\347\5\25\0\u011a\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5"+
    "\5\0\3\5\1\0\7\5\16\0\5\5\32\0\5\5\20\0\2\5"+
    "\23\0\1\5\13\0\5\5\5\0\6\5\1\0\1\5\15\0\1\5"+
    "\20\0\15\5\3\0\33\5\25\0\15\5\4\0\1\5\3\0\14\5"+
    "\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5"+
    "\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5"+
    "\1\0\57\5\1\0\205\5\6\0\11\5\14\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\70\5\7\0\1\5\17\0\30\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\40\5\57\0\1\5\u01d5\0\3\5"+
    "\31\0\17\5\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\5"+
    "\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5"+
    "\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5"+
    "\103\0\56\5\2\0\u010d\5\3\0\34\5\24\0\60\5\4\0\12\5"+
    "\1\0\31\5\7\0\123\5\45\0\11\5\2\0\147\5\2\0\4\5"+
    "\1\0\4\5\14\0\13\5\115\0\60\5\20\0\1\5\7\0\64\5"+
    "\14\0\105\5\13\0\12\5\6\0\30\5\3\0\1\5\4\0\56\5"+
    "\2\0\44\5\14\0\35\5\3\0\101\5\16\0\13\5\46\0\67\5"+
    "\11\0\16\5\2\0\12\5\6\0\27\5\3\0\2\5\4\0\103\5"+
    "\30\0\3\5\2\0\20\5\2\0\5\5\12\0\6\5\2\0\6\5"+
    "\2\0\6\5\11\0\7\5\1\0\7\5\221\0\53\5\1\0\2\5"+
    "\2\0\12\5\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\14\5\1\0\15\5"+
    "\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5"+
    "\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\5"+
    "\20\0\7\5\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5"+
    "\1\0\207\5\2\0\1\5\4\0\1\5\13\0\12\5\7\0\32\5"+
    "\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\5"+
    "\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5\1\0\17\5"+
    "\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\5\202\0\35\5"+
    "\3\0\61\5\57\0\37\5\21\0\33\5\65\0\36\5\2\0\44\5"+
    "\4\0\10\5\1\0\5\5\52\0\236\5\2\0\12\5\u0356\0\6\5"+
    "\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0\27\5"+
    "\252\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5\100\0\4\5"+
    "\1\0\2\5\5\0\10\5\1\0\3\5\1\0\33\5\4\0\3\5"+
    "\4\0\1\5\40\0\35\5\203\0\66\5\12\0\26\5\12\0\23\5"+
    "\215\0\111\5\u03b7\0\107\5\37\0\12\5\20\0\73\5\2\0\1\5"+
    "\22\0\31\5\7\0\12\5\6\0\65\5\1\0\12\5\100\0\105\5"+
    "\13\0\12\5\u04a6\0\70\5\10\0\12\5\u0936\0\u036f\5\221\0\143\5"+
    "\u0b9d\0\u042f\5\u33d1\0\u0239\5\u04c7\0\105\5\13\0\57\5\20\0\21\5"+
    "\u4060\0\2\5\u2163\0\5\5\3\0\26\5\2\0\7\5\36\0\4\5"+
    "\224\0\3\5\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0\1\5"+
    "\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5"+
    "\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\34\5"+
    "\1\0\4\5\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5"+
    "\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5"+
    "\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\10\5\2\0\62\5\u1600\0\4\5\1\0\33\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5"+
    "\1\0\12\5\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5"+
    "\u1144\0\ua6d7\5\51\0\u1035\5\13\0\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\6\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\53\0\1\7\3\0\1\10\1\0\1\11\14\0\1\12"+
    "\3\0\1\13\51\0\1\13\6\0\1\14\22\0\1\15"+
    "\26\0\1\14\15\0\1\16\2\0\1\17\15\0\1\20"+
    "\40\0\1\21\17\0\1\22\1\0\1\23\3\0\1\24"+
    "\5\0\1\25\3\0\1\26\1\0\1\27\1\30\1\31"+
    "\1\32\5\0\1\33\2\0\1\34\11\0\1\35\1\22"+
    "\1\23\1\0\1\36\1\0\1\24\3\0\1\37\1\0"+
    "\1\40\1\25\3\0\1\26\1\27\1\41\1\42\1\43"+
    "\3\0\1\44\1\0\1\45\1\0\1\46\5\0\1\35"+
    "\1\36\5\0\1\37\1\40\3\0\1\47\2\0\1\50"+
    "\26\0\1\51\11\0\1\52\4\0\1\51\5\0\1\53"+
    "\14\0\1\53\6\0\1\54\13\0\1\54\4\0\1\55"+
    "\12\0\1\55\6\0\1\56\1\0\1\57\10\0\1\56"+
    "\1\57\2\0\1\60\1\0\1\61\3\0\1\62\3\0"+
    "\1\60\1\61\1\0\1\63\1\0\1\62\3\0\1\63"+
    "\1\0\1\64\2\0\1\65\1\0\1\64\1\0\1\65"+
    "\1\0\1\66\1\0\1\67\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\100"+
    "\0\100\0\100\0\100\0\100\0\u01c0\0\u0200\0\u0240\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u0200\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\100\0\u0cc0\0\u0d00\0\u0d40\0\100\0\u0d80\0\100"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\100\0\u10c0\0\u1100\0\u1140"+
    "\0\u0780\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\100\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u0780\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\100\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\100\0\u2740\0\u2780\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\100\0\u2b40\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0"+
    "\0\u2e00\0\u2e40\0\100\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380"+
    "\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580"+
    "\0\u35c0\0\u3600\0\u3640\0\100\0\u3680\0\u36c0\0\u3700\0\u3740"+
    "\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940"+
    "\0\u3980\0\u39c0\0\u3a00\0\u0780\0\u3a40\0\u0780\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u0780\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u0780"+
    "\0\u3c80\0\u3cc0\0\u3d00\0\u0780\0\u3d40\0\u0780\0\100\0\u3d80"+
    "\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\100\0\u3f40"+
    "\0\u3f80\0\100\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100"+
    "\0\u4140\0\u4180\0\u41c0\0\u0780\0\100\0\100\0\u4200\0\u0780"+
    "\0\u4240\0\100\0\u4280\0\u42c0\0\u4300\0\u0780\0\u4340\0\u0780"+
    "\0\100\0\u4380\0\u43c0\0\u4400\0\100\0\100\0\100\0\100"+
    "\0\u4440\0\u4480\0\u44c0\0\u4500\0\100\0\u4540\0\100\0\u4580"+
    "\0\100\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\100\0\100"+
    "\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\100\0\100\0\u4840"+
    "\0\u4880\0\u48c0\0\100\0\u4900\0\u4940\0\100\0\u4980\0\u49c0"+
    "\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0"+
    "\0\u4c00\0\u4c40\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0"+
    "\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u0780\0\u4f00\0\u4f40\0\u4f80"+
    "\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\100\0\u5140"+
    "\0\u5180\0\u51c0\0\u5200\0\100\0\u5240\0\u5280\0\u52c0\0\u5300"+
    "\0\u5340\0\u0780\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0"+
    "\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\100\0\u5680"+
    "\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u0780\0\u5800\0\u5840"+
    "\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40"+
    "\0\u5a80\0\100\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u0780\0\u5bc0"+
    "\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0"+
    "\0\u5e00\0\100\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80"+
    "\0\u0780\0\u5fc0\0\u0780\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100"+
    "\0\u6140\0\u6180\0\u61c0\0\100\0\100\0\u6200\0\u6240\0\u0780"+
    "\0\u6280\0\u0780\0\u62c0\0\u6300\0\u6340\0\u0780\0\u6380\0\u63c0"+
    "\0\u6400\0\100\0\100\0\u6440\0\u0780\0\u6480\0\100\0\u64c0"+
    "\0\u6500\0\u6540\0\100\0\u6580\0\u0780\0\u65c0\0\u6600\0\u0780"+
    "\0\u6640\0\100\0\u6680\0\100\0\u66c0\0\u0780\0\u6700\0\u0780"+
    "\0\100\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\5\2\1\5\1\2\1\6"+
    "\5\2\1\7\1\2\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\1\2\1\5\1\2\1\4\1\7"+
    "\10\2\1\3\1\6\14\2\1\10\7\2\103\0\1\17"+
    "\14\0\1\20\25\0\1\20\11\0\1\17\37\0\1\21"+
    "\25\0\1\21\44\0\1\22\26\0\1\22\36\0\1\23"+
    "\50\0\1\23\26\0\1\24\50\0\1\24\25\0\6\25"+
    "\1\26\14\25\1\27\1\0\1\30\5\25\1\0\1\25"+
    "\1\31\3\25\1\32\1\25\1\27\1\25\1\33\1\34"+
    "\4\25\1\35\1\25\1\36\1\37\1\25\1\40\5\25"+
    "\1\41\1\27\1\0\1\25\1\42\1\43\3\42\1\25"+
    "\24\44\1\0\1\45\5\44\1\0\2\44\1\46\1\47"+
    "\1\50\1\44\1\51\1\44\1\52\1\53\1\54\1\44"+
    "\1\55\1\44\1\56\1\57\1\44\1\60\1\44\1\61"+
    "\1\62\7\44\1\0\7\44\3\0\1\63\54\0\1\63"+
    "\35\0\1\64\32\0\1\64\35\0\1\65\35\0\1\65"+
    "\43\0\1\66\43\0\1\66\40\0\1\67\32\0\1\67"+
    "\36\0\1\70\51\0\1\70\15\0\24\25\1\0\1\71"+
    "\5\25\1\72\34\25\1\0\6\25\1\73\20\25\1\74"+
    "\3\25\1\0\1\71\5\25\1\72\34\25\1\0\6\25"+
    "\1\73\1\25\23\27\1\0\1\75\5\25\1\76\2\25"+
    "\32\27\1\77\1\25\5\27\1\73\6\25\1\26\14\25"+
    "\1\27\1\0\1\30\5\25\1\100\1\25\1\31\3\25"+
    "\1\32\1\25\1\27\1\25\1\33\1\34\4\25\1\35"+
    "\1\25\1\36\1\37\1\25\1\40\5\25\1\41\1\27"+
    "\1\0\1\25\1\42\1\43\3\42\2\25\22\101\1\25"+
    "\1\0\1\71\5\25\1\72\2\25\32\101\1\102\1\25"+
    "\5\101\1\73\24\25\1\0\1\71\5\25\1\72\11\25"+
    "\1\103\22\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\21\25\1\104\6\25\1\105\3\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\11\25"+
    "\1\106\22\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\16\25\1\107\15\25\1\0\6\25\1\73"+
    "\24\25\1\0\1\71\5\25\1\72\4\25\1\110\27\25"+
    "\1\0\6\25\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\4\25\1\111\27\25\1\0\6\25\1\73\24\25\1\0"+
    "\1\71\5\25\1\72\4\25\1\112\27\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\3\25\1\113"+
    "\30\25\1\0\6\25\1\73\24\25\1\0\1\114\5\25"+
    "\1\115\34\25\1\0\1\25\5\116\1\73\24\25\1\0"+
    "\1\114\5\25\1\115\34\25\1\0\1\25\5\117\1\73"+
    "\24\44\1\0\1\120\5\44\1\0\1\121\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\2\44\1\122"+
    "\30\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\7\44\1\123\23\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\11\44\1\124\21\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\14\44\1\125\16\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\10\44\1\126"+
    "\22\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\21\44\1\127\11\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\130\4\44\1\131\22\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\132"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\133\15\44\1\134\5\44\1\135\5\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\15\44\1\136"+
    "\15\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\137\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\140\27\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\141\17\44\1\142"+
    "\5\44\1\0\7\44\7\0\1\143\35\0\1\143\41\0"+
    "\1\144\35\0\1\144\47\0\1\145\47\0\1\145\14\0"+
    "\1\146\45\0\1\146\30\0\1\147\50\0\1\147\40\0"+
    "\1\150\26\0\1\150\35\0\24\151\1\0\1\71\5\151"+
    "\1\72\34\151\1\0\6\151\1\152\24\25\1\0\1\153"+
    "\5\25\1\72\34\25\1\0\6\25\1\73\20\25\1\154"+
    "\3\25\1\0\1\71\5\25\1\72\34\25\1\0\6\25"+
    "\1\73\24\151\1\0\1\75\5\151\1\76\34\151\1\0"+
    "\6\151\1\152\1\0\23\77\1\0\1\155\5\0\1\76"+
    "\2\0\33\77\1\0\5\77\1\0\1\25\22\156\1\25"+
    "\1\0\1\71\5\25\1\72\2\25\32\156\1\157\1\25"+
    "\5\156\1\73\1\0\22\157\13\0\33\157\1\0\5\157"+
    "\1\0\24\25\1\0\1\71\5\25\1\72\22\25\1\160"+
    "\11\25\1\0\6\25\1\73\24\25\1\0\1\71\5\25"+
    "\1\72\16\25\1\161\15\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\31\25\1\162\2\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\12\25"+
    "\1\163\21\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\15\25\1\164\16\25\1\0\6\25\1\73"+
    "\24\25\1\0\1\71\5\25\1\72\2\25\1\165\31\25"+
    "\1\0\6\25\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\15\25\1\166\16\25\1\0\6\25\1\73\24\25\1\0"+
    "\1\71\5\25\1\72\2\25\1\167\31\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\10\25\1\170"+
    "\23\25\1\0\6\25\1\73\24\151\1\0\1\114\5\151"+
    "\1\115\34\151\1\0\6\151\1\152\24\25\1\0\1\114"+
    "\5\25\1\115\34\25\1\0\1\25\5\171\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\34\25\1\0\1\25\5\172"+
    "\1\73\25\0\1\120\6\0\1\173\43\0\24\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\174\27\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\2\44\1\175"+
    "\30\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\176\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\177\22\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\11\44\1\200\21\44\1\0"+
    "\33\44\1\0\1\201\5\44\1\0\1\202\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\26\44\1\203"+
    "\4\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\11\44\1\204\21\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\14\44\1\205\16\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\23\44\1\206\7\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\14\44\1\207"+
    "\16\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\210\1\211\21\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\17\44\1\212\1\44\1\213\11\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\21\44"+
    "\1\214\11\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\23\44\1\215\7\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\25\44\1\216\5\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\15\44\1\217\15\44"+
    "\1\0\7\44\13\0\1\220\26\0\1\220\37\0\1\221"+
    "\45\0\1\221\50\0\1\222\15\0\1\222\56\0\1\223"+
    "\32\0\1\223\37\0\1\224\43\0\1\224\40\0\1\225"+
    "\32\0\1\225\26\0\24\151\1\0\6\151\1\100\34\151"+
    "\1\0\7\151\24\226\1\0\1\227\5\226\1\72\34\226"+
    "\1\0\33\226\1\0\1\153\5\226\1\72\34\226\1\0"+
    "\6\226\1\230\14\25\1\231\7\25\1\0\1\71\5\25"+
    "\1\72\34\25\1\0\6\25\1\73\25\0\1\155\5\0"+
    "\1\76\44\0\1\25\22\232\1\25\1\0\1\71\5\25"+
    "\1\72\2\25\32\232\1\233\1\25\5\232\1\73\1\0"+
    "\22\233\13\0\33\233\1\0\5\233\1\0\24\25\1\0"+
    "\1\71\5\25\1\72\4\25\1\234\27\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\20\25\1\235"+
    "\13\25\1\0\6\25\1\73\24\25\1\0\1\71\5\25"+
    "\1\72\3\25\1\236\30\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\3\25\1\237\30\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\15\25"+
    "\1\240\16\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\3\25\1\241\30\25\1\0\6\25\1\73"+
    "\24\25\1\0\1\71\5\25\1\72\4\25\1\242\27\25"+
    "\1\0\6\25\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\12\25\1\243\21\25\1\0\6\25\1\73\24\25\1\0"+
    "\1\71\5\25\1\72\12\25\1\244\21\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\114\5\25\1\115\34\25\1\0"+
    "\1\25\5\245\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\34\25\1\0\1\25\5\246\1\73\24\44\1\0\1\120"+
    "\5\44\1\0\1\121\4\44\1\247\26\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\15\44\1\250\15\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\30\44"+
    "\1\251\2\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\17\44\1\252\13\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\10\44\1\253\22\44\1\0\7\44"+
    "\25\0\1\201\6\0\1\254\43\0\24\44\1\0\1\120"+
    "\5\44\1\0\1\121\11\44\1\255\21\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\2\44\1\256\30\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\14\44"+
    "\1\257\16\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\24\44\1\260\6\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\3\44\1\261\27\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\1\44\1\262\31\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\2\44"+
    "\1\263\30\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\10\44\1\264\22\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\14\44\1\265\16\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\10\44\1\266\22\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\24\44"+
    "\1\267\6\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\5\44\1\270\25\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\7\44\1\271\23\44\1\0\7\44"+
    "\12\0\1\272\23\0\1\272\62\0\1\273\15\0\1\273"+
    "\44\0\1\274\33\0\1\274\43\0\1\275\33\0\1\275"+
    "\43\0\1\276\33\0\1\276\37\0\24\226\1\0\1\277"+
    "\5\226\1\100\34\226\1\0\6\226\1\230\24\226\1\0"+
    "\1\227\5\226\1\100\34\226\1\0\33\226\1\0\1\300"+
    "\5\226\1\72\34\226\1\0\6\226\1\230\17\25\1\301"+
    "\4\25\1\0\1\71\5\25\1\72\34\25\1\0\1\302"+
    "\5\25\1\73\1\25\22\303\1\25\1\0\1\71\5\25"+
    "\1\72\2\25\32\303\1\304\1\25\5\303\1\73\1\0"+
    "\22\304\13\0\33\304\1\0\5\304\1\0\24\25\1\0"+
    "\1\71\5\25\1\72\6\25\1\305\25\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\4\25\1\306"+
    "\27\25\1\0\6\25\1\73\24\25\1\0\1\71\5\25"+
    "\1\72\11\25\1\307\22\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\26\25\1\310\5\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\16\25"+
    "\1\311\15\25\1\0\6\25\1\73\24\25\1\0\1\312"+
    "\5\25\1\313\34\25\1\0\6\25\1\73\24\25\1\0"+
    "\1\71\5\25\1\72\24\25\1\314\7\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\15\25\1\315"+
    "\16\25\1\0\6\25\1\73\24\25\1\0\1\71\5\25"+
    "\1\72\11\25\1\316\22\25\1\0\6\25\1\73\23\25"+
    "\1\317\1\0\1\114\5\25\1\115\34\25\1\0\1\25"+
    "\5\320\1\73\23\25\1\317\1\0\1\71\5\25\1\72"+
    "\34\25\1\0\6\25\1\73\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\321\7\44\1\322\15\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\14\44\1\323"+
    "\16\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\2\44\1\324\30\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\325\27\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\326\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\327"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\25\44\1\330\5\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\331\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\332\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\17\44\1\333"+
    "\13\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\334\27\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\14\44\1\335\16\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\336\31\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\3\44\1\337"+
    "\27\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\22\44\1\340\10\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\341\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\14\44\1\342\16\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\3\44\1\343"+
    "\27\44\1\0\7\44\4\0\1\344\33\0\1\344\57\0"+
    "\1\345\25\0\1\345\51\0\1\346\25\0\1\346\51\0"+
    "\1\347\25\0\1\347\31\0\24\151\1\0\1\277\5\151"+
    "\1\100\34\151\1\0\6\151\1\152\24\226\1\0\1\300"+
    "\5\226\1\100\34\226\1\0\6\226\1\230\24\25\1\0"+
    "\1\71\5\25\1\72\34\25\1\0\1\302\5\25\1\73"+
    "\24\25\1\0\1\71\1\350\4\25\1\72\34\25\1\0"+
    "\6\25\1\73\1\25\22\351\1\25\1\0\1\71\5\25"+
    "\1\72\2\25\32\351\1\352\1\25\5\351\1\73\1\0"+
    "\22\352\13\0\33\352\1\0\5\352\1\0\24\25\1\0"+
    "\1\353\5\25\1\354\34\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\2\25\1\355\31\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\4\25"+
    "\1\356\27\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\6\25\1\357\25\25\1\0\6\25\1\73"+
    "\24\25\1\0\1\71\5\25\1\72\23\25\1\360\10\25"+
    "\1\0\6\25\1\73\24\151\1\0\1\312\5\151\1\313"+
    "\34\151\1\0\6\151\1\152\24\25\1\0\1\71\5\25"+
    "\1\72\25\25\1\361\6\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\16\25\1\362\15\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\71\5\25\1\72\23\25"+
    "\1\363\10\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\34\25\1\0\2\25\1\364\1\365\2\25"+
    "\1\73\24\25\1\0\1\114\5\25\1\115\34\25\1\0"+
    "\1\25\5\320\1\73\24\44\1\0\1\120\5\44\1\0"+
    "\1\121\6\44\1\366\24\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\6\44\1\367\24\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\10\44\1\370\22\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\3\44"+
    "\1\371\27\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\1\44\1\372\31\44\1\0\33\44\1\0\1\373"+
    "\5\44\1\0\1\374\33\44\1\0\33\44\1\0\1\375"+
    "\5\44\1\0\1\376\33\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\5\44\1\377\25\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\14\44\1\u0100\16\44"+
    "\1\0\33\44\1\0\1\u0101\5\44\1\0\1\u0102\33\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\15\44"+
    "\1\u0103\15\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\15\44\1\u0104\15\44\1\0\33\44\1\0\1\120"+
    "\5\44\1\0\1\121\15\44\1\u0105\15\44\1\0\33\44"+
    "\1\0\1\120\5\44\1\0\1\121\15\44\1\u0106\15\44"+
    "\1\0\33\44\1\0\1\u0107\5\44\1\0\1\u0108\33\44"+
    "\1\0\33\44\1\0\1\120\5\44\1\0\1\121\10\44"+
    "\1\u0109\22\44\1\0\33\44\1\0\1\120\5\44\1\0"+
    "\1\121\6\44\1\u010a\24\44\1\0\33\44\1\0\1\u010b"+
    "\5\44\1\0\1\u010c\33\44\1\0\33\44\1\0\1\u010d"+
    "\5\44\1\0\1\u010e\33\44\1\0\7\44\17\0\1\u010f"+
    "\24\0\1\u010f\46\0\1\u0110\26\0\1\u0110\36\0\1\u0111"+
    "\50\0\1\u0111\43\0\1\u0112\32\0\1\u0112\26\0\24\25"+
    "\1\0\1\71\1\u0113\4\25\1\72\34\25\1\0\6\25"+
    "\1\73\1\25\22\u0114\1\25\1\0\1\71\5\25\1\72"+
    "\2\25\32\u0114\1\u0115\1\25\5\u0114\1\73\1\0\22\u0115"+
    "\13\0\33\u0115\1\0\5\u0115\1\0\24\151\1\0\1\353"+
    "\5\151\1\354\34\151\1\0\6\151\1\152\24\25\1\0"+
    "\1\u0116\5\25\1\u0117\34\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\15\25\1\u0118\16\25\1\0"+
    "\6\25\1\73\24\25\1\0\1\u0119\5\25\1\u011a\34\25"+
    "\1\0\6\25\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\6\25\1\u011b\25\25\1\0\6\25\1\73\24\25\1\0"+
    "\1\71\5\25\1\72\16\25\1\u011c\15\25\1\0\6\25"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\15\25\1\u011c"+
    "\16\25\1\0\6\25\1\73\24\25\1\0\1\71\5\25"+
    "\1\72\11\25\1\u011d\22\25\1\0\6\25\1\73\24\25"+
    "\1\0\1\71\5\25\1\72\34\25\1\0\1\25\1\u011e"+
    "\1\25\3\u011e\1\73\24\25\1\0\1\71\5\25\1\72"+
    "\34\25\1\0\2\25\3\u011e\1\25\1\73\24\44\1\0"+
    "\1\120\5\44\1\0\1\121\7\44\1\u011f\23\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\16\44\1\u0120"+
    "\14\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u0121\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\11\44\1\u0122\21\44\1\0\33\44\1\0"+
    "\1\u0123\5\44\1\0\1\u0124\33\44\1\0\7\44\25\0"+
    "\1\373\6\0\1\u0125\70\0\1\375\6\0\1\u0126\43\0"+
    "\24\44\1\0\1\u0127\5\44\1\0\1\u0128\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\6\44\1\u0129"+
    "\24\44\1\0\7\44\25\0\1\u0101\6\0\1\u012a\43\0"+
    "\24\44\1\0\1\120\5\44\1\0\1\121\14\44\1\u012b"+
    "\16\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u012c\7\44\1\0\33\44\1\0\1\u012d\5\44"+
    "\1\0\1\u012e\33\44\1\0\33\44\1\0\1\u012f\5\44"+
    "\1\0\1\u0130\33\44\1\0\7\44\25\0\1\u0107\6\0"+
    "\1\u0131\43\0\24\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u0132\7\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\20\44\1\u0133\2\44\1\u0134\7\44\1\0"+
    "\7\44\25\0\1\u010b\6\0\1\u0135\70\0\1\u010d\6\0"+
    "\1\u0136\62\0\1\u0137\24\0\1\u0137\52\0\1\u0138\24\0"+
    "\1\u0138\46\0\1\u0139\26\0\1\u0139\35\0\24\u013a\1\0"+
    "\1\71\2\25\3\u013a\1\72\34\u013a\1\0\6\u013a\1\u013b"+
    "\24\25\1\0\1\u013c\5\25\1\u013d\34\25\1\0\6\25"+
    "\1\73\25\0\1\u0115\5\0\1\u013d\44\0\24\151\1\0"+
    "\1\u0116\5\151\1\u0117\34\151\1\0\6\151\1\152\24\25"+
    "\1\0\1\71\5\25\1\72\22\25\1\361\11\25\1\0"+
    "\6\25\1\73\24\151\1\0\1\u0119\5\151\1\u011a\34\151"+
    "\1\0\6\151\1\152\24\25\1\0\1\u013e\5\25\1\u013f"+
    "\34\25\1\0\6\25\1\73\24\25\1\0\1\u0140\5\25"+
    "\1\u0141\34\25\1\0\6\25\1\73\24\25\1\0\1\71"+
    "\5\25\1\72\24\25\1\315\7\25\1\0\6\25\1\73"+
    "\23\25\1\u0142\1\0\1\71\5\25\1\72\34\25\1\0"+
    "\6\25\1\73\24\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u0143\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u0144\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\6\44\1\u0145\24\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u0146"+
    "\15\44\1\0\7\44\25\0\1\u0123\6\0\1\u0147\70\0"+
    "\1\u0127\6\0\1\u0148\43\0\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\7\44\1\u0149\6\44\1\u014a\4\44\1\u014b"+
    "\7\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\6\44\1\u014c\24\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u014d\22\44\1\0\7\44\25\0"+
    "\1\u012d\6\0\1\u014e\70\0\1\u012f\6\0\1\u014f\43\0"+
    "\24\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u0150"+
    "\15\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u0151\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\14\44\1\u0152\16\44\1\0\7\44\17\0"+
    "\1\u0153\24\0\1\u0153\33\0\24\u013a\1\0\1\u0154\1\u0155"+
    "\1\25\3\u013a\1\u0156\34\u013a\1\0\6\u013a\1\u013b\24\u013a"+
    "\1\0\1\u0157\1\u0155\1\25\3\u013a\1\u0156\34\u013a\1\0"+
    "\6\u013a\1\u013b\24\151\1\0\1\u013c\5\151\1\u013d\34\151"+
    "\1\0\6\151\1\152\24\151\1\0\1\u013e\5\151\1\u013f"+
    "\34\151\1\0\6\151\1\152\24\151\1\0\1\u0140\5\151"+
    "\1\u0141\34\151\1\0\6\151\1\152\24\25\1\0\1\71"+
    "\5\25\1\72\34\25\1\0\2\25\3\u0158\1\u0159\1\73"+
    "\24\44\1\0\1\120\5\44\1\0\1\121\11\44\1\u015a"+
    "\21\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\17\44\1\u015b\13\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\20\44\1\u015c\2\44\1\u015d\7\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\7\44\1\u015e"+
    "\23\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u015f\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u0160\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\u0161\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\23\44\1\u0162"+
    "\7\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u0163\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\14\44\1\u0164\16\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\21\44\1\u0165\11\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\3\44\1\u0166"+
    "\27\44\1\0\7\44\24\151\1\0\1\u0154\5\151\1\u0156"+
    "\34\151\1\0\6\151\1\152\24\u013a\1\0\1\u0154\2\25"+
    "\3\u013a\1\u0156\34\u013a\1\0\6\u013a\1\u013b\24\226\1\0"+
    "\1\u0157\5\226\1\u0156\34\226\1\0\6\226\1\230\24\25"+
    "\1\0\1\71\5\25\1\72\34\25\1\0\1\25\5\u0167"+
    "\1\73\24\25\1\0\1\71\5\25\1\72\34\25\1\0"+
    "\2\25\2\u0167\2\25\1\73\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u0168\22\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\10\44\1\u0169\22\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u016a"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\14\44\1\u016b\16\44\1\0\33\44\1\0\1\u016c\5\44"+
    "\1\0\1\u016d\33\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\11\44\1\u016e\21\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\17\44\1\u016f\13\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\20\44\1\u0170"+
    "\12\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u0171\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\1\44\1\u0172\31\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\6\44\1\u0173\24\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\10\44\1\u0174"+
    "\22\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\u0175\15\44\1\0\7\44\24\25\1\0\1\u0176"+
    "\5\25\1\u0177\34\25\1\0\6\25\1\73\24\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\u0178\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\1\44\1\u0179"+
    "\31\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\21\44\1\u017a\11\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\u017b\27\44\1\0\7\44\25\0"+
    "\1\u016c\6\0\1\u017c\43\0\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u017d\22\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\10\44\1\u017e\22\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\16\44\1\u017f"+
    "\14\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\20\44\1\u0180\12\44\1\0\33\44\1\0\1\u0181\5\44"+
    "\1\0\1\u0182\33\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\16\44\1\u0183\4\44\1\u0184\7\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\22\44\1\u0185"+
    "\10\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u0186\7\44\1\0\7\44\24\151\1\0\1\u0176"+
    "\5\151\1\u0177\34\151\1\0\6\151\1\152\24\44\1\0"+
    "\1\120\5\44\1\0\1\121\6\44\1\u0187\24\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u0188"+
    "\15\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u0189\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u018a\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\u018b\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\1\44\1\u018c"+
    "\31\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u018d\25\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\16\44\1\u018e\14\44\1\0\7\44\25\0"+
    "\1\u0181\6\0\1\u018f\43\0\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u0190\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\u0191\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\10\44\1\u0192"+
    "\22\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u0193\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\12\44\1\u0194\20\44\1\0\33\44\1\0"+
    "\1\u0195\5\44\1\0\1\u0196\33\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\22\44\1\u0197\10\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\23\44\1\u0198"+
    "\7\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\6\44\1\u0199\24\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u019a\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\u019b\31\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u019c"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\17\44\1\u019d\13\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\20\44\1\u019e\12\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\23\44\1\u019f\7\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u01a0"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\u01a1\27\44\1\0\7\44\25\0\1\u0195\6\0"+
    "\1\u01a2\43\0\24\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u01a3\22\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u01a4\22\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\12\44\1\u01a5\20\44\1\0"+
    "\33\44\1\0\1\u01a6\5\44\1\0\1\u01a7\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\3\44\1\u01a8"+
    "\27\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\u01a9\31\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u01aa\22\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\16\44\1\u01ab\14\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u01ac"+
    "\15\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\u01ad\31\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\13\44\1\u01ae\17\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\23\44\1\u01af\7\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u01b0"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\u01b1\27\44\1\0\7\44\25\0\1\u01a6\6\0"+
    "\1\u01b2\43\0\24\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\u01b3\31\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\u01b4\27\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\u01b5\31\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u01b6"+
    "\25\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u01b7\7\44\1\0\33\44\1\0\1\u01b8\5\44"+
    "\1\0\1\u01b9\33\44\1\0\33\44\1\0\1\u01ba\5\44"+
    "\1\0\1\u01bb\33\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u01bc\15\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\u01bd\31\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\13\44\1\u01be"+
    "\17\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\11\44\1\u01bf\21\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\1\44\1\u01c0\31\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\15\44\1\u01c1\15\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\1\44\1\u01c2"+
    "\31\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u01c3\22\44\1\0\7\44\25\0\1\u01b8\6\0"+
    "\1\u01c4\70\0\1\u01ba\6\0\1\u01c5\43\0\24\44\1\0"+
    "\1\120\5\44\1\0\1\121\23\44\1\u01c6\7\44\1\0"+
    "\33\44\1\0\1\u01c7\5\44\1\0\1\u01c8\33\44\1\0"+
    "\33\44\1\0\1\u01c9\5\44\1\0\1\u01ca\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\3\44\1\u01cb"+
    "\27\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\11\44\1\u01cc\21\44\1\0\33\44\1\0\1\u01cd\5\44"+
    "\1\0\1\u01ce\33\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\u01cf\27\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\u01d0\25\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\10\44\1\u01d1"+
    "\22\44\1\0\7\44\25\0\1\u01c7\6\0\1\u01d2\70\0"+
    "\1\u01c9\6\0\1\u01d3\43\0\24\44\1\0\1\u01d4\5\44"+
    "\1\0\1\u01d5\33\44\1\0\33\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\u01d6\27\44\1\0\7\44\25\0"+
    "\1\u01cd\6\0\1\u01d7\43\0\24\44\1\0\1\120\5\44"+
    "\1\0\1\121\1\44\1\u01d8\31\44\1\0\33\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\u01d9\31\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u01da"+
    "\25\44\1\0\7\44\25\0\1\u01d4\6\0\1\u01db\43\0"+
    "\24\44\1\0\1\u01dc\5\44\1\0\1\u01dd\33\44\1\0"+
    "\33\44\1\0\1\120\5\44\1\0\1\121\11\44\1\u01de"+
    "\21\44\1\0\33\44\1\0\1\u01df\5\44\1\0\1\u01e0"+
    "\33\44\1\0\33\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\u01e1\31\44\1\0\7\44\25\0\1\u01dc\6\0"+
    "\1\u01e2\43\0\24\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\u01e3\27\44\1\0\7\44\25\0\1\u01df\6\0"+
    "\1\u01e4\43\0\24\44\1\0\1\u01e5\5\44\1\0\1\u01e6"+
    "\33\44\1\0\33\44\1\0\1\u01e7\5\44\1\0\1\u01e8"+
    "\33\44\1\0\7\44\25\0\1\u01e5\6\0\1\u01e9\70\0"+
    "\1\u01e7\6\0\1\u01ea\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\5\11\2\1\53\0\1\11\3\0"+
    "\1\11\1\0\1\11\14\0\1\11\3\0\1\1\51\0"+
    "\1\11\6\0\1\1\22\0\1\11\26\0\1\11\15\0"+
    "\1\1\2\0\1\11\15\0\1\11\40\0\1\11\17\0"+
    "\1\1\1\0\1\1\3\0\1\1\5\0\1\1\3\0"+
    "\1\1\1\0\1\1\1\11\2\1\5\0\1\11\2\0"+
    "\1\11\11\0\1\1\2\11\1\0\1\1\1\0\1\11"+
    "\3\0\1\1\1\0\1\1\1\11\3\0\4\11\1\1"+
    "\3\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\5\0\2\11\3\0\1\11\2\0\1\11\26\0\1\1"+
    "\11\0\1\11\4\0\1\11\5\0\1\1\14\0\1\11"+
    "\6\0\1\1\13\0\1\11\4\0\1\1\12\0\1\11"+
    "\6\0\1\1\1\0\1\1\10\0\2\11\2\0\1\1"+
    "\1\0\1\1\3\0\1\1\3\0\2\11\1\0\1\1"+
    "\1\0\1\11\3\0\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\0\1\11\1\0\1\1\1\0\1\1"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[490];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
	public int linea;
	public int columna;
	public char c;
	JTextArea textArea;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}

	private void error(String error, int linea, int columna) {
		String mensaje = "Se detecto un Error Lexico en la  Linea:" + linea + "  Columna: " + columna+"  El error:"+error;
		System.out.println(mensaje);
		this.textArea.append("\n" + mensaje);
	}

	public Lexer (java.io.Reader entrada, JTextArea textArea) {
		this.zzReader = entrada;
		this.textArea = textArea;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2536) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext(),yyline+1,yycolumn+1); return symbol(error, yytext());
            } 
            // fall through
          case 56: break;
          case 2: 
            { /* los ignoramos */
            } 
            // fall through
          case 57: break;
          case 3: 
            { System.out.printf(" FIN %s\n", yytext()); return symbol(DIAGONAL, yytext());
            } 
            // fall through
          case 58: break;
          case 4: 
            { System.out.printf(" ABRE: %s\n", yytext()); return symbol(ABRE, yytext());
            } 
            // fall through
          case 59: break;
          case 5: 
            { System.out.printf(" CIERRA: %s\n", yytext()); return symbol(CIERRA, yytext());
            } 
            // fall through
          case 60: break;
          case 6: 
            { System.out.printf(" IGUAL: %s\n", yytext()); return symbol(IGUAL, yytext());
            } 
            // fall through
          case 61: break;
          case 7: 
            { System.out.printf(" PARAMETRO ETIQUETAS: %s\n", yytext()); return symbol(PARAMETRO_ATRIBUTO_ETIQUETAS, yytext());
            } 
            // fall through
          case 62: break;
          case 8: 
            { System.out.printf(" PARAMETRO ID: %s\n", yytext()); return symbol(PARAMETRO_ID, yytext());
            } 
            // fall through
          case 63: break;
          case 9: 
            { System.out.printf(" PARAMETRO TEXTO: %s\n", yytext()); return symbol(PARAMETRO_TODO_TEXTO, yytext());
            } 
            // fall through
          case 64: break;
          case 10: 
            { System.out.printf(" PARAMETRO ALTURA: %s\n", yytext()); return symbol(PARAMETRO_ENTERO, yytext());
            } 
            // fall through
          case 65: break;
          case 11: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(NOMBRE_ETIQUETA, yytext());
            } 
            // fall through
          case 66: break;
          case 12: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(ID, yytext());
            } 
            // fall through
          case 67: break;
          case 13: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(VALOR, yytext());
            } 
            // fall through
          case 68: break;
          case 14: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ACCION, yytext());
            } 
            // fall through
          case 69: break;
          case 15: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(NOMBRE, yytext());
            } 
            // fall through
          case 70: break;
          case 16: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_MENU, yytext());
            } 
            // fall through
          case 71: break;
          case 17: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_VIDEO, yytext());
            } 
            // fall through
          case 72: break;
          case 18: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(SITIO, yytext());
            } 
            // fall through
          case 73: break;
          case 19: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(TEXTO, yytext());
            } 
            // fall through
          case 74: break;
          case 20: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ANCHO, yytext());
            } 
            // fall through
          case 75: break;
          case 21: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PADRE, yytext());
            } 
            // fall through
          case 76: break;
          case 22: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(COLOR, yytext());
            } 
            // fall through
          case 77: break;
          case 23: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(CLASE, yytext());
            } 
            // fall through
          case 78: break;
          case 24: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ACCIONES, yytext());
            } 
            // fall through
          case 79: break;
          case 25: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ATRIBUTO, yytext());
            } 
            // fall through
          case 80: break;
          case 26: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ETIQUETA, yytext());
            } 
            // fall through
          case 81: break;
          case 27: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_IMAGEN, yytext());
            } 
            // fall through
          case 82: break;
          case 28: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PARAMETRO_TITULO, yytext());
            } 
            // fall through
          case 83: break;
          case 29: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ORIGEN, yytext());
            } 
            // fall through
          case 84: break;
          case 30: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(TITULO, yytext());
            } 
            // fall through
          case 85: break;
          case 31: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ALTURA, yytext());
            } 
            // fall through
          case 86: break;
          case 32: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PAGINA, yytext());
            } 
            // fall through
          case 87: break;
          case 33: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ATRIBUTOS, yytext());
            } 
            // fall through
          case 88: break;
          case 34: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ETIQUETAS, yytext());
            } 
            // fall through
          case 89: break;
          case 35: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(PARAMETRO, yytext());
            } 
            // fall through
          case 90: break;
          case 36: 
            { System.out.printf(" PARAMETRO COLOR: %s\n", yytext()); return symbol(PARAMETRO_COLOR, yytext());
            } 
            // fall through
          case 91: break;
          case 37: 
            { System.out.printf(" COMPONENTE: %s\n", yytext()); return symbol(PARAMETRO_PARRAFO, yytext());
            } 
            // fall through
          case 92: break;
          case 38: 
            { System.out.printf(" PARAMETRO ALINACION: %s\n", yytext()); return symbol(PARAMETRO_ALINEACION, yytext());
            } 
            // fall through
          case 93: break;
          case 39: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(PARAMETROS, yytext());
            } 
            // fall through
          case 94: break;
          case 40: 
            { System.out.printf(" PARAMETRO URL: %s\n", yytext()); return symbol(PARAMETRO_URL, yytext());
            } 
            // fall through
          case 95: break;
          case 41: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ATRIBUTO_ETIQUETAS, yytext());
            } 
            // fall through
          case 96: break;
          case 42: 
            { System.out.printf(" PARAMETRO FECHA: %s\n", yytext()); return symbol(PARAMETRO_FECHA, yytext());
            } 
            // fall through
          case 97: break;
          case 43: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext()); return symbol(ALINEACION, yytext());
            } 
            // fall through
          case 98: break;
          case 44: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(NUEVA_PAGINA, yytext());
            } 
            // fall through
          case 99: break;
          case 45: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_PAGINA, yytext());
            } 
            // fall through
          case 100: break;
          case 46: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(FECHA_CREACION, yytext());
            } 
            // fall through
          case 101: break;
          case 47: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(NUEVO_SITIO_WEB, yytext());
            } 
            // fall through
          case 102: break;
          case 48: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(USUARIO_CREACION, yytext());
            } 
            // fall through
          case 103: break;
          case 49: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_SITIO_WEB, yytext());
            } 
            // fall through
          case 104: break;
          case 50: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(MODIFICAR_PAGINA, yytext());
            } 
            // fall through
          case 105: break;
          case 51: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(BORRAR_COMPONENTE, yytext());
            } 
            // fall through
          case 106: break;
          case 52: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(AGREGAR_COMPONENTE, yytext());
            } 
            // fall through
          case 107: break;
          case 53: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(FECHA_MODIFICACION, yytext());
            } 
            // fall through
          case 108: break;
          case 54: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(USUARIO_MODIFICACION, yytext());
            } 
            // fall through
          case 109: break;
          case 55: 
            { System.out.printf(" ACCION: %s\n", yytext()); return symbol(MODIFICAR_COMPONENTE, yytext());
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
