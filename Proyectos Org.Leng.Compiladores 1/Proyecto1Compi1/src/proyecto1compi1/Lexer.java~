/* The following code was generated by JFlex 1.7.0 */

package proyecto1compi1;

import static proyecto1compi1.sym.error;
import java_cup.runtime.*;
import javax.swing.JTextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\65\1\67\2\23\1\0\2\22\16\65\4\0\1\23\1\0\1\32"+
    "\1\33\1\66\10\0\1\21\1\0\1\24\1\73\1\74\1\75\1\76"+
    "\6\72\1\71\1\0\1\25\1\27\1\26\2\0\1\50\1\46\1\56"+
    "\1\54\1\36\1\55\1\52\1\57\1\43\1\64\1\65\1\60\1\53"+
    "\1\34\1\40\1\51\1\63\1\47\1\42\1\44\1\35\1\37\1\45"+
    "\1\61\1\65\1\62\1\30\1\0\1\31\1\0\1\41\1\0\1\1"+
    "\1\2\1\3\1\65\1\4\2\65\1\70\1\5\2\65\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\4\65"+
    "\1\0\1\77\2\0\41\65\2\0\4\65\4\0\1\65\2\0\1\65"+
    "\7\0\1\65\4\0\1\65\5\0\27\65\1\0\37\65\1\0\u01ca\65"+
    "\4\0\14\65\16\0\5\65\7\0\1\65\1\0\1\65\21\0\165\65"+
    "\1\0\2\65\2\0\4\65\10\0\1\65\1\0\3\65\1\0\1\65"+
    "\1\0\24\65\1\0\123\65\1\0\213\65\1\0\5\65\2\0\236\65"+
    "\11\0\46\65\2\0\1\65\7\0\47\65\7\0\1\65\1\0\55\65"+
    "\1\0\1\65\1\0\2\65\1\0\2\65\1\0\1\65\10\0\33\65"+
    "\5\0\3\65\15\0\5\65\6\0\1\65\4\0\13\65\5\0\112\65"+
    "\4\0\146\65\1\0\11\65\1\0\12\65\1\0\23\65\2\0\1\65"+
    "\17\0\74\65\2\0\145\65\16\0\66\65\4\0\1\65\5\0\56\65"+
    "\22\0\34\65\104\0\1\65\1\0\13\65\67\0\33\65\1\0\144\65"+
    "\2\0\12\65\1\0\7\65\1\0\7\65\1\0\3\65\1\0\10\65"+
    "\2\0\2\65\2\0\26\65\1\0\7\65\1\0\1\65\3\0\4\65"+
    "\2\0\11\65\2\0\2\65\2\0\4\65\10\0\1\65\4\0\2\65"+
    "\1\0\5\65\2\0\16\65\7\0\1\65\5\0\3\65\1\0\6\65"+
    "\4\0\2\65\2\0\26\65\1\0\7\65\1\0\2\65\1\0\2\65"+
    "\1\0\2\65\2\0\1\65\1\0\5\65\4\0\2\65\2\0\3\65"+
    "\3\0\1\65\7\0\4\65\1\0\1\65\7\0\20\65\13\0\3\65"+
    "\1\0\11\65\1\0\3\65\1\0\26\65\1\0\7\65\1\0\2\65"+
    "\1\0\5\65\2\0\12\65\1\0\3\65\1\0\3\65\2\0\1\65"+
    "\17\0\4\65\2\0\12\65\1\0\1\65\17\0\3\65\1\0\10\65"+
    "\2\0\2\65\2\0\26\65\1\0\7\65\1\0\2\65\1\0\5\65"+
    "\2\0\11\65\2\0\2\65\2\0\3\65\10\0\2\65\4\0\2\65"+
    "\1\0\5\65\2\0\12\65\1\0\1\65\20\0\2\65\1\0\6\65"+
    "\3\0\3\65\1\0\4\65\3\0\2\65\1\0\1\65\1\0\2\65"+
    "\3\0\2\65\3\0\3\65\3\0\14\65\4\0\5\65\3\0\3\65"+
    "\1\0\4\65\2\0\1\65\6\0\1\65\16\0\12\65\11\0\1\65"+
    "\7\0\3\65\1\0\10\65\1\0\3\65\1\0\27\65\1\0\12\65"+
    "\1\0\5\65\3\0\10\65\1\0\3\65\1\0\4\65\7\0\2\65"+
    "\1\0\2\65\6\0\4\65\2\0\12\65\22\0\2\65\1\0\10\65"+
    "\1\0\3\65\1\0\27\65\1\0\12\65\1\0\5\65\2\0\11\65"+
    "\1\0\3\65\1\0\4\65\7\0\2\65\7\0\1\65\1\0\4\65"+
    "\2\0\12\65\1\0\2\65\17\0\2\65\1\0\10\65\1\0\3\65"+
    "\1\0\51\65\2\0\10\65\1\0\3\65\1\0\5\65\10\0\1\65"+
    "\10\0\4\65\2\0\12\65\12\0\6\65\2\0\2\65\1\0\22\65"+
    "\3\0\30\65\1\0\11\65\1\0\1\65\2\0\7\65\3\0\1\65"+
    "\4\0\6\65\1\0\1\65\1\0\10\65\22\0\2\65\15\0\72\65"+
    "\4\0\20\65\1\0\12\65\47\0\2\65\1\0\1\65\2\0\2\65"+
    "\1\0\1\65\2\0\1\65\6\0\4\65\1\0\7\65\1\0\3\65"+
    "\1\0\1\65\1\0\1\65\2\0\2\65\1\0\15\65\1\0\3\65"+
    "\2\0\5\65\1\0\1\65\1\0\6\65\2\0\12\65\2\0\4\65"+
    "\40\0\1\65\27\0\2\65\6\0\12\65\13\0\1\65\1\0\1\65"+
    "\1\0\1\65\4\0\12\65\1\0\44\65\4\0\24\65\1\0\22\65"+
    "\1\0\44\65\11\0\1\65\71\0\112\65\6\0\116\65\2\0\46\65"+
    "\1\0\1\65\5\0\1\65\2\0\53\65\1\0\u014d\65\1\0\4\65"+
    "\2\0\7\65\1\0\1\65\1\0\4\65\2\0\51\65\1\0\4\65"+
    "\2\0\41\65\1\0\4\65\2\0\7\65\1\0\1\65\1\0\4\65"+
    "\2\0\17\65\1\0\71\65\1\0\4\65\2\0\103\65\2\0\3\65"+
    "\40\0\20\65\20\0\125\65\14\0\u026c\65\2\0\21\65\1\0\32\65"+
    "\5\0\113\65\3\0\3\65\17\0\15\65\1\0\7\65\13\0\25\65"+
    "\13\0\24\65\14\0\15\65\1\0\3\65\1\0\2\65\14\0\124\65"+
    "\3\0\1\65\3\0\3\65\2\0\12\65\41\0\3\65\2\0\12\65"+
    "\6\0\130\65\10\0\53\65\5\0\106\65\12\0\35\65\3\0\14\65"+
    "\4\0\14\65\12\0\50\65\2\0\5\65\13\0\54\65\4\0\32\65"+
    "\6\0\12\65\46\0\34\65\4\0\77\65\1\0\35\65\2\0\13\65"+
    "\6\0\12\65\15\0\1\65\130\0\114\65\4\0\12\65\21\0\11\65"+
    "\14\0\164\65\14\0\70\65\10\0\12\65\3\0\61\65\122\0\3\65"+
    "\1\0\43\65\11\0\347\65\25\0\u011a\65\2\0\6\65\2\0\46\65"+
    "\2\0\6\65\2\0\10\65\1\0\1\65\1\0\1\65\1\0\1\65"+
    "\1\0\37\65\2\0\65\65\1\0\7\65\1\0\1\65\3\0\3\65"+
    "\1\0\7\65\3\0\4\65\2\0\6\65\4\0\15\65\5\0\3\65"+
    "\1\0\7\65\16\0\5\65\32\0\5\65\20\0\2\65\23\0\1\65"+
    "\13\0\5\65\5\0\6\65\1\0\1\65\15\0\1\65\20\0\15\65"+
    "\3\0\33\65\25\0\15\65\4\0\1\65\3\0\14\65\21\0\1\65"+
    "\4\0\1\65\2\0\12\65\1\0\1\65\3\0\5\65\6\0\1\65"+
    "\1\0\1\65\1\0\1\65\1\0\4\65\1\0\13\65\2\0\4\65"+
    "\5\0\5\65\4\0\1\65\21\0\51\65\u0a77\0\57\65\1\0\57\65"+
    "\1\0\205\65\6\0\11\65\14\0\46\65\1\0\1\65\5\0\1\65"+
    "\2\0\70\65\7\0\1\65\17\0\30\65\11\0\7\65\1\0\7\65"+
    "\1\0\7\65\1\0\7\65\1\0\7\65\1\0\7\65\1\0\7\65"+
    "\1\0\7\65\1\0\40\65\57\0\1\65\u01d5\0\3\65\31\0\17\65"+
    "\1\0\5\65\2\0\5\65\4\0\126\65\2\0\2\65\2\0\3\65"+
    "\1\0\132\65\1\0\4\65\5\0\51\65\3\0\136\65\21\0\33\65"+
    "\65\0\20\65\u0200\0\u19b6\65\112\0\u51cd\65\63\0\u048d\65\103\0\56\65"+
    "\2\0\u010d\65\3\0\34\65\24\0\60\65\4\0\12\65\1\0\31\65"+
    "\7\0\123\65\45\0\11\65\2\0\147\65\2\0\4\65\1\0\4\65"+
    "\14\0\13\65\115\0\60\65\20\0\1\65\7\0\64\65\14\0\105\65"+
    "\13\0\12\65\6\0\30\65\3\0\1\65\4\0\56\65\2\0\44\65"+
    "\14\0\35\65\3\0\101\65\16\0\13\65\46\0\67\65\11\0\16\65"+
    "\2\0\12\65\6\0\27\65\3\0\2\65\4\0\103\65\30\0\3\65"+
    "\2\0\20\65\2\0\5\65\12\0\6\65\2\0\6\65\2\0\6\65"+
    "\11\0\7\65\1\0\7\65\221\0\53\65\1\0\2\65\2\0\12\65"+
    "\6\0\u2ba4\65\14\0\27\65\4\0\61\65\u2104\0\u016e\65\2\0\152\65"+
    "\46\0\7\65\14\0\5\65\5\0\14\65\1\0\15\65\1\0\5\65"+
    "\1\0\1\65\1\0\2\65\1\0\2\65\1\0\154\65\41\0\u016b\65"+
    "\22\0\100\65\2\0\66\65\50\0\15\65\3\0\20\65\20\0\7\65"+
    "\14\0\2\65\30\0\3\65\31\0\1\65\6\0\5\65\1\0\207\65"+
    "\2\0\1\65\4\0\1\65\13\0\12\65\7\0\32\65\4\0\1\65"+
    "\1\0\32\65\13\0\131\65\3\0\6\65\2\0\6\65\2\0\6\65"+
    "\2\0\3\65\3\0\2\65\3\0\2\65\22\0\3\65\4\0\14\65"+
    "\1\0\32\65\1\0\23\65\1\0\2\65\1\0\17\65\2\0\16\65"+
    "\42\0\173\65\105\0\65\65\210\0\1\65\202\0\35\65\3\0\61\65"+
    "\57\0\37\65\21\0\33\65\65\0\36\65\2\0\44\65\4\0\10\65"+
    "\1\0\5\65\52\0\236\65\2\0\12\65\u0356\0\6\65\2\0\1\65"+
    "\1\0\54\65\1\0\2\65\3\0\1\65\2\0\27\65\252\0\26\65"+
    "\12\0\32\65\106\0\70\65\6\0\2\65\100\0\4\65\1\0\2\65"+
    "\5\0\10\65\1\0\3\65\1\0\33\65\4\0\3\65\4\0\1\65"+
    "\40\0\35\65\203\0\66\65\12\0\26\65\12\0\23\65\215\0\111\65"+
    "\u03b7\0\107\65\37\0\12\65\20\0\73\65\2\0\1\65\22\0\31\65"+
    "\7\0\12\65\6\0\65\65\1\0\12\65\100\0\105\65\13\0\12\65"+
    "\u04a6\0\70\65\10\0\12\65\u0936\0\u036f\65\221\0\143\65\u0b9d\0\u042f\65"+
    "\u33d1\0\u0239\65\u04c7\0\105\65\13\0\57\65\20\0\21\65\u4060\0\2\65"+
    "\u2163\0\5\65\3\0\26\65\2\0\7\65\36\0\4\65\224\0\3\65"+
    "\u01bb\0\125\65\1\0\107\65\1\0\2\65\2\0\1\65\2\0\2\65"+
    "\2\0\4\65\1\0\14\65\1\0\1\65\1\0\7\65\1\0\101\65"+
    "\1\0\4\65\2\0\10\65\1\0\7\65\1\0\34\65\1\0\4\65"+
    "\1\0\5\65\1\0\1\65\3\0\7\65\1\0\u0154\65\2\0\31\65"+
    "\1\0\31\65\1\0\37\65\1\0\31\65\1\0\37\65\1\0\31\65"+
    "\1\0\37\65\1\0\31\65\1\0\37\65\1\0\31\65\1\0\10\65"+
    "\2\0\62\65\u1600\0\4\65\1\0\33\65\1\0\2\65\1\0\1\65"+
    "\2\0\1\65\1\0\12\65\1\0\4\65\1\0\1\65\1\0\1\65"+
    "\6\0\1\65\4\0\1\65\1\0\1\65\1\0\1\65\1\0\3\65"+
    "\1\0\2\65\1\0\1\65\2\0\1\65\1\0\1\65\1\0\1\65"+
    "\1\0\1\65\1\0\1\65\1\0\2\65\1\0\1\65\2\0\4\65"+
    "\1\0\7\65\1\0\4\65\1\0\4\65\1\0\1\65\1\0\12\65"+
    "\1\0\21\65\5\0\3\65\1\0\5\65\1\0\21\65\u1144\0\ua6d7\65"+
    "\51\0\u1035\65\13\0\336\65\u3fe2\0\u021e\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\65\36\0\140\65\200\0\360\65\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\6\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\53\0\1\7\2\0\1\10\1\0\1\11\15\0\1\12"+
    "\3\0\1\13\51\0\1\13\6\0\1\14\22\0\1\14"+
    "\41\0\1\13\14\0\1\15\47\0\1\16\5\0\1\13"+
    "\13\0\1\16\7\0\1\17\1\0\1\20\16\0\1\21"+
    "\21\0\1\22\14\0\1\23\3\0\1\23\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\100"+
    "\0\100\0\100\0\100\0\100\0\u01c0\0\u0200\0\u0240\0\u0280"+
    "\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u0200\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\100\0\u0cc0\0\u0d00\0\100\0\u0d40\0\100\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\100\0\u10c0\0\u1100\0\u1140"+
    "\0\u0780\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\100\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u0780\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\100\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\100\0\u2d40\0\u2d80\0\u2dc0\0\u2e00"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000"+
    "\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600"+
    "\0\u3640\0\u3680\0\u36c0\0\u0780\0\u3700\0\u3740\0\u3780\0\u37c0"+
    "\0\u3800\0\u3240\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\100\0\u3b00\0\u3b40"+
    "\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\100\0\u3cc0\0\100"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\100\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480"+
    "\0\100\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640"+
    "\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u0780\0\u47c0\0\u4800"+
    "\0\u4840\0\100\0\u4880\0\u48c0\0\u4900";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\3\2\1\5\1\2\1\6"+
    "\5\2\1\7\1\2\2\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\2\1\16\1\2\1\5\1\2\1\4\1\7"+
    "\10\2\1\3\1\6\15\2\1\10\10\2\103\0\1\17"+
    "\12\0\1\20\25\0\1\20\11\0\1\17\37\0\1\21"+
    "\25\0\1\21\44\0\1\22\26\0\1\22\40\0\1\23"+
    "\46\0\1\23\30\0\1\24\46\0\1\24\27\0\21\25"+
    "\1\26\1\0\1\27\5\25\1\0\1\25\1\30\3\25"+
    "\1\31\1\25\1\26\1\25\1\32\1\33\4\25\1\34"+
    "\1\25\1\35\1\36\1\25\1\37\5\25\1\40\1\25"+
    "\1\26\1\0\1\41\1\25\1\42\1\43\3\42\1\25"+
    "\22\44\1\0\1\45\5\44\1\0\2\44\1\46\1\47"+
    "\1\50\1\44\1\51\1\44\1\52\1\53\1\54\1\44"+
    "\1\55\1\44\1\56\1\57\1\44\1\60\1\44\1\61"+
    "\1\62\10\44\1\0\10\44\3\0\1\63\52\0\1\63"+
    "\35\0\1\64\32\0\1\64\35\0\1\65\35\0\1\65"+
    "\43\0\1\66\43\0\1\66\40\0\1\67\32\0\1\67"+
    "\36\0\1\70\51\0\1\70\17\0\22\25\1\0\1\71"+
    "\5\25\1\72\35\25\1\0\7\25\1\73\1\25\21\26"+
    "\1\0\1\74\5\25\1\75\2\25\33\26\1\76\1\26"+
    "\1\25\5\26\1\73\21\25\1\26\1\0\1\27\5\25"+
    "\1\77\1\25\1\30\3\25\1\31\1\25\1\26\1\25"+
    "\1\32\1\33\4\25\1\34\1\25\1\35\1\36\1\25"+
    "\1\37\5\25\1\40\1\25\1\26\1\0\1\41\1\25"+
    "\1\42\1\43\3\42\2\25\20\100\1\25\1\0\1\71"+
    "\5\25\1\72\2\25\33\100\1\101\1\100\1\25\5\100"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\11\25\1\102"+
    "\23\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\21\25\1\103\6\25\1\104\4\25\1\0\7\25"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\11\25\1\105"+
    "\23\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\16\25\1\106\16\25\1\0\7\25\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\4\25\1\107\30\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\5\25\1\72\4\25"+
    "\1\110\30\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\4\25\1\111\30\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\3\25\1\112\31\25"+
    "\1\0\7\25\1\73\16\25\1\113\3\25\1\0\1\71"+
    "\5\25\1\72\35\25\1\0\7\25\1\73\22\25\1\0"+
    "\1\114\5\25\1\115\35\25\1\0\2\25\5\116\1\73"+
    "\22\25\1\0\1\114\5\25\1\115\35\25\1\0\2\25"+
    "\5\117\1\73\22\44\1\0\1\120\5\44\1\0\1\121"+
    "\34\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\2\44\1\122\31\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\7\44\1\123\24\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\11\44\1\124\22\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\14\44\1\125"+
    "\17\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\126\23\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\21\44\1\127\12\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\130\4\44\1\131"+
    "\23\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\132\26\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\1\44\1\133\15\44\1\134\5\44\1\135"+
    "\6\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\136\16\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\137\26\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\140\30\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\5\44\1\141"+
    "\17\44\1\142\6\44\1\0\10\44\5\0\1\143\35\0"+
    "\1\143\41\0\1\144\35\0\1\144\47\0\1\145\47\0"+
    "\1\145\16\0\1\146\43\0\1\146\32\0\1\147\46\0"+
    "\1\147\40\0\1\150\26\0\1\150\37\0\22\151\1\0"+
    "\1\71\5\151\1\72\35\151\1\0\7\151\1\152\22\25"+
    "\1\0\1\153\5\25\1\72\35\25\1\0\7\25\1\73"+
    "\22\151\1\0\1\74\5\151\1\75\35\151\1\0\7\151"+
    "\1\152\1\0\21\76\1\0\1\154\5\0\1\75\2\0"+
    "\35\76\1\0\5\76\1\0\1\25\20\155\1\25\1\0"+
    "\1\71\5\25\1\72\2\25\33\155\1\156\1\155\1\25"+
    "\5\155\1\73\1\0\20\156\13\0\35\156\1\0\5\156"+
    "\1\0\22\25\1\0\1\71\5\25\1\72\22\25\1\157"+
    "\12\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\16\25\1\160\16\25\1\0\7\25\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\31\25\1\161\3\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\5\25\1\72\12\25"+
    "\1\162\22\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\15\25\1\163\17\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\2\25\1\164\32\25"+
    "\1\0\7\25\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\15\25\1\165\17\25\1\0\7\25\1\73\22\25\1\0"+
    "\1\71\5\25\1\72\2\25\1\166\32\25\1\0\7\25"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\10\25\1\167"+
    "\24\25\1\0\7\25\1\73\16\25\1\170\3\25\1\0"+
    "\1\71\5\25\1\72\35\25\1\0\7\25\1\73\22\151"+
    "\1\0\1\114\5\151\1\115\35\151\1\0\7\151\1\152"+
    "\22\25\1\0\1\114\5\25\1\115\35\25\1\0\2\25"+
    "\5\171\1\73\22\25\1\0\1\71\5\25\1\72\35\25"+
    "\1\0\2\25\5\172\1\73\23\0\1\120\6\0\1\173"+
    "\45\0\22\44\1\0\1\120\5\44\1\0\1\121\3\44"+
    "\1\174\30\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\2\44\1\175\31\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\10\44\1\176\23\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\10\44\1\177\23\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\11\44"+
    "\1\200\22\44\1\0\32\44\1\0\1\201\5\44\1\0"+
    "\1\202\34\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\26\44\1\203\5\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\11\44\1\204\22\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\14\44\1\205\17\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\23\44"+
    "\1\206\10\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\14\44\1\207\17\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\10\44\1\210\1\211\22\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\17\44\1\212"+
    "\1\44\1\213\12\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\21\44\1\214\12\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\23\44\1\215\10\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\25\44\1\216"+
    "\6\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\217\16\44\1\0\10\44\11\0\1\220\26\0"+
    "\1\220\41\0\1\221\43\0\1\221\50\0\1\222\15\0"+
    "\1\222\56\0\1\223\32\0\1\223\37\0\1\224\43\0"+
    "\1\224\40\0\1\225\32\0\1\225\30\0\22\151\1\0"+
    "\6\151\1\77\35\151\1\0\10\151\22\226\1\0\1\227"+
    "\5\226\1\72\35\226\1\0\32\226\1\0\1\153\5\226"+
    "\1\72\35\226\1\0\7\226\1\230\23\0\1\154\5\0"+
    "\1\75\46\0\1\25\20\231\1\25\1\0\1\71\5\25"+
    "\1\72\2\25\33\231\1\232\1\231\1\25\5\231\1\73"+
    "\1\0\20\232\13\0\35\232\1\0\5\232\1\0\22\25"+
    "\1\0\1\71\5\25\1\72\4\25\1\233\30\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\5\25\1\72\20\25"+
    "\1\234\14\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\3\25\1\235\31\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\3\25\1\236\31\25"+
    "\1\0\7\25\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\15\25\1\237\17\25\1\0\7\25\1\73\22\25\1\0"+
    "\1\71\5\25\1\72\3\25\1\240\31\25\1\0\7\25"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\4\25\1\241"+
    "\30\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\12\25\1\242\22\25\1\0\7\25\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\12\25\1\243\22\25\1\0"+
    "\7\25\1\73\12\25\1\244\7\25\1\0\1\71\5\25"+
    "\1\72\35\25\1\0\7\25\1\73\22\25\1\0\1\114"+
    "\5\25\1\115\35\25\1\0\2\25\5\245\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\35\25\1\0\2\25\5\246"+
    "\1\73\22\44\1\0\1\120\5\44\1\0\1\121\4\44"+
    "\1\247\27\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\15\44\1\250\16\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\30\44\1\251\3\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\17\44\1\252\14\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\10\44"+
    "\1\253\23\44\1\0\10\44\23\0\1\201\6\0\1\225"+
    "\45\0\22\44\1\0\1\120\5\44\1\0\1\121\11\44"+
    "\1\254\22\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\2\44\1\255\31\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\14\44\1\256\17\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\24\44\1\254\7\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\3\44"+
    "\1\257\30\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\1\44\1\260\32\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\2\44\1\261\31\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\10\44\1\262\23\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\14\44"+
    "\1\263\17\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\10\44\1\264\23\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\24\44\1\265\7\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\5\44\1\266\26\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\7\44"+
    "\1\263\24\44\1\0\10\44\10\0\1\267\23\0\1\267"+
    "\62\0\1\270\15\0\1\270\46\0\1\271\31\0\1\271"+
    "\45\0\1\225\31\0\1\225\45\0\1\272\31\0\1\272"+
    "\41\0\22\226\1\0\1\273\5\226\1\77\35\226\1\0"+
    "\7\226\1\230\22\226\1\0\1\227\5\226\1\77\35\226"+
    "\1\0\32\226\1\0\1\274\5\226\1\72\35\226\1\0"+
    "\7\226\1\230\1\25\20\275\1\25\1\0\1\71\5\25"+
    "\1\72\2\25\33\275\1\276\1\275\1\25\5\275\1\73"+
    "\1\0\20\276\13\0\35\276\1\0\5\276\1\0\22\25"+
    "\1\0\1\71\5\25\1\72\6\25\1\240\26\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\5\25\1\72\4\25"+
    "\1\277\30\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\11\25\1\300\23\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\26\25\1\301\6\25"+
    "\1\0\7\25\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\16\25\1\302\16\25\1\0\7\25\1\73\22\25\1\0"+
    "\1\303\5\25\1\304\35\25\1\0\7\25\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\24\25\1\305\10\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\5\25\1\72\15\25"+
    "\1\306\17\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\11\25\1\307\23\25\1\0\7\25\1\73"+
    "\15\25\1\310\4\25\1\0\1\71\5\25\1\72\35\25"+
    "\1\0\1\25\1\311\5\25\1\73\21\25\1\312\1\0"+
    "\1\114\5\25\1\115\35\25\1\0\2\25\5\313\1\73"+
    "\21\25\1\312\1\0\1\71\5\25\1\72\35\25\1\0"+
    "\7\25\1\73\22\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\314\7\44\1\315\16\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\14\44\1\316\17\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\2\44\1\317"+
    "\31\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\320\30\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\127\26\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\5\44\1\321\26\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\25\44\1\253"+
    "\6\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\322\16\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\17\44\1\323\14\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\324\30\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\14\44\1\325"+
    "\17\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\1\44\1\326\32\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\127\30\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\22\44\1\327\11\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\15\44\1\330"+
    "\16\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\14\44\1\321\17\44\1\0\10\44\4\0\1\331\31\0"+
    "\1\331\57\0\1\332\25\0\1\332\51\0\1\333\25\0"+
    "\1\333\51\0\1\334\25\0\1\334\33\0\22\151\1\0"+
    "\1\273\5\151\1\77\35\151\1\0\7\151\1\152\22\226"+
    "\1\0\1\274\5\226\1\77\35\226\1\0\7\226\1\230"+
    "\1\25\20\335\1\25\1\0\1\71\5\25\1\72\2\25"+
    "\33\335\1\336\1\335\1\25\5\335\1\73\1\0\20\336"+
    "\13\0\35\336\1\0\5\336\1\0\22\25\1\0\1\71"+
    "\5\25\1\72\2\25\1\240\32\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\4\25\1\337\30\25"+
    "\1\0\7\25\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\6\25\1\340\26\25\1\0\7\25\1\73\22\25\1\0"+
    "\1\71\5\25\1\72\23\25\1\233\11\25\1\0\7\25"+
    "\1\73\22\151\1\0\1\303\5\151\1\304\35\151\1\0"+
    "\7\151\1\152\22\25\1\0\1\71\5\25\1\72\25\25"+
    "\1\341\7\25\1\0\7\25\1\73\22\25\1\0\1\71"+
    "\5\25\1\72\16\25\1\342\16\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\23\25\1\343\11\25"+
    "\1\0\7\25\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\35\25\1\0\1\25\1\311\5\25\1\73\22\25\1\0"+
    "\1\71\1\344\4\25\1\72\35\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\35\25\1\0\3\25"+
    "\1\345\1\346\2\25\1\73\22\25\1\0\1\114\5\25"+
    "\1\115\35\25\1\0\2\25\5\313\1\73\22\44\1\0"+
    "\1\120\5\44\1\0\1\121\6\44\1\347\25\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\6\44\1\350"+
    "\25\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\351\23\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\3\44\1\352\30\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\321\32\44\1\0"+
    "\32\44\1\0\1\353\5\44\1\0\1\354\34\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\14\44\1\355"+
    "\17\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\356\16\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\357\16\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\15\44\1\321\16\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\15\44\1\127"+
    "\16\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\360\23\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\6\44\1\361\25\44\1\0\10\44\15\0"+
    "\1\173\24\0\1\173\46\0\1\362\26\0\1\362\40\0"+
    "\1\362\46\0\1\362\43\0\1\332\32\0\1\332\30\0"+
    "\1\25\20\363\1\25\1\0\1\71\5\25\1\72\2\25"+
    "\33\363\1\364\1\363\1\25\5\363\1\73\1\0\20\364"+
    "\13\0\35\364\1\0\5\364\1\0\22\25\1\0\1\71"+
    "\5\25\1\72\15\25\1\365\17\25\1\0\7\25\1\73"+
    "\22\25\1\0\1\366\5\25\1\225\35\25\1\0\7\25"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\16\25\1\367"+
    "\16\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\15\25\1\367\17\25\1\0\7\25\1\73\22\25"+
    "\1\0\1\71\5\25\1\72\11\25\1\370\23\25\1\0"+
    "\7\25\1\73\22\25\1\0\1\71\1\371\4\25\1\72"+
    "\35\25\1\0\7\25\1\73\22\25\1\0\1\71\5\25"+
    "\1\72\35\25\1\0\2\25\1\372\1\25\3\372\1\73"+
    "\22\25\1\0\1\71\5\25\1\72\35\25\1\0\3\25"+
    "\3\372\1\25\1\73\22\44\1\0\1\120\5\44\1\0"+
    "\1\121\7\44\1\373\24\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\16\44\1\374\15\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\5\44\1\330\26\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\11\44"+
    "\1\375\22\44\1\0\10\44\23\0\1\353\6\0\1\376"+
    "\45\0\22\44\1\0\1\120\5\44\1\0\1\121\6\44"+
    "\1\377\25\44\1\0\32\44\1\0\1\120\5\44\1\0"+
    "\1\121\14\44\1\u0100\17\44\1\0\32\44\1\0\1\120"+
    "\5\44\1\0\1\121\23\44\1\u0101\10\44\1\0\32\44"+
    "\1\0\1\120\5\44\1\0\1\121\23\44\1\u0102\10\44"+
    "\1\0\32\44\1\0\1\120\5\44\1\0\1\121\20\44"+
    "\1\u0103\2\44\1\u0104\10\44\1\0\10\44\22\25\1\0"+
    "\1\u0105\5\25\1\u0106\35\25\1\0\7\25\1\73\23\0"+
    "\1\364\5\0\1\u0106\46\0\22\25\1\0\1\71\5\25"+
    "\1\72\22\25\1\341\12\25\1\0\7\25\1\73\22\151"+
    "\1\0\1\366\5\151\1\225\35\151\1\0\7\151\1\152"+
    "\22\25\1\0\1\u0107\5\25\1\u0108\35\25\1\0\7\25"+
    "\1\73\22\25\1\0\1\71\5\25\1\72\24\25\1\306"+
    "\10\25\1\0\7\25\1\73\22\u0109\1\0\1\71\2\25"+
    "\3\u0109\1\72\35\u0109\1\0\7\u0109\1\u010a\21\25\1\u010b"+
    "\1\0\1\71\5\25\1\72\35\25\1\0\7\25\1\73"+
    "\22\44\1\0\1\120\5\44\1\0\1\121\10\44\1\u010c"+
    "\23\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\15\44\1\u010d\16\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\15\44\1\u010e\16\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\7\44\1\373\6\44\1\374"+
    "\4\44\1\u010f\10\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\6\44\1\u0110\25\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\10\44\1\u0111\23\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u0112"+
    "\16\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\5\44\1\u0113\26\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\14\44\1\u0114\17\44\1\0\10\44\22\151"+
    "\1\0\1\u0105\5\151\1\u0106\35\151\1\0\7\151\1\152"+
    "\22\151\1\0\1\u0107\5\151\1\u0108\35\151\1\0\7\151"+
    "\1\152\22\u0109\1\0\1\u0115\1\u0116\1\25\3\u0109\1\u0117"+
    "\35\u0109\1\0\7\u0109\1\u010a\22\u0109\1\0\1\u0118\1\u0116"+
    "\1\25\3\u0109\1\u0117\35\u0109\1\0\7\u0109\1\u010a\22\25"+
    "\1\0\1\71\5\25\1\72\35\25\1\0\3\25\3\u0119"+
    "\1\u011a\1\73\22\44\1\0\1\120\5\44\1\0\1\121"+
    "\11\44\1\u011b\22\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\17\44\1\u011c\14\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\7\44\1\321\24\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u011d"+
    "\26\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u010f\10\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\320\26\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\14\44\1\u011e\17\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\21\44\1\u011f"+
    "\12\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\3\44\1\u0120\30\44\1\0\10\44\22\151\1\0\1\u0115"+
    "\5\151\1\u0117\35\151\1\0\7\151\1\152\22\u0109\1\0"+
    "\1\u0115\2\25\3\u0109\1\u0117\35\u0109\1\0\7\u0109\1\u010a"+
    "\22\226\1\0\1\u0118\5\226\1\u0117\35\226\1\0\7\226"+
    "\1\230\22\25\1\0\1\71\5\25\1\72\35\25\1\0"+
    "\2\25\5\u0121\1\73\22\25\1\0\1\71\5\25\1\72"+
    "\35\25\1\0\3\25\2\u0121\2\25\1\73\22\44\1\0"+
    "\1\120\5\44\1\0\1\121\10\44\1\u0122\23\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\10\44\1\u0123"+
    "\23\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\20\44\1\u0124\13\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\6\44\1\u0125\25\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\10\44\1\u0126\23\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\15\44\1\u0127"+
    "\16\44\1\0\10\44\22\25\1\0\1\u0128\5\25\1\u0129"+
    "\35\25\1\0\7\25\1\73\22\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\u012a\26\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\1\44\1\u012b\32\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\16\44\1\u012c"+
    "\15\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\16\44\1\374\4\44\1\u010f\10\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\22\44\1\u012d\11\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\23\44\1\u012e"+
    "\10\44\1\0\10\44\22\151\1\0\1\u0128\5\151\1\u0129"+
    "\35\151\1\0\7\151\1\152\22\44\1\0\1\120\5\44"+
    "\1\0\1\121\6\44\1\u012f\25\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\15\44\1\u0130\16\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\5\44\1\u0131"+
    "\26\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\10\44\1\u0132\23\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\10\44\1\u0133\23\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\12\44\1\u0134\21\44\1\0"+
    "\32\44\1\0\1\u0135\5\44\1\0\1\u0136\34\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\1\44\1\u0137"+
    "\32\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\23\44\1\u0120\10\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\5\44\1\u0138\26\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\u0139\30\44\1\0"+
    "\10\44\23\0\1\u0135\6\0\1\u013a\45\0\22\44\1\0"+
    "\1\120\5\44\1\0\1\121\3\44\1\u013b\30\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\1\44\1\127"+
    "\32\44\1\0\32\44\1\0\1\120\5\44\1\0\1\121"+
    "\13\44\1\u0130\20\44\1\0\32\44\1\0\1\120\5\44"+
    "\1\0\1\121\1\44\1\u013c\32\44\1\0\32\44\1\0"+
    "\1\120\5\44\1\0\1\121\11\44\1\u013d\22\44\1\0"+
    "\32\44\1\0\1\120\5\44\1\0\1\121\3\44\1\u0130"+
    "\30\44\1\0\10\44";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18752];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\5\11\2\1\53\0\1\11\2\0"+
    "\1\11\1\0\1\11\15\0\1\11\3\0\1\1\51\0"+
    "\1\11\6\0\1\1\22\0\1\11\41\0\1\1\14\0"+
    "\1\11\47\0\1\1\5\0\1\1\13\0\1\11\7\0"+
    "\1\11\1\0\1\11\16\0\1\11\21\0\1\11\14\0"+
    "\1\1\3\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
	public int linea;
	public int columna;
	public char c;
	JTextArea textArea;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}

	private void error(String error, int linea, int columna) {
		String mensaje = "Se detecto un Error Lexico en la  Linea:" + linea + "  Columna: " + columna+"  El error:"+error;
		System.out.println(mensaje);
		this.textArea.append("\n" + mensaje);
	}

	public Lexer (java.io.Reader entrada, JTextArea textArea) {
		this.zzReader = entrada;
		this.textArea = textArea;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2532) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error(yytext(),yyline+1,yycolumn+1);
            } 
            // fall through
          case 20: break;
          case 2: 
            { /* los ignoramos */
            } 
            // fall through
          case 21: break;
          case 3: 
            { System.out.printf(" FIN %s\n", yytext());
            } 
            // fall through
          case 22: break;
          case 4: 
            { System.out.printf(" ABRE: %s\n", yytext());
            } 
            // fall through
          case 23: break;
          case 5: 
            { System.out.printf(" CIERRA: %s\n", yytext());
            } 
            // fall through
          case 24: break;
          case 6: 
            { System.out.printf(" IGUAL: %s\n", yytext());
            } 
            // fall through
          case 25: break;
          case 7: 
            { System.out.printf(" PARAMETRO ETIQUETAS: %s\n", yytext());
            } 
            // fall through
          case 26: break;
          case 8: 
            { System.out.printf(" PARAMETRO ID: %s\n", yytext());
            } 
            // fall through
          case 27: break;
          case 9: 
            { System.out.printf(" PARAMETRO TEXTO: %s\n", yytext());
            } 
            // fall through
          case 28: break;
          case 10: 
            { System.out.printf(" PARAMETRO ALTURA: %s\n", yytext());
            } 
            // fall through
          case 29: break;
          case 11: 
            { System.out.printf(" ETIQUETA: %s\n", yytext());
            } 
            // fall through
          case 30: break;
          case 12: 
            { System.out.printf(" PARAMETRO: %s\n", yytext());
            } 
            // fall through
          case 31: break;
          case 13: 
            { System.out.printf(" COMPONENTE: %s\n", yytext());
            } 
            // fall through
          case 32: break;
          case 14: 
            { System.out.printf(" ATRIBUTO: %s\n", yytext());
            } 
            // fall through
          case 33: break;
          case 15: 
            { System.out.printf(" PARAMETRO COLOR: %s\n", yytext());
            } 
            // fall through
          case 34: break;
          case 16: 
            { System.out.printf(" PARAMETRO ALINACION: %s\n", yytext());
            } 
            // fall through
          case 35: break;
          case 17: 
            { System.out.printf(" PARAMETRO URL: %s\n", yytext());
            } 
            // fall through
          case 36: break;
          case 18: 
            { System.out.printf(" PARAMETRO FECHA: %s\n", yytext());
            } 
            // fall through
          case 37: break;
          case 19: 
            { System.out.printf(" ACCION: %s\n", yytext());
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
