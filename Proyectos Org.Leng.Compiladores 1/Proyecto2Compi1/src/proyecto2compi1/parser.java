
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 25 02:01:18 CST 2019
//----------------------------------------------------

package proyecto2compi1;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import proyecto2compi1.backend.instrucciones.*;
import javax.swing.JTextArea;
import proyecto2compi1.frontend.JFramePrincipal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 25 02:01:18 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\002\004\000\002\056\003\000\002\057" +
    "\003\000\002\057\004\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\005\000\002\062\010" +
    "\000\002\062\003\000\002\055\003\000\002\055\004\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\134\005\000\002\134\005\000\002\134\003" +
    "\000\002\135\005\000\002\135\005\000\002\135\003\000" +
    "\002\136\003\000\002\136\003\000\002\136\005\000\002" +
    "\063\005\000\002\063\006\000\002\064\005\000\002\064" +
    "\006\000\002\065\007\000\002\070\010\000\002\070\004" +
    "\000\002\071\005\000\002\071\004\000\002\072\007\000" +
    "\002\072\004\000\002\067\007\000\002\067\004\000\002" +
    "\100\003\000\002\100\005\000\002\101\003\000\002\101" +
    "\003\000\002\074\003\000\002\074\003\000\002\073\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\003\000" +
    "\002\076\005\000\002\076\005\000\002\076\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\005\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\004\005\000" +
    "\002\005\006\000\002\006\005\000\002\007\006\000\002" +
    "\010\007\000\002\011\006\000\002\012\005\000\002\012" +
    "\006\000\002\013\006\000\002\014\007\000\002\015\006" +
    "\000\002\016\007\000\002\016\010\000\002\017\006\000" +
    "\002\020\007\000\002\021\006\000\002\022\007\000\002" +
    "\023\006\000\002\024\007\000\002\025\006\000\002\026" +
    "\007\000\002\027\006\000\002\030\007\000\002\031\006" +
    "\000\002\032\007\000\002\033\006\000\002\034\007\000" +
    "\002\035\006\000\002\036\007\000\002\036\010\000\002" +
    "\037\006\000\002\040\007\000\002\040\010\000\002\041" +
    "\006\000\002\042\007\000\002\042\010\000\002\043\006" +
    "\000\002\045\005\000\002\046\007\000\002\047\006\000" +
    "\002\050\005\000\002\050\006\000\002\051\007\000\002" +
    "\052\006\000\002\053\007\000\002\053\010\000\002\054" +
    "\006\000\002\121\003\000\002\121\004\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\123\003\000" +
    "\002\123\004\000\002\124\003\000\002\124\003\000\002" +
    "\124\003\000\002\124\003\000\002\125\003\000\002\126" +
    "\003\000\002\126\004\000\002\127\003\000\002\127\003" +
    "\000\002\130\003\000\002\130\004\000\002\044\006\000" +
    "\002\131\003\000\002\131\004\000\002\132\003\000\002" +
    "\132\003\000\002\132\003\000\002\133\003\000\002\133" +
    "\003\000\002\105\007\000\002\105\007\000\002\106\007" +
    "\000\002\106\007\000\002\107\007\000\002\110\007\000" +
    "\002\111\007\000\002\104\007\000\002\104\007\000\002" +
    "\112\007\000\002\112\007\000\002\113\007\000\002\114" +
    "\007\000\002\114\007\000\002\115\007\000\002\116\007" +
    "\000\002\116\007\000\002\117\007\000\002\120\007\000" +
    "\002\002\003\000\002\002\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c2\000\010\003\032\016\027\136\014\001\002\000" +
    "\004\002\u01c4\001\002\000\012\002\ufffb\003\ufffb\016\ufffb" +
    "\136\ufffb\001\002\000\012\002\uffec\003\uffec\016\uffec\136" +
    "\uffec\001\002\000\012\002\ufff6\003\ufff6\016\ufff6\136\ufff6" +
    "\001\002\000\012\002\uffed\003\uffed\016\uffed\136\uffed\001" +
    "\002\000\012\002\uffeb\003\uffeb\016\uffeb\136\uffeb\001\002" +
    "\000\012\002\ufff1\003\ufff1\016\ufff1\136\ufff1\001\002\000" +
    "\012\002\ufff8\003\ufff8\016\ufff8\136\ufff8\001\002\000\116" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\115\u0167\125\u015e\130\u0162\131\u015d\133\u0168\001\002" +
    "\000\012\002\000\003\032\016\027\136\014\001\002\000" +
    "\012\002\uffe5\003\uffe5\016\uffe5\136\uffe5\001\002\000\012" +
    "\002\uffea\003\uffea\016\uffea\136\uffea\001\002\000\012\002" +
    "\ufff5\003\ufff5\016\ufff5\136\ufff5\001\002\000\012\002\ufff2" +
    "\003\ufff2\016\ufff2\136\ufff2\001\002\000\012\002\ufff7\003" +
    "\ufff7\016\ufff7\136\ufff7\001\002\000\012\002\uffe9\003\uffe9" +
    "\016\uffe9\136\uffe9\001\002\000\012\002\ufffc\003\ufffc\016" +
    "\ufffc\136\ufffc\001\002\000\012\002\ufffa\003\ufffa\016\ufffa" +
    "\136\ufffa\001\002\000\012\002\uffef\003\uffef\016\uffef\136" +
    "\uffef\001\002\000\056\014\067\041\064\042\056\043\057" +
    "\044\065\045\070\046\050\047\060\050\045\051\053\052" +
    "\055\053\052\054\054\055\044\056\066\057\051\060\047" +
    "\062\062\063\043\064\063\065\046\066\061\001\002\000" +
    "\012\002\uffee\003\uffee\016\uffee\136\uffee\001\002\000\012" +
    "\002\uffff\003\uffff\016\uffff\136\uffff\001\002\000\012\002" +
    "\uffe4\003\uffe4\016\uffe4\136\uffe4\001\002\000\012\002\ufffd" +
    "\003\ufffd\016\ufffd\136\ufffd\001\002\000\012\002\ufff9\003" +
    "\ufff9\016\ufff9\136\ufff9\001\002\000\012\002\uffe8\003\uffe8" +
    "\016\uffe8\136\uffe8\001\002\000\012\002\uffe6\003\uffe6\016" +
    "\uffe6\136\uffe6\001\002\000\012\002\uffe7\003\uffe7\016\uffe7" +
    "\136\uffe7\001\002\000\012\002\ufff3\003\ufff3\016\ufff3\136" +
    "\ufff3\001\002\000\012\002\ufff0\003\ufff0\016\ufff0\136\ufff0" +
    "\001\002\000\012\002\ufff4\003\ufff4\016\ufff4\136\ufff4\001" +
    "\002\000\004\017\u0152\001\002\000\004\017\u014b\001\002" +
    "\000\004\017\u0144\001\002\000\004\017\u013d\001\002\000" +
    "\010\017\u0123\076\u0128\077\u0126\001\002\000\006\017\u0117" +
    "\072\154\001\002\000\006\017\u0100\076\u0103\001\002\000" +
    "\004\017\371\001\002\000\004\017\362\001\002\000\004" +
    "\017\353\001\002\000\004\017\344\001\002\000\004\017" +
    "\343\001\002\000\004\017\334\001\002\000\004\017\325" +
    "\001\002\000\010\017\276\101\303\102\302\001\002\000" +
    "\004\017\275\001\002\000\012\017\262\072\154\073\162" +
    "\100\264\001\002\000\004\017\255\001\002\000\012\017" +
    "\222\067\224\070\226\071\225\001\002\000\014\017\156" +
    "\072\154\073\162\074\160\075\151\001\002\000\010\041" +
    "\145\042\144\044\143\001\002\000\004\017\071\001\002" +
    "\000\104\027\104\030\121\031\112\032\110\033\132\034" +
    "\111\035\077\036\134\037\122\040\126\041\130\042\116" +
    "\043\115\044\127\045\133\046\101\047\117\050\075\051" +
    "\107\052\114\053\105\054\106\055\074\056\131\057\103" +
    "\060\100\061\102\064\125\065\076\066\120\102\072\111" +
    "\123\114\124\001\002\000\120\010\uff2d\015\uff2d\016\uff2d" +
    "\020\uff2d\021\uff2d\022\uff2d\027\uff2d\030\uff2d\031\uff2d\032" +
    "\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d" +
    "\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\047" +
    "\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d" +
    "\056\uff2d\057\uff2d\060\uff2d\061\uff2d\064\uff2d\065\uff2d\066" +
    "\uff2d\102\uff2d\111\uff2d\114\uff2d\001\002\000\106\016\135" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\001\002\000\120\010\uff35\015\uff35\016\uff35\020\uff35" +
    "\021\uff35\022\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033" +
    "\uff35\034\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35" +
    "\042\uff35\043\uff35\044\uff35\045\uff35\046\uff35\047\uff35\050" +
    "\uff35\051\uff35\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35" +
    "\057\uff35\060\uff35\061\uff35\064\uff35\065\uff35\066\uff35\102" +
    "\uff35\111\uff35\114\uff35\001\002\000\120\010\uff3a\015\uff3a" +
    "\016\uff3a\020\uff3a\021\uff3a\022\uff3a\027\uff3a\030\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046" +
    "\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a" +
    "\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\064\uff3a\065" +
    "\uff3a\066\uff3a\102\uff3a\111\uff3a\114\uff3a\001\002\000\120" +
    "\010\uff2f\015\uff2f\016\uff2f\020\uff2f\021\uff2f\022\uff2f\027" +
    "\uff2f\030\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f" +
    "\036\uff2f\037\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\044" +
    "\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f" +
    "\053\uff2f\054\uff2f\055\uff2f\056\uff2f\057\uff2f\060\uff2f\061" +
    "\uff2f\064\uff2f\065\uff2f\066\uff2f\102\uff2f\111\uff2f\114\uff2f" +
    "\001\002\000\120\010\uff47\015\uff47\016\uff47\020\uff47\021" +
    "\uff47\022\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47" +
    "\034\uff47\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042" +
    "\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47" +
    "\051\uff47\052\uff47\053\uff47\054\uff47\055\uff47\056\uff47\057" +
    "\uff47\060\uff47\061\uff47\064\uff47\065\uff47\066\uff47\102\uff47" +
    "\111\uff47\114\uff47\001\002\000\120\010\uff32\015\uff32\016" +
    "\uff32\020\uff32\021\uff32\022\uff32\027\uff32\030\uff32\031\uff32" +
    "\032\uff32\033\uff32\034\uff32\035\uff32\036\uff32\037\uff32\040" +
    "\uff32\041\uff32\042\uff32\043\uff32\044\uff32\045\uff32\046\uff32" +
    "\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055" +
    "\uff32\056\uff32\057\uff32\060\uff32\061\uff32\064\uff32\065\uff32" +
    "\066\uff32\102\uff32\111\uff32\114\uff32\001\002\000\120\010" +
    "\uff3c\015\uff3c\016\uff3c\020\uff3c\021\uff3c\022\uff3c\027\uff3c" +
    "\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036" +
    "\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\044\uff3c" +
    "\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053" +
    "\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c" +
    "\064\uff3c\065\uff3c\066\uff3c\102\uff3c\111\uff3c\114\uff3c\001" +
    "\002\000\120\010\uff31\015\uff31\016\uff31\020\uff31\021\uff31" +
    "\022\uff31\027\uff31\030\uff31\031\uff31\032\uff31\033\uff31\034" +
    "\uff31\035\uff31\036\uff31\037\uff31\040\uff31\041\uff31\042\uff31" +
    "\043\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051" +
    "\uff31\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31\057\uff31" +
    "\060\uff31\061\uff31\064\uff31\065\uff31\066\uff31\102\uff31\111" +
    "\uff31\114\uff31\001\002\000\120\010\uff33\015\uff33\016\uff33" +
    "\020\uff33\021\uff33\022\uff33\027\uff33\030\uff33\031\uff33\032" +
    "\uff33\033\uff33\034\uff33\035\uff33\036\uff33\037\uff33\040\uff33" +
    "\041\uff33\042\uff33\043\uff33\044\uff33\045\uff33\046\uff33\047" +
    "\uff33\050\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33" +
    "\056\uff33\057\uff33\060\uff33\061\uff33\064\uff33\065\uff33\066" +
    "\uff33\102\uff33\111\uff33\114\uff33\001\002\000\120\010\uff4d" +
    "\015\uff4d\016\uff4d\020\uff4d\021\uff4d\022\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d" +
    "\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\064" +
    "\uff4d\065\uff4d\066\uff4d\102\uff4d\111\uff4d\114\uff4d\001\002" +
    "\000\120\010\uff37\015\uff37\016\uff37\020\uff37\021\uff37\022" +
    "\uff37\027\uff37\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37" +
    "\035\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043" +
    "\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37" +
    "\052\uff37\053\uff37\054\uff37\055\uff37\056\uff37\057\uff37\060" +
    "\uff37\061\uff37\064\uff37\065\uff37\066\uff37\102\uff37\111\uff37" +
    "\114\uff37\001\002\000\120\010\uff36\015\uff36\016\uff36\020" +
    "\uff36\021\uff36\022\uff36\027\uff36\030\uff36\031\uff36\032\uff36" +
    "\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041" +
    "\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36\047\uff36" +
    "\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36\056" +
    "\uff36\057\uff36\060\uff36\061\uff36\064\uff36\065\uff36\066\uff36" +
    "\102\uff36\111\uff36\114\uff36\001\002\000\120\010\uff39\015" +
    "\uff39\016\uff39\020\uff39\021\uff39\022\uff39\027\uff39\030\uff39" +
    "\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037" +
    "\uff39\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39" +
    "\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054" +
    "\uff39\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39\064\uff39" +
    "\065\uff39\066\uff39\102\uff39\111\uff39\114\uff39\001\002\000" +
    "\120\010\uff4a\015\uff4a\016\uff4a\020\uff4a\021\uff4a\022\uff4a" +
    "\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035" +
    "\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a" +
    "\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052" +
    "\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a" +
    "\061\uff4a\064\uff4a\065\uff4a\066\uff4a\102\uff4a\111\uff4a\114" +
    "\uff4a\001\002\000\120\010\uff48\015\uff48\016\uff48\020\uff48" +
    "\021\uff48\022\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033" +
    "\uff48\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48" +
    "\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050" +
    "\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48\056\uff48" +
    "\057\uff48\060\uff48\061\uff48\064\uff48\065\uff48\066\uff48\102" +
    "\uff48\111\uff48\114\uff48\001\002\000\120\010\uff4b\015\uff4b" +
    "\016\uff4b\020\uff4b\021\uff4b\022\uff4b\027\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b" +
    "\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\064\uff4b\065" +
    "\uff4b\066\uff4b\102\uff4b\111\uff4b\114\uff4b\001\002\000\120" +
    "\010\uff4f\015\uff4f\016\uff4f\020\uff4f\021\uff4f\022\uff4f\027" +
    "\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f" +
    "\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f\044" +
    "\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f" +
    "\053\uff4f\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f\061" +
    "\uff4f\064\uff4f\065\uff4f\066\uff4f\102\uff4f\111\uff4f\114\uff4f" +
    "\001\002\000\120\010\uff38\015\uff38\016\uff38\020\uff38\021" +
    "\uff38\022\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38" +
    "\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042" +
    "\uff38\043\uff38\044\uff38\045\uff38\046\uff38\047\uff38\050\uff38" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\057" +
    "\uff38\060\uff38\061\uff38\064\uff38\065\uff38\066\uff38\102\uff38" +
    "\111\uff38\114\uff38\001\002\000\120\010\uff3f\015\uff3f\016" +
    "\uff3f\020\uff3f\021\uff3f\022\uff3f\027\uff3f\030\uff3f\031\uff3f" +
    "\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040" +
    "\uff3f\041\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f" +
    "\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055" +
    "\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\064\uff3f\065\uff3f" +
    "\066\uff3f\102\uff3f\111\uff3f\114\uff3f\001\002\000\120\010" +
    "\uff40\015\uff40\016\uff40\020\uff40\021\uff40\022\uff40\027\uff40" +
    "\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036" +
    "\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40\044\uff40" +
    "\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053" +
    "\uff40\054\uff40\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\064\uff40\065\uff40\066\uff40\102\uff40\111\uff40\114\uff40\001" +
    "\002\000\120\010\uff3b\015\uff3b\016\uff3b\020\uff3b\021\uff3b" +
    "\022\uff3b\027\uff3b\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034" +
    "\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b" +
    "\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051" +
    "\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b" +
    "\060\uff3b\061\uff3b\064\uff3b\065\uff3b\066\uff3b\102\uff3b\111" +
    "\uff3b\114\uff3b\001\002\000\120\010\uff2e\015\uff2e\016\uff2e" +
    "\020\uff2e\021\uff2e\022\uff2e\027\uff2e\030\uff2e\031\uff2e\032" +
    "\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e" +
    "\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047" +
    "\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e" +
    "\056\uff2e\057\uff2e\060\uff2e\061\uff2e\064\uff2e\065\uff2e\066" +
    "\uff2e\102\uff2e\111\uff2e\114\uff2e\001\002\000\120\010\uff4c" +
    "\015\uff4c\016\uff4c\020\uff4c\021\uff4c\022\uff4c\027\uff4c\030" +
    "\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c" +
    "\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045" +
    "\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c" +
    "\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\064" +
    "\uff4c\065\uff4c\066\uff4c\102\uff4c\111\uff4c\114\uff4c\001\002" +
    "\000\120\010\uff45\015\uff45\016\uff45\020\uff45\021\uff45\022" +
    "\uff45\027\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45" +
    "\035\uff45\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043" +
    "\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45" +
    "\052\uff45\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060" +
    "\uff45\061\uff45\064\uff45\065\uff45\066\uff45\102\uff45\111\uff45" +
    "\114\uff45\001\002\000\120\010\uff43\015\uff43\016\uff43\020" +
    "\uff43\021\uff43\022\uff43\027\uff43\030\uff43\031\uff43\032\uff43" +
    "\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041" +
    "\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43\056" +
    "\uff43\057\uff43\060\uff43\061\uff43\064\uff43\065\uff43\066\uff43" +
    "\102\uff43\111\uff43\114\uff43\001\002\000\120\010\uff42\015" +
    "\uff42\016\uff42\020\uff42\021\uff42\022\uff42\027\uff42\030\uff42" +
    "\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\037" +
    "\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045\uff42" +
    "\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054" +
    "\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061\uff42\064\uff42" +
    "\065\uff42\066\uff42\102\uff42\111\uff42\114\uff42\001\002\000" +
    "\120\010\uff30\015\uff30\016\uff30\020\uff30\021\uff30\022\uff30" +
    "\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30\035" +
    "\uff30\036\uff30\037\uff30\040\uff30\041\uff30\042\uff30\043\uff30" +
    "\044\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052" +
    "\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30" +
    "\061\uff30\064\uff30\065\uff30\066\uff30\102\uff30\111\uff30\114" +
    "\uff30\001\002\000\120\010\uff44\015\uff44\016\uff44\020\uff44" +
    "\021\uff44\022\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033" +
    "\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44" +
    "\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050" +
    "\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44\056\uff44" +
    "\057\uff44\060\uff44\061\uff44\064\uff44\065\uff44\066\uff44\102" +
    "\uff44\111\uff44\114\uff44\001\002\000\120\010\uff3e\015\uff3e" +
    "\016\uff3e\020\uff3e\021\uff3e\022\uff3e\027\uff3e\030\uff3e\031" +
    "\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e" +
    "\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\064\uff3e\065" +
    "\uff3e\066\uff3e\102\uff3e\111\uff3e\114\uff3e\001\002\000\120" +
    "\010\uff41\015\uff41\016\uff41\020\uff41\021\uff41\022\uff41\027" +
    "\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41" +
    "\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044" +
    "\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41" +
    "\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060\uff41\061" +
    "\uff41\064\uff41\065\uff41\066\uff41\102\uff41\111\uff41\114\uff41" +
    "\001\002\000\120\010\uff34\015\uff34\016\uff34\020\uff34\021" +
    "\uff34\022\uff34\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34" +
    "\034\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042" +
    "\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34" +
    "\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057" +
    "\uff34\060\uff34\061\uff34\064\uff34\065\uff34\066\uff34\102\uff34" +
    "\111\uff34\114\uff34\001\002\000\120\010\uff49\015\uff49\016" +
    "\uff49\020\uff49\021\uff49\022\uff49\027\uff49\030\uff49\031\uff49" +
    "\032\uff49\033\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040" +
    "\uff49\041\uff49\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49" +
    "\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054\uff49\055" +
    "\uff49\056\uff49\057\uff49\060\uff49\061\uff49\064\uff49\065\uff49" +
    "\066\uff49\102\uff49\111\uff49\114\uff49\001\002\000\120\010" +
    "\uff3d\015\uff3d\016\uff3d\020\uff3d\021\uff3d\022\uff3d\027\uff3d" +
    "\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036" +
    "\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d" +
    "\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053" +
    "\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d" +
    "\064\uff3d\065\uff3d\066\uff3d\102\uff3d\111\uff3d\114\uff3d\001" +
    "\002\000\120\010\uff46\015\uff46\016\uff46\020\uff46\021\uff46" +
    "\022\uff46\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034" +
    "\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46" +
    "\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051" +
    "\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057\uff46" +
    "\060\uff46\061\uff46\064\uff46\065\uff46\066\uff46\102\uff46\111" +
    "\uff46\114\uff46\001\002\000\004\014\140\001\002\000\120" +
    "\010\uff4e\015\uff4e\016\uff4e\020\uff4e\021\uff4e\022\uff4e\027" +
    "\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e" +
    "\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044" +
    "\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e" +
    "\053\uff4e\054\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061" +
    "\uff4e\064\uff4e\065\uff4e\066\uff4e\102\uff4e\111\uff4e\114\uff4e" +
    "\001\002\000\012\002\uffa2\003\uffa2\016\uffa2\136\uffa2\001" +
    "\002\000\004\045\141\001\002\000\004\017\142\001\002" +
    "\000\012\002\uffa1\003\uffa1\016\uffa1\136\uffa1\001\002\000" +
    "\004\017\150\001\002\000\004\017\147\001\002\000\004" +
    "\017\146\001\002\000\012\002\uffaa\003\uffaa\016\uffaa\136" +
    "\uffaa\001\002\000\012\002\uffa8\003\uffa8\016\uffa8\136\uffa8" +
    "\001\002\000\012\002\uffa3\003\uffa3\016\uffa3\136\uffa3\001" +
    "\002\000\004\004\212\001\002\000\014\017\uff77\072\uff77" +
    "\073\uff77\074\uff77\075\uff77\001\002\000\014\017\uff75\072" +
    "\uff75\073\uff75\074\uff75\075\uff75\001\002\000\004\004\206" +
    "\001\002\000\014\017\uff72\072\uff72\073\uff72\074\uff72\075" +
    "\uff72\001\002\000\104\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\014\017\175\072" +
    "\154\073\162\074\160\075\151\001\002\000\004\004\170" +
    "\001\002\000\014\017\uff74\072\uff74\073\uff74\074\uff74\075" +
    "\uff74\001\002\000\004\004\164\001\002\000\014\017\uff73" +
    "\072\uff73\073\uff73\074\uff73\075\uff73\001\002\000\004\020" +
    "\165\001\002\000\004\113\166\001\002\000\004\020\167" +
    "\001\002\000\016\017\uff5d\072\uff5d\073\uff5d\074\uff5d\075" +
    "\uff5d\100\uff5d\001\002\000\004\020\171\001\002\000\004" +
    "\105\172\001\002\000\004\020\173\001\002\000\014\017" +
    "\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\001\002\000\014" +
    "\017\uff76\072\uff76\073\uff76\074\uff76\075\uff76\001\002\000" +
    "\104\027\104\030\121\031\112\032\110\033\132\034\111" +
    "\035\077\036\134\037\122\040\126\041\130\042\116\043" +
    "\115\044\127\045\133\046\101\047\117\050\075\051\107" +
    "\052\114\053\105\054\106\055\074\056\131\057\103\060" +
    "\100\061\102\064\125\065\076\066\120\102\072\111\123" +
    "\114\124\001\002\000\106\016\200\027\104\030\121\031" +
    "\112\032\110\033\132\034\111\035\077\036\134\037\122" +
    "\040\126\041\130\042\116\043\115\044\127\045\133\046" +
    "\101\047\117\050\075\051\107\052\114\053\105\054\106" +
    "\055\074\056\131\057\103\060\100\061\102\064\125\065" +
    "\076\066\120\102\072\111\123\114\124\001\002\000\012" +
    "\002\uff8e\003\uff8e\016\uff8e\136\uff8e\001\002\000\004\014" +
    "\201\001\002\000\004\056\202\001\002\000\004\017\203" +
    "\001\002\000\012\002\uff8d\003\uff8d\016\uff8d\136\uff8d\001" +
    "\002\000\106\016\200\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\012\002\uff8f\003" +
    "\uff8f\016\uff8f\136\uff8f\001\002\000\004\020\207\001\002" +
    "\000\004\104\210\001\002\000\004\020\211\001\002\000" +
    "\016\017\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\100\uff5e" +
    "\001\002\000\004\020\213\001\002\000\006\103\214\110" +
    "\215\001\002\000\004\020\217\001\002\000\004\020\216" +
    "\001\002\000\014\017\uff58\072\uff58\073\uff58\074\uff58\075" +
    "\uff58\001\002\000\014\017\uff59\072\uff59\073\uff59\074\uff59" +
    "\075\uff59\001\002\000\012\017\uff79\067\uff79\070\uff79\071" +
    "\uff79\001\002\000\012\017\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\001\002\000\012\002\uffa5\003\uffa5\016\uffa5\136\uffa5\001" +
    "\002\000\012\017\uff7c\067\uff7c\070\uff7c\071\uff7c\001\002" +
    "\000\004\004\247\001\002\000\004\004\241\001\002\000" +
    "\004\004\233\001\002\000\012\017\231\067\224\070\226" +
    "\071\225\001\002\000\012\017\uff78\067\uff78\070\uff78\071" +
    "\uff78\001\002\000\012\002\uffa4\003\uffa4\016\uffa4\136\uffa4" +
    "\001\002\000\012\017\uff7b\067\uff7b\070\uff7b\071\uff7b\001" +
    "\002\000\004\020\234\001\002\000\006\103\235\110\236" +
    "\001\002\000\004\020\240\001\002\000\004\020\237\001" +
    "\002\000\012\017\uff61\067\uff61\070\uff61\071\uff61\001\002" +
    "\000\012\017\uff62\067\uff62\070\uff62\071\uff62\001\002\000" +
    "\004\020\242\001\002\000\006\103\243\110\244\001\002" +
    "\000\004\020\246\001\002\000\004\020\245\001\002\000" +
    "\012\017\uff5f\067\uff5f\070\uff5f\071\uff5f\001\002\000\012" +
    "\017\uff60\067\uff60\070\uff60\071\uff60\001\002\000\004\020" +
    "\250\001\002\000\006\103\251\110\252\001\002\000\004" +
    "\020\254\001\002\000\004\020\253\001\002\000\012\017" +
    "\uff5a\067\uff5a\070\uff5a\071\uff5a\001\002\000\012\017\uff5b" +
    "\067\uff5b\070\uff5b\071\uff5b\001\002\000\012\002\uffab\003" +
    "\uffab\016\uffab\136\uffab\001\002\000\012\017\uff69\072\uff69" +
    "\073\uff69\100\uff69\001\002\000\012\017\uff66\072\uff66\073" +
    "\uff66\100\uff66\001\002\000\012\017\uff65\072\uff65\073\uff65" +
    "\100\uff65\001\002\000\012\017\273\072\154\073\162\100" +
    "\264\001\002\000\012\002\uff83\003\uff83\016\uff83\136\uff83" +
    "\001\002\000\012\017\uff67\072\uff67\073\uff67\100\uff67\001" +
    "\002\000\004\004\265\001\002\000\004\020\266\001\002" +
    "\000\006\107\267\113\270\001\002\000\004\020\272\001" +
    "\002\000\004\020\271\001\002\000\012\017\uff53\072\uff53" +
    "\073\uff53\100\uff53\001\002\000\012\017\uff52\072\uff52\073" +
    "\uff52\100\uff52\001\002\000\012\002\uff82\003\uff82\016\uff82" +
    "\136\uff82\001\002\000\012\017\uff68\072\uff68\073\uff68\100" +
    "\uff68\001\002\000\012\002\uff86\003\uff86\016\uff86\136\uff86" +
    "\001\002\000\104\027\104\030\121\031\112\032\110\033" +
    "\132\034\111\035\077\036\134\037\122\040\126\041\130" +
    "\042\116\043\115\044\127\045\133\046\101\047\117\050" +
    "\075\051\107\052\114\053\105\054\106\055\074\056\131" +
    "\057\103\060\100\061\102\064\125\065\076\066\120\102" +
    "\072\111\123\114\124\001\002\000\004\017\uff63\001\002" +
    "\000\004\017\uff64\001\002\000\004\017\314\001\002\000" +
    "\004\004\310\001\002\000\004\004\304\001\002\000\004" +
    "\020\305\001\002\000\004\110\306\001\002\000\004\020" +
    "\307\001\002\000\004\017\uff51\001\002\000\004\020\311" +
    "\001\002\000\004\110\312\001\002\000\004\020\313\001" +
    "\002\000\004\017\uff50\001\002\000\104\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\114\124\001\002\000" +
    "\106\016\316\027\104\030\121\031\112\032\110\033\132" +
    "\034\111\035\077\036\134\037\122\040\126\041\130\042" +
    "\116\043\115\044\127\045\133\046\101\047\117\050\075" +
    "\051\107\052\114\053\105\054\106\055\074\056\131\057" +
    "\103\060\100\061\102\064\125\065\076\066\120\102\072" +
    "\111\123\114\124\001\002\000\004\014\320\001\002\000" +
    "\012\002\uff7e\003\uff7e\016\uff7e\136\uff7e\001\002\000\004" +
    "\066\321\001\002\000\004\017\322\001\002\000\012\002" +
    "\uff7d\003\uff7d\016\uff7d\136\uff7d\001\002\000\106\016\316" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\001\002\000\012\002\uff7f\003\uff7f\016\uff7f\136\uff7f" +
    "\001\002\000\104\027\104\030\121\031\112\032\110\033" +
    "\132\034\111\035\077\036\134\037\122\040\126\041\130" +
    "\042\116\043\115\044\127\045\133\046\101\047\117\050" +
    "\075\051\107\052\114\053\105\054\106\055\074\056\131" +
    "\057\103\060\100\061\102\064\125\065\076\066\120\102" +
    "\072\111\123\114\124\001\002\000\106\016\327\027\104" +
    "\030\121\031\112\032\110\033\132\034\111\035\077\036" +
    "\134\037\122\040\126\041\130\042\116\043\115\044\127" +
    "\045\133\046\101\047\117\050\075\051\107\052\114\053" +
    "\105\054\106\055\074\056\131\057\103\060\100\061\102" +
    "\064\125\065\076\066\120\102\072\111\123\114\124\001" +
    "\002\000\004\014\331\001\002\000\012\002\uff9d\003\uff9d" +
    "\016\uff9d\136\uff9d\001\002\000\004\047\332\001\002\000" +
    "\004\017\333\001\002\000\012\002\uff9c\003\uff9c\016\uff9c" +
    "\136\uff9c\001\002\000\104\027\104\030\121\031\112\032" +
    "\110\033\132\034\111\035\077\036\134\037\122\040\126" +
    "\041\130\042\116\043\115\044\127\045\133\046\101\047" +
    "\117\050\075\051\107\052\114\053\105\054\106\055\074" +
    "\056\131\057\103\060\100\061\102\064\125\065\076\066" +
    "\120\102\072\111\123\114\124\001\002\000\106\016\337" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\001\002\000\012\002\uffa7\003\uffa7\016\uffa7\136\uffa7" +
    "\001\002\000\004\014\340\001\002\000\004\043\341\001" +
    "\002\000\004\017\342\001\002\000\012\002\uffa6\003\uffa6" +
    "\016\uffa6\136\uffa6\001\002\000\012\002\uffa9\003\uffa9\016" +
    "\uffa9\136\uffa9\001\002\000\104\027\104\030\121\031\112" +
    "\032\110\033\132\034\111\035\077\036\134\037\122\040" +
    "\126\041\130\042\116\043\115\044\127\045\133\046\101" +
    "\047\117\050\075\051\107\052\114\053\105\054\106\055" +
    "\074\056\131\057\103\060\100\061\102\064\125\065\076" +
    "\066\120\102\072\111\123\114\124\001\002\000\106\016" +
    "\347\027\104\030\121\031\112\032\110\033\132\034\111" +
    "\035\077\036\134\037\122\040\126\041\130\042\116\043" +
    "\115\044\127\045\133\046\101\047\117\050\075\051\107" +
    "\052\114\053\105\054\106\055\074\056\131\057\103\060" +
    "\100\061\102\064\125\065\076\066\120\102\072\111\123" +
    "\114\124\001\002\000\012\002\uff97\003\uff97\016\uff97\136" +
    "\uff97\001\002\000\004\014\350\001\002\000\004\052\351" +
    "\001\002\000\004\017\352\001\002\000\012\002\uff96\003" +
    "\uff96\016\uff96\136\uff96\001\002\000\104\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\114\124\001\002\000" +
    "\106\016\355\027\104\030\121\031\112\032\110\033\132" +
    "\034\111\035\077\036\134\037\122\040\126\041\130\042" +
    "\116\043\115\044\127\045\133\046\101\047\117\050\075" +
    "\051\107\052\114\053\105\054\106\055\074\056\131\057" +
    "\103\060\100\061\102\064\125\065\076\066\120\102\072" +
    "\111\123\114\124\001\002\000\004\014\357\001\002\000" +
    "\012\002\uff93\003\uff93\016\uff93\136\uff93\001\002\000\004" +
    "\054\360\001\002\000\004\017\361\001\002\000\012\002" +
    "\uff92\003\uff92\016\uff92\136\uff92\001\002\000\104\027\104" +
    "\030\121\031\112\032\110\033\132\034\111\035\077\036" +
    "\134\037\122\040\126\041\130\042\116\043\115\044\127" +
    "\045\133\046\101\047\117\050\075\051\107\052\114\053" +
    "\105\054\106\055\074\056\131\057\103\060\100\061\102" +
    "\064\125\065\076\066\120\102\072\111\123\114\124\001" +
    "\002\000\106\016\364\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\004\014\366\001" +
    "\002\000\012\002\uff99\003\uff99\016\uff99\136\uff99\001\002" +
    "\000\004\051\367\001\002\000\004\017\370\001\002\000" +
    "\012\002\uff98\003\uff98\016\uff98\136\uff98\001\002\000\104" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\001\002\000\106\016\374\027\104\030\121\031\112" +
    "\032\110\033\132\034\111\035\077\036\134\037\122\040" +
    "\126\041\130\042\116\043\115\044\127\045\133\046\101" +
    "\047\117\050\075\051\107\052\114\053\105\054\106\055" +
    "\074\056\131\057\103\060\100\061\102\064\125\065\076" +
    "\066\120\102\072\111\123\114\124\001\002\000\012\002" +
    "\uff95\003\uff95\016\uff95\136\uff95\001\002\000\004\014\375" +
    "\001\002\000\004\053\376\001\002\000\004\017\377\001" +
    "\002\000\012\002\uff94\003\uff94\016\uff94\136\uff94\001\002" +
    "\000\004\016\u010a\001\002\000\004\017\uff71\001\002\000" +
    "\004\017\u0108\001\002\000\004\004\u0104\001\002\000\004" +
    "\020\u0105\001\002\000\004\106\u0106\001\002\000\004\020" +
    "\u0107\001\002\000\004\017\uff57\001\002\000\004\016\u010a" +
    "\001\002\000\004\016\u0110\001\002\000\004\061\u010c\001" +
    "\002\000\004\016\uff6c\001\002\000\004\017\u010d\001\002" +
    "\000\104\027\104\030\121\031\112\032\110\033\132\034" +
    "\111\035\077\036\134\037\122\040\126\041\130\042\116" +
    "\043\115\044\127\045\133\046\101\047\117\050\075\051" +
    "\107\052\114\053\105\054\106\055\074\056\131\057\103" +
    "\060\100\061\102\064\125\065\076\066\120\102\072\111" +
    "\123\114\124\001\002\000\106\016\uff6a\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\114\124\001\002\000" +
    "\012\002\uff8b\003\uff8b\016\uff8b\136\uff8b\001\002\000\006" +
    "\014\u0112\061\u010c\001\002\000\004\016\uff6b\001\002\000" +
    "\004\057\u0113\001\002\000\004\017\u0114\001\002\000\012" +
    "\002\uff8a\003\uff8a\016\uff8a\136\uff8a\001\002\000\004\016" +
    "\u0110\001\002\000\012\002\uff8c\003\uff8c\016\uff8c\136\uff8c" +
    "\001\002\000\104\027\104\030\121\031\112\032\110\033" +
    "\132\034\111\035\077\036\134\037\122\040\126\041\130" +
    "\042\116\043\115\044\127\045\133\046\101\047\117\050" +
    "\075\051\107\052\114\053\105\054\106\055\074\056\131" +
    "\057\103\060\100\061\102\064\125\065\076\066\120\102" +
    "\072\111\123\114\124\001\002\000\004\017\u0119\001\002" +
    "\000\104\027\104\030\121\031\112\032\110\033\132\034" +
    "\111\035\077\036\134\037\122\040\126\041\130\042\116" +
    "\043\115\044\127\045\133\046\101\047\117\050\075\051" +
    "\107\052\114\053\105\054\106\055\074\056\131\057\103" +
    "\060\100\061\102\064\125\065\076\066\120\102\072\111" +
    "\123\114\124\001\002\000\106\016\u011b\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\114\124\001\002\000" +
    "\004\014\u011d\001\002\000\012\002\uff9f\003\uff9f\016\uff9f" +
    "\136\uff9f\001\002\000\004\046\u011e\001\002\000\004\017" +
    "\u011f\001\002\000\012\002\uff9e\003\uff9e\016\uff9e\136\uff9e" +
    "\001\002\000\106\016\u011b\027\104\030\121\031\112\032" +
    "\110\033\132\034\111\035\077\036\134\037\122\040\126" +
    "\041\130\042\116\043\115\044\127\045\133\046\101\047" +
    "\117\050\075\051\107\052\114\053\105\054\106\055\074" +
    "\056\131\057\103\060\100\061\102\064\125\065\076\066" +
    "\120\102\072\111\123\114\124\001\002\000\012\002\uffa0" +
    "\003\uffa0\016\uffa0\136\uffa0\001\002\000\010\017\u0139\076" +
    "\u0128\077\u0126\001\002\000\004\016\u010a\001\002\000\010" +
    "\017\uff6e\076\uff6e\077\uff6e\001\002\000\010\017\uff70\076" +
    "\uff70\077\uff70\001\002\000\004\004\u012f\001\002\000\010" +
    "\017\uff6d\076\uff6d\077\uff6d\001\002\000\004\004\u0129\001" +
    "\002\000\004\020\u012a\001\002\000\106\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\113\u012c\114\124\001" +
    "\002\000\106\020\u012e\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\004\020\u012d\001" +
    "\002\000\010\017\uff56\076\uff56\077\uff56\001\002\000\010" +
    "\017\uff55\076\uff55\077\uff55\001\002\000\004\020\u0130\001" +
    "\002\000\004\113\u0131\001\002\000\004\020\u0132\001\002" +
    "\000\010\017\uff54\076\uff54\077\uff54\001\002\000\004\016" +
    "\u0135\001\002\000\012\002\uff89\003\uff89\016\uff89\136\uff89" +
    "\001\002\000\006\014\u0136\061\u010c\001\002\000\004\060" +
    "\u0137\001\002\000\004\017\u0138\001\002\000\012\002\uff87" +
    "\003\uff87\016\uff87\136\uff87\001\002\000\004\016\u010a\001" +
    "\002\000\010\017\uff6f\076\uff6f\077\uff6f\001\002\000\004" +
    "\016\u0135\001\002\000\012\002\uff88\003\uff88\016\uff88\136" +
    "\uff88\001\002\000\104\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\106\016\u0140\027" +
    "\104\030\121\031\112\032\110\033\132\034\111\035\077" +
    "\036\134\037\122\040\126\041\130\042\116\043\115\044" +
    "\127\045\133\046\101\047\117\050\075\051\107\052\114" +
    "\053\105\054\106\055\074\056\131\057\103\060\100\061" +
    "\102\064\125\065\076\066\120\102\072\111\123\114\124" +
    "\001\002\000\012\002\uff81\003\uff81\016\uff81\136\uff81\001" +
    "\002\000\004\014\u0141\001\002\000\004\065\u0142\001\002" +
    "\000\004\017\u0143\001\002\000\012\002\uff80\003\uff80\016" +
    "\uff80\136\uff80\001\002\000\104\027\104\030\121\031\112" +
    "\032\110\033\132\034\111\035\077\036\134\037\122\040" +
    "\126\041\130\042\116\043\115\044\127\045\133\046\101" +
    "\047\117\050\075\051\107\052\114\053\105\054\106\055" +
    "\074\056\131\057\103\060\100\061\102\064\125\065\076" +
    "\066\120\102\072\111\123\114\124\001\002\000\106\016" +
    "\u0146\027\104\030\121\031\112\032\110\033\132\034\111" +
    "\035\077\036\134\037\122\040\126\041\130\042\116\043" +
    "\115\044\127\045\133\046\101\047\117\050\075\051\107" +
    "\052\114\053\105\054\106\055\074\056\131\057\103\060" +
    "\100\061\102\064\125\065\076\066\120\102\072\111\123" +
    "\114\124\001\002\000\004\014\u0148\001\002\000\012\002" +
    "\uff9b\003\uff9b\016\uff9b\136\uff9b\001\002\000\004\050\u0149" +
    "\001\002\000\004\017\u014a\001\002\000\012\002\uff9a\003" +
    "\uff9a\016\uff9a\136\uff9a\001\002\000\104\027\104\030\121" +
    "\031\112\032\110\033\132\034\111\035\077\036\134\037" +
    "\122\040\126\041\130\042\116\043\115\044\127\045\133" +
    "\046\101\047\117\050\075\051\107\052\114\053\105\054" +
    "\106\055\074\056\131\057\103\060\100\061\102\064\125" +
    "\065\076\066\120\102\072\111\123\114\124\001\002\000" +
    "\106\016\u014d\027\104\030\121\031\112\032\110\033\132" +
    "\034\111\035\077\036\134\037\122\040\126\041\130\042" +
    "\116\043\115\044\127\045\133\046\101\047\117\050\075" +
    "\051\107\052\114\053\105\054\106\055\074\056\131\057" +
    "\103\060\100\061\102\064\125\065\076\066\120\102\072" +
    "\111\123\114\124\001\002\000\004\014\u014f\001\002\000" +
    "\012\002\uff91\003\uff91\016\uff91\136\uff91\001\002\000\004" +
    "\055\u0150\001\002\000\004\017\u0151\001\002\000\012\002" +
    "\uff90\003\uff90\016\uff90\136\uff90\001\002\000\104\027\104" +
    "\030\121\031\112\032\110\033\132\034\111\035\077\036" +
    "\134\037\122\040\126\041\130\042\116\043\115\044\127" +
    "\045\133\046\101\047\117\050\075\051\107\052\114\053" +
    "\105\054\106\055\074\056\131\057\103\060\100\061\102" +
    "\064\125\065\076\066\120\102\072\111\123\114\124\001" +
    "\002\000\106\016\u0155\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\001\002\000\012\002\uff85\003" +
    "\uff85\016\uff85\136\uff85\001\002\000\004\014\u0156\001\002" +
    "\000\004\063\u0157\001\002\000\004\017\u0158\001\002\000" +
    "\012\002\uff84\003\uff84\016\uff84\136\uff84\001\002\000\012" +
    "\002\ufffe\003\ufffe\016\ufffe\136\ufffe\001\002\000\124\006" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\064\uffd9\065\uffd9\066\uffd9\102\uffd9\111\uffd9" +
    "\114\uffd9\115\uffd9\125\uffd9\126\uffd9\130\uffd9\131\uffd9\133" +
    "\uffd9\137\uffd9\001\002\000\120\027\104\030\121\031\112" +
    "\032\110\033\132\034\111\035\077\036\134\037\122\040" +
    "\126\041\130\042\116\043\115\044\127\045\133\046\101" +
    "\047\117\050\075\051\107\052\114\053\105\054\106\055" +
    "\074\056\131\057\103\060\100\061\102\064\125\065\076" +
    "\066\120\102\072\111\123\114\124\115\u0167\125\u015e\130" +
    "\u0162\131\u015d\133\u0168\137\u01c3\001\002\000\124\006\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\064\uffd8\065\uffd8\066\uffd8\102\uffd8\111\uffd8\114" +
    "\uffd8\115\uffd8\125\uffd8\126\uffd8\130\uffd8\131\uffd8\133\uffd8" +
    "\137\uffd8\001\002\000\106\003\u01bb\027\104\030\121\031" +
    "\112\032\110\033\132\034\111\035\077\036\134\037\122" +
    "\040\126\041\130\042\116\043\115\044\127\045\133\046" +
    "\101\047\117\050\075\051\107\052\114\053\105\054\106" +
    "\055\074\056\131\057\103\060\100\061\102\064\125\065" +
    "\076\066\120\102\072\111\123\114\124\001\002\000\016" +
    "\003\u01b6\007\u0184\113\u017f\114\u0183\121\u017d\122\u0181\001" +
    "\002\000\122\006\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\102\uffe0\111\uffe0\114\uffe0\115\uffe0\125\uffe0\130\uffe0\131" +
    "\uffe0\133\uffe0\137\uffe0\001\002\000\124\006\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\064\uffde\065\uffde\066\uffde\102\uffde\111\uffde\114\uffde\115" +
    "\uffde\125\uffde\126\uffde\130\uffde\131\uffde\133\uffde\137\uffde" +
    "\001\002\000\124\006\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\102\uffdd\111\uffdd\114\uffdd\115\uffdd\125\uffdd\126\uffdd" +
    "\130\uffdd\131\uffdd\133\uffdd\137\uffdd\001\002\000\016\003" +
    "\u01a9\007\u0184\113\u017f\114\u0183\121\u017d\122\u0181\001\002" +
    "\000\124\006\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\064\uffdc\065\uffdc\066\uffdc\102" +
    "\uffdc\111\uffdc\114\uffdc\115\uffdc\125\uffdc\126\uffdc\130\uffdc" +
    "\131\uffdc\133\uffdc\137\uffdc\001\002\000\106\022\u017a\027" +
    "\104\030\121\031\112\032\110\033\132\034\111\035\077" +
    "\036\134\037\122\040\126\041\130\042\116\043\115\044" +
    "\127\045\133\046\101\047\117\050\075\051\107\052\114" +
    "\053\105\054\106\055\074\056\131\057\103\060\100\061" +
    "\102\064\125\065\076\066\120\102\072\111\123\114\124" +
    "\001\002\000\124\006\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\102\uffdb\111\uffdb\114\uffdb\115\uffdb\125\uffdb\126\uffdb" +
    "\130\uffdb\131\uffdb\133\uffdb\137\uffdb\001\002\000\124\006" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\064\uffda\065\uffda\066\uffda\102\uffda\111\uffda" +
    "\114\uffda\115\uffda\125\uffda\126\uffda\130\uffda\131\uffda\133" +
    "\uffda\137\uffda\001\002\000\104\027\104\030\121\031\112" +
    "\032\110\033\132\034\111\035\077\036\134\037\122\040" +
    "\126\041\130\042\116\043\115\044\127\045\133\046\101" +
    "\047\117\050\075\051\107\052\114\053\105\054\106\055" +
    "\074\056\131\057\103\060\100\061\102\064\125\065\076" +
    "\066\120\102\072\111\123\114\124\001\002\000\006\003" +
    "\u0169\007\u016a\001\002\000\124\006\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\102\uffc2\111\uffc2\114\uffc2\115\uffc2\125" +
    "\uffc2\126\uffc2\130\uffc2\131\uffc2\133\uffc2\137\uffc2\001\002" +
    "\000\106\027\104\030\121\031\112\032\110\033\132\034" +
    "\111\035\077\036\134\037\122\040\126\041\130\042\116" +
    "\043\115\044\127\045\133\046\101\047\117\050\075\051" +
    "\107\052\114\053\105\054\106\055\074\056\131\057\103" +
    "\060\100\061\102\064\125\065\076\066\120\102\072\111" +
    "\123\112\u016b\114\124\001\002\000\006\010\uffbf\015\uffbf" +
    "\001\002\000\110\010\uffbe\015\uffbe\027\104\030\121\031" +
    "\112\032\110\033\132\034\111\035\077\036\134\037\122" +
    "\040\126\041\130\042\116\043\115\044\127\045\133\046" +
    "\101\047\117\050\075\051\107\052\114\053\105\054\106" +
    "\055\074\056\131\057\103\060\100\061\102\064\125\065" +
    "\076\066\120\102\072\111\123\114\124\001\002\000\006" +
    "\010\uffc1\015\uffc1\001\002\000\006\010\u0170\015\u016f\001" +
    "\002\000\106\027\104\030\121\031\112\032\110\033\132" +
    "\034\111\035\077\036\134\037\122\040\126\041\130\042" +
    "\116\043\115\044\127\045\133\046\101\047\117\050\075" +
    "\051\107\052\114\053\105\054\106\055\074\056\131\057" +
    "\103\060\100\061\102\064\125\065\076\066\120\102\072" +
    "\111\123\112\u016b\114\124\001\002\000\004\023\u0171\001" +
    "\002\000\124\006\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\102\uffc3\111\uffc3\114\uffc3\115\uffc3\125\uffc3\126\uffc3\130" +
    "\uffc3\131\uffc3\133\uffc3\137\uffc3\001\002\000\006\010\uffc0" +
    "\015\uffc0\001\002\000\106\021\u0174\027\104\030\121\031" +
    "\112\032\110\033\132\034\111\035\077\036\134\037\122" +
    "\040\126\041\130\042\116\043\115\044\127\045\133\046" +
    "\101\047\117\050\075\051\107\052\114\053\105\054\106" +
    "\055\074\056\131\057\103\060\100\061\102\064\125\065" +
    "\076\066\120\102\072\111\123\114\124\001\002\000\010" +
    "\116\u0175\117\u0178\120\u0176\001\002\000\004\023\uff2c\001" +
    "\002\000\004\023\uff2a\001\002\000\004\023\u0179\001\002" +
    "\000\004\023\uff2b\001\002\000\124\006\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\064" +
    "\uffca\065\uffca\066\uffca\102\uffca\111\uffca\114\uffca\115\uffca" +
    "\125\uffca\126\uffca\130\uffca\131\uffca\133\uffca\137\uffca\001" +
    "\002\000\014\007\u0184\113\u017f\114\u0183\121\u017d\122\u0181" +
    "\001\002\000\140\006\uffb8\010\uffb8\023\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\102\uffb8\111\uffb8\114\uffb8\115\uffb8" +
    "\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131" +
    "\uffb8\133\uffb8\134\uffb8\137\uffb8\001\002\000\006\123\u01a4" +
    "\124\u01a5\001\002\000\140\006\uffb4\010\uffb4\023\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\102\uffb4\111\uffb4\114\uffb4" +
    "\115\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\130" +
    "\uffb4\131\uffb4\133\uffb4\134\uffb4\137\uffb4\001\002\000\166" +
    "\004\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\064\uffd2\065\uffd2\066\uffd2\102\uffd2\111\uffd2\114" +
    "\uffd2\115\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2" +
    "\130\uffd2\131\uffd2\132\uffd2\133\uffd2\134\uffd2\137\uffd2\001" +
    "\002\000\166\004\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\064\uffd1\065\uffd1\066\uffd1\102\uffd1" +
    "\111\uffd1\114\uffd1\115\uffd1\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1\134\uffd1" +
    "\137\uffd1\001\002\000\166\004\uffd5\006\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\u0197\014\u0198\016\uffd5\017\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\102\uffd5\111\uffd5\114\uffd5\115\uffd5\123\uffd5\124\uffd5" +
    "\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133" +
    "\uffd5\134\uffd5\137\uffd5\001\002\000\140\006\uffb3\010\uffb3" +
    "\023\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\064\uffb3\065\uffb3\066\uffb3\102\uffb3\111" +
    "\uffb3\114\uffb3\115\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3" +
    "\127\uffb3\130\uffb3\131\uffb3\133\uffb3\134\uffb3\137\uffb3\001" +
    "\002\000\146\004\u018f\006\uffce\011\u018c\012\u0191\016\u0192" +
    "\017\u018e\023\u01a3\024\u0194\025\u018d\026\u0193\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\064" +
    "\uffce\065\uffce\066\uffce\102\uffce\111\uffce\114\uffce\115\uffce" +
    "\125\uffce\126\uffce\130\uffce\131\uffce\133\uffce\137\uffce\001" +
    "\002\000\166\004\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\064\uffd0\065\uffd0\066\uffd0\102\uffd0" +
    "\111\uffd0\114\uffd0\115\uffd0\123\uffd0\124\uffd0\125\uffd0\126" +
    "\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0\134\uffd0" +
    "\137\uffd0\001\002\000\014\007\u0184\113\u017f\114\u0183\121" +
    "\u017d\122\u0181\001\002\000\132\006\uffcc\023\u0189\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\102\uffcc\111\uffcc\114\uffcc\115" +
    "\uffcc\123\u0187\124\u0188\125\uffcc\126\uffcc\130\uffcc\131\uffcc" +
    "\133\uffcc\137\uffcc\001\002\000\140\006\uffb5\010\uffb5\023" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\064\uffb5\065\uffb5\066\uffb5\102\uffb5\111\uffb5" +
    "\114\uffb5\115\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\133\uffb5\134\uffb5\137\uffb5\001\002" +
    "\000\014\007\u0184\113\u017f\114\u0183\121\u017d\122\u0181\001" +
    "\002\000\014\007\u0184\113\u017f\114\u0183\121\u017d\122\u0181" +
    "\001\002\000\124\006\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\102\uffcb\111\uffcb\114\uffcb\115\uffcb\125\uffcb\126\uffcb" +
    "\130\uffcb\131\uffcb\133\uffcb\137\uffcb\001\002\000\140\006" +
    "\uffb9\010\uffb9\023\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\102\uffb9\111\uffb9\114\uffb9\115\uffb9\123\uffb9\124\uffb9\125" +
    "\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\133\uffb9\134\uffb9" +
    "\137\uffb9\001\002\000\022\004\u018f\011\u018c\012\u0191\016" +
    "\u0192\017\u018e\024\u0194\025\u018d\026\u0193\001\002\000\010" +
    "\007\u0195\113\u017f\114\u0183\001\002\000\010\007\uffad\113" +
    "\uffad\114\uffad\001\002\000\010\007\uffaf\113\uffaf\114\uffaf" +
    "\001\002\000\010\007\uffb1\113\uffb1\114\uffb1\001\002\000" +
    "\010\007\u0195\113\u017f\114\u0183\001\002\000\010\007\u0195" +
    "\113\u017f\114\u0183\001\002\000\010\007\uffb0\113\uffb0\114" +
    "\uffb0\001\002\000\010\007\uffac\113\uffac\114\uffac\001\002" +
    "\000\010\007\uffae\113\uffae\114\uffae\001\002\000\010\007" +
    "\u0195\113\u017f\114\u0183\001\002\000\166\004\uffd6\006\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\u0197\014\u0198\016\uffd6\017" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\102\uffd6\111\uffd6\114\uffd6\115\uffd6\123" +
    "\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6" +
    "\132\uffd6\133\uffd6\134\uffd6\137\uffd6\001\002\000\010\007" +
    "\u0195\113\u017f\114\u0183\001\002\000\010\007\u0195\113\u017f" +
    "\114\u0183\001\002\000\166\004\uffd3\006\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\102\uffd3\111\uffd3\114\uffd3\115\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133" +
    "\uffd3\134\uffd3\137\uffd3\001\002\000\166\004\uffd4\006\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\102\uffd4\111\uffd4\114\uffd4\115\uffd4\123" +
    "\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4" +
    "\132\uffd4\133\uffd4\134\uffd4\137\uffd4\001\002\000\010\010" +
    "\u019c\011\u018c\012\u0191\001\002\000\166\004\uffcf\006\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\102\uffcf\111\uffcf\114\uffcf\115\uffcf\123" +
    "\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf" +
    "\132\uffcf\133\uffcf\134\uffcf\137\uffcf\001\002\000\144\006" +
    "\uffbb\010\uffbb\011\u018c\012\u0191\023\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\102\uffbb\111\uffbb\114\uffbb\115\uffbb\123" +
    "\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb\131\uffbb" +
    "\133\uffbb\134\uffbb\137\uffbb\001\002\000\166\004\uffd7\006" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\u0197\014\u0198\016\uffd7" +
    "\017\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\102\uffd7\111\uffd7\114\uffd7\115\uffd7" +
    "\123\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131" +
    "\uffd7\132\uffd7\133\uffd7\134\uffd7\137\uffd7\001\002\000\140" +
    "\006\uffba\010\uffba\023\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\064\uffba\065\uffba\066" +
    "\uffba\102\uffba\111\uffba\114\uffba\115\uffba\123\uffba\124\uffba" +
    "\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba\133\uffba\134" +
    "\uffba\137\uffba\001\002\000\024\004\u018f\010\u019c\011\u018c" +
    "\012\u0191\016\u0192\017\u018e\024\u0194\025\u018d\026\u0193\001" +
    "\002\000\010\010\u01a2\123\u0187\124\u0188\001\002\000\140" +
    "\006\uffb2\010\uffb2\023\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\102\uffb2\111\uffb2\114\uffb2\115\uffb2\123\uffb2\124\uffb2" +
    "\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\133\uffb2\134" +
    "\uffb2\137\uffb2\001\002\000\126\006\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\102\uffcd\111\uffcd\114\uffcd\115\uffcd\125" +
    "\uffcd\126\uffcd\130\uffcd\131\uffcd\132\uffcd\133\uffcd\137\uffcd" +
    "\001\002\000\010\007\u0195\113\u017f\114\u0183\001\002\000" +
    "\010\007\u0195\113\u017f\114\u0183\001\002\000\140\006\uffb6" +
    "\010\uffb6\023\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\064\uffb6\065\uffb6\066\uffb6\102" +
    "\uffb6\111\uffb6\114\uffb6\115\uffb6\123\uffb6\124\uffb6\125\uffb6" +
    "\126\uffb6\127\uffb6\130\uffb6\131\uffb6\133\uffb6\134\uffb6\137" +
    "\uffb6\001\002\000\140\006\uffb7\010\uffb7\023\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\102\uffb7\111\uffb7\114\uffb7\115" +
    "\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7" +
    "\131\uffb7\133\uffb7\134\uffb7\137\uffb7\001\002\000\126\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\102\uffbd\111\uffbd\114\uffbd" +
    "\115\uffbd\123\u01a4\124\u01a5\125\uffbd\127\uffbd\130\uffbd\131" +
    "\uffbd\133\uffbd\134\uffbd\001\002\000\124\006\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\102\uffc6\111\uffc6\114\uffc6\115" +
    "\uffc6\125\uffc6\126\uffc6\130\uffc6\131\uffc6\133\uffc6\137\uffc6" +
    "\001\002\000\120\027\104\030\121\031\112\032\110\033" +
    "\132\034\111\035\077\036\134\037\122\040\126\041\130" +
    "\042\116\043\115\044\127\045\133\046\101\047\117\050" +
    "\075\051\107\052\114\053\105\054\106\055\074\056\131" +
    "\057\103\060\100\061\102\064\125\065\076\066\120\102" +
    "\072\111\123\114\124\115\u0167\125\u015e\130\u0162\131\u015d" +
    "\133\u0168\134\u01ad\001\002\000\126\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\064\uffbc\065" +
    "\uffbc\066\uffbc\102\uffbc\111\uffbc\114\uffbc\115\uffbc\123\u0187" +
    "\124\u0188\125\uffbc\127\uffbc\130\uffbc\131\uffbc\133\uffbc\134" +
    "\uffbc\001\002\000\124\006\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\064\uffc7\065\uffc7" +
    "\066\uffc7\102\uffc7\111\uffc7\114\uffc7\115\uffc7\125\uffc7\126" +
    "\uffc7\130\uffc7\131\uffc7\133\uffc7\137\uffc7\001\002\000\004" +
    "\005\u01af\001\002\000\124\006\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\102\uffe1\111\uffe1\114\uffe1\115\uffe1\125\uffe1" +
    "\126\uffe1\130\uffe1\131\uffe1\133\uffe1\137\uffe1\001\002\000" +
    "\116\027\104\030\121\031\112\032\110\033\132\034\111" +
    "\035\077\036\134\037\122\040\126\041\130\042\116\043" +
    "\115\044\127\045\133\046\101\047\117\050\075\051\107" +
    "\052\114\053\105\054\106\055\074\056\131\057\103\060" +
    "\100\061\102\064\125\065\076\066\120\102\072\111\123" +
    "\114\124\115\u0167\125\u015e\130\u0162\131\u015d\133\u0168\001" +
    "\002\000\120\006\u01b1\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\115\u0167\125\u015e\130\u0162\131" +
    "\u015d\133\u0168\001\002\000\004\135\u01b3\001\002\000\122" +
    "\006\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\064\uffdf\065\uffdf\066\uffdf\102\uffdf\111" +
    "\uffdf\114\uffdf\115\uffdf\125\uffdf\130\uffdf\131\uffdf\133\uffdf" +
    "\137\uffdf\001\002\000\004\023\u01b4\001\002\000\124\006" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\064\uffe2\065\uffe2\066\uffe2\102\uffe2\111\uffe2" +
    "\114\uffe2\115\uffe2\125\uffe2\126\uffe2\130\uffe2\131\uffe2\133" +
    "\uffe2\137\uffe2\001\002\000\004\127\u01b7\001\002\000\124" +
    "\006\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\064\uffc8\065\uffc8\066\uffc8\102\uffc8\111" +
    "\uffc8\114\uffc8\115\uffc8\125\uffc8\126\uffc8\130\uffc8\131\uffc8" +
    "\133\uffc8\137\uffc8\001\002\000\120\027\104\030\121\031" +
    "\112\032\110\033\132\034\111\035\077\036\134\037\122" +
    "\040\126\041\130\042\116\043\115\044\127\045\133\046" +
    "\101\047\117\050\075\051\107\052\114\053\105\054\106" +
    "\055\074\056\131\057\103\060\100\061\102\064\125\065" +
    "\076\066\120\102\072\111\123\114\124\115\u0167\125\u015e" +
    "\130\u0162\131\u015d\133\u0168\134\u01ad\001\002\000\004\126" +
    "\u01b9\001\002\000\120\027\104\030\121\031\112\032\110" +
    "\033\132\034\111\035\077\036\134\037\122\040\126\041" +
    "\130\042\116\043\115\044\127\045\133\046\101\047\117" +
    "\050\075\051\107\052\114\053\105\054\106\055\074\056" +
    "\131\057\103\060\100\061\102\064\125\065\076\066\120" +
    "\102\072\111\123\114\124\115\u0167\125\u015e\130\u0162\131" +
    "\u015d\133\u0168\134\u01ad\001\002\000\124\006\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\102\uffc9\111\uffc9\114\uffc9\115" +
    "\uffc9\125\uffc9\126\uffc9\130\uffc9\131\uffc9\133\uffc9\137\uffc9" +
    "\001\002\000\124\006\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\102\uffc4\111\uffc4\114\uffc4\115\uffc4\125\uffc4\126\uffc4" +
    "\130\uffc4\131\uffc4\133\uffc4\137\uffc4\001\002\000\106\022" +
    "\u01c1\027\104\030\121\031\112\032\110\033\132\034\111" +
    "\035\077\036\134\037\122\040\126\041\130\042\116\043" +
    "\115\044\127\045\133\046\101\047\117\050\075\051\107" +
    "\052\114\053\105\054\106\055\074\056\131\057\103\060" +
    "\100\061\102\064\125\065\076\066\120\102\072\111\123" +
    "\114\124\001\002\000\004\132\u01be\001\002\000\010\007" +
    "\u0195\113\u017f\114\u0183\001\002\000\124\011\u018c\012\u0191" +
    "\027\104\030\121\031\112\032\110\033\132\034\111\035" +
    "\077\036\134\037\122\040\126\041\130\042\116\043\115" +
    "\044\127\045\133\046\101\047\117\050\075\051\107\052" +
    "\114\053\105\054\106\055\074\056\131\057\103\060\100" +
    "\061\102\064\125\065\076\066\120\102\072\111\123\114" +
    "\124\115\u0167\125\u015e\130\u0162\131\u015d\133\u0168\134\u01ad" +
    "\001\002\000\124\006\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\102\uffc5\111\uffc5\114\uffc5\115\uffc5\125\uffc5\126\uffc5" +
    "\130\uffc5\131\uffc5\133\uffc5\137\uffc5\001\002\000\010\007" +
    "\u0195\113\u017f\114\u0183\001\002\000\012\011\u018c\012\u0191" +
    "\023\u01a3\132\uffce\001\002\000\012\002\uffe3\003\uffe3\016" +
    "\uffe3\136\uffe3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c2\000\072\004\032\005\035\006\023\007\024\010" +
    "\004\012\034\013\036\014\033\016\012\020\021\022\006" +
    "\024\017\026\041\030\037\032\020\034\011\036\040\040" +
    "\027\042\025\045\007\046\005\050\010\051\016\053\022" +
    "\056\003\057\014\060\030\061\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\u0163\003\112\055\u015a\063\u0165" +
    "\064\u0159\065\u0164\066\u015e\067\u015b\070\u015f\071\u0160\072" +
    "\u0162\001\001\000\066\004\032\005\035\006\023\007\024" +
    "\010\004\012\034\013\036\014\033\016\012\020\021\022" +
    "\006\024\017\026\041\030\037\032\020\034\011\036\040" +
    "\040\027\042\025\045\007\046\005\050\010\051\016\053" +
    "\022\060\u0158\061\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\114\u0123\115\u0126\126\u0121\127\u0124" +
    "\001\001\000\004\107\u0117\001\001\000\006\113\u0100\125" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\117\277\120\276\133\300" +
    "\001\001\000\002\001\001\000\014\107\262\110\257\116" +
    "\256\131\260\132\255\001\001\000\002\001\001\000\014" +
    "\104\220\105\217\106\227\121\226\122\222\001\001\000" +
    "\016\107\160\110\152\111\162\112\154\123\156\124\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\072\003\112\001\001\000\002\001\001\000\006\003\135" +
    "\015\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\203" +
    "\003\112\001\001\000\014\107\160\110\152\111\162\112" +
    "\154\124\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\175\003\112\001\001" +
    "\000\006\003\135\037\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\135\037\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\104\220\105\217\106\227\122" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\107\262\110\257\116\256\132\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\322\003\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\314\003\112\001\001\000\006\003" +
    "\135\054\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\135\054\323\001\001\000\002\001\001\000\006" +
    "\002\325\003\112\001\001\000\006\003\135\021\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\334\003" +
    "\112\001\001\000\006\003\135\011\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\344" +
    "\003\112\001\001\000\006\003\135\027\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\353\003\112\001" +
    "\001\000\006\003\135\033\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\362\003\112\001\001\000\006" +
    "\003\135\025\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\371\003\112\001\001\000\006\003\135\031" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u010a\130\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\u010a\130\u0108" +
    "\001\001\000\006\041\u010e\044\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\u010d" +
    "\003\112\001\001\000\004\003\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\u0115\044" +
    "\u0110\001\001\000\002\001\001\000\006\002\u011f\003\112" +
    "\001\001\000\002\001\001\000\006\002\u0119\003\112\001" +
    "\001\000\006\003\135\017\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\135\017\u0120\001\001\000\002" +
    "\001\001\000\010\114\u0123\115\u0126\127\u0139\001\001\000" +
    "\006\044\u010a\130\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u012a\003\112\001\001" +
    "\000\004\003\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\u0133\044" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\u010a\130\u013a\001\001\000\002\001\001\000\006\043\u013b" +
    "\044\u0110\001\001\000\002\001\001\000\006\002\u013d\003" +
    "\112\001\001\000\006\003\135\052\u013e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\u0144\003\112\001\001" +
    "\000\006\003\135\023\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\u014b\003\112\001\001\000\006\003" +
    "\135\035\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\u0152\003\112\001\001\000\006\003\135\047\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\u0163\003\112\063\u0165\064" +
    "\u0159\065\u0164\066\u01b1\067\u015b\070\u015f\071\u0160\072\u0162" +
    "\001\001\000\002\001\001\000\010\002\u01bb\003\112\063" +
    "\u01bc\001\001\000\022\073\u01a7\074\u01b4\075\u01aa\076\u017a" +
    "\077\u0185\134\u018a\135\u017f\136\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\073\u01a7" +
    "\074\u01a9\075\u01aa\076\u017a\077\u0185\134\u018a\135\u017f\136" +
    "\u017d\001\001\000\002\001\001\000\004\003\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\u0172\003" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\u016b\003\112\100\u016d\101\u016c\001\001\000\002\001" +
    "\001\000\004\003\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\u016b\003\112\101\u0171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\135\001\001\000\004\103\u0176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\073\u017b\075\u0184\076\u017a\077" +
    "\u0185\134\u0181\135\u017f\136\u017d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u018f\001\001\000\002\001\001\000\020\073\u017b\075" +
    "\u01a0\076\u017a\077\u0185\134\u019f\135\u017f\136\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\073\u017b\076" +
    "\u019e\077\u0185\134\u018a\135\u017f\136\u017d\001\001\000\016" +
    "\073\u017b\076\u0189\077\u0185\134\u018a\135\u017f\136\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u018f" +
    "\001\001\000\006\135\u019d\136\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\134\u019c" +
    "\135\u017f\136\u017d\001\001\000\006\135\u0195\136\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\134\u019a\135\u017f\136\u017d\001\001\000\002\001" +
    "\001\000\004\136\u0199\001\001\000\004\136\u0198\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\073\u01a6\134\u018a" +
    "\135\u017f\136\u017d\001\001\000\012\073\u01a5\134\u018a\135" +
    "\u017f\136\u017d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\u0163\003" +
    "\112\062\u01ab\063\u0165\064\u0159\065\u0164\066\u01ad\067\u015b" +
    "\070\u015f\071\u0160\072\u0162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\u0163\003\112\055\u01af\063\u0165\064\u0159\065\u0164\066" +
    "\u015e\067\u015b\070\u015f\071\u0160\072\u0162\001\001\000\026" +
    "\002\u0163\003\112\063\u0165\064\u0159\065\u0164\066\u01b1\067" +
    "\u015b\070\u015f\071\u0160\072\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\u0163\003\112" +
    "\062\u01b7\063\u0165\064\u0159\065\u0164\066\u01ad\067\u015b\070" +
    "\u015f\071\u0160\072\u0162\001\001\000\002\001\001\000\030" +
    "\002\u0163\003\112\062\u01b9\063\u0165\064\u0159\065\u0164\066" +
    "\u01ad\067\u015b\070\u015f\071\u0160\072\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\135\001\001\000" +
    "\002\001\001\000\010\134\u01be\135\u017f\136\u017d\001\001" +
    "\000\030\002\u0163\003\112\062\u01bf\063\u0165\064\u0159\065" +
    "\u0164\066\u01ad\067\u015b\070\u015f\071\u0160\072\u0162\001\001" +
    "\000\002\001\001\000\010\134\u01c1\135\u017f\136\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private JTextArea textArea;
	private List<String> listaErrores;
	private List<Instruccion> listaInstrucciones;
	private List<Instruccion> listaInstruccionesBloques;
	private List<String> codigoHtml;
	private boolean bloqueActivo; 
	//private HashMap<String, String> codigoHtml;

	private String codigoHtmlFinal;
	private JFramePrincipal panel;
	private String ejecucion;
        private int indexTab;

	public parser(Lexer lexer, JFramePrincipal panel, int indexTab) {
		super(lexer);
		this.panel = panel;
		this.textArea = panel.getTxtErroresSintac();
		this.ejecucion = "enteros";
		this.listaErrores = new ArrayList();
		this.listaInstrucciones = new ArrayList();
		this.listaInstruccionesBloques = new ArrayList();
		this.codigoHtml = new ArrayList();
		this.codigoHtmlFinal = "";
		this.panel.inicializarTablasVariables();
		this.bloqueActivo = false;
                this.indexTab = indexTab;

	}
        public int retornarIndexTab(){
			return this.indexTab;
	}
        
	public void activarBloque(){
			bloqueActivo=true;
	}
	public void desactivarBloque(){
			bloqueActivo=false;
	}

	public boolean devolverBloqueActivo(){
			return this.bloqueActivo;

	}

	public JFramePrincipal devolverPanel(){
			return this.panel;
	}

	public void reiniciarListaInstruciiones(){
			this.listaInstrucciones = new ArrayList();

	}
	public void reiniciarListaInstruciionesBloques(){
			this.listaInstruccionesBloques = new ArrayList();

	}
	public void reiniciarCodigoHtml(){
			this.codigoHtml = new ArrayList();

	}

	public void reiniciarCodigoHtmlFinal(){
			this.codigoHtmlFinal = "";

	}

	public List<Instruccion> devolverListaInstrucciones(){
			return this.listaInstrucciones;

	}

	public List<Instruccion> devolverListaInstruccionesBloques(){
			return this.listaInstruccionesBloques;

	}

	public List<String> devolverCodigoHtml(){
			return this.codigoHtml;

	}
	public String devolverCodigoHtmlFinal(){
			return this.codigoHtmlFinal;

	}

	public void agregarInstruccion(Instruccion instruccion){
			this.listaInstrucciones.add(instruccion);

	}
	public void agregarInstruccionBloques(Instruccion instruccion){
			this.listaInstruccionesBloques.add(instruccion);

	}
	public void agregarCodigoHtml(String instruccion){
			this.codigoHtml.add(instruccion);
	}
	public void agregarCodigoHtmlFinal(String instruccion){
			this.codigoHtmlFinal += instruccion;
	}

	public void limpiarListas(){
            listaErrores.clear();
    }
	public void syntax_error(Symbol cur_token) {
		String error = "Error Sintactico en " + "Linea: "+(cur_token.left)+"	Columna: "+(cur_token.right)
			 + " con el  Token: " + cur_token.value;
		System.out.println(error);
		listaErrores.add(error);
		textArea.append("\nEstructura invalida:\n" + error);
		this.panel.agregarErrorSintactico(cur_token.left,cur_token.right,error,indexTab);
		this.panel.agregarError(cur_token.left,cur_token.right,error,indexTab);
	}

	public void unrecovered_sintax_error(Symbol cur_token) throws java.lang.Exception{
		String error = "Error Sintactico en " + "Linea: "+(cur_token.left)+"	Columna: "+(cur_token.right)
			 + " con el  Token: " + cur_token.value;
		System.out.println(error);
		listaErrores.add(error);
		textArea.append("\nEstructura invalida:\n" + error);
		this.panel.agregarErrorSintactico(cur_token.left,cur_token.right,error,indexTab);
		this.panel.agregarError(cur_token.left,cur_token.right,error,indexTab);

	}

	public void ejecutarInstruccion(Instruccion instruccion) {
		if (instruccion != null) {
				instruccion.ejecutar();
		}
	}

	public String ejecutarInstrucciones(List<Instruccion> lista) {
		String codigoHtml = "";

		if (!lista.isEmpty()) {
				for(Instruccion instruccion:lista){
						instruccion.ejecutar();
						codigoHtml += instruccion.recuperarTexto();
				}
				
		}

		return codigoHtml;
	}

	public Integer retornarVariable(String nombre){
			Integer var = null;
			/* code */
				if (this.panel.verificarVariableInteger(nombre)){
					/* existe la variable a usar */
					if (this.panel.retornarVariableInteger(nombre)!=null){
						/* code */
						var = this.panel.retornarVariableInteger(nombre);
					} else {
							String error = "\nError Semantico:\n La variable "+nombre+" no tiene valor asignado...";
							listaErrores.add(error);
							textArea.append( error);
							var = 1;
							this.panel.agregarErrorSemantico(1,1,error,indexTab);
					}
					

				} else {
						String error = "\nError Semantico:\n La variable "+nombre+" no existe y no se puede usar...";
						listaErrores.add(error);
						textArea.append( error);
						this.panel.agregarErrorSemantico(1,1,error,indexTab);

				}

			return var;

	}



	/*lista que devuelve los errores encontrados*/
	public List<String> devolverErrores(){
			return listaErrores;
	}
	///NUEVOS METODOS

	public Boolean evaluarCondicionRelacional(Integer v1, Integer v2, String op){
			switch (op){
				case "<" : {
					if (v1.intValue()<v2.intValue()){
							return new Boolean(Boolean.TRUE);
					} else {
							return new Boolean(Boolean.FALSE);
					}	
					
				}
				case ">" : {
					if (v1.intValue()>v2.intValue()){
							return new Boolean(Boolean.TRUE);
					} else {
							return new Boolean(Boolean.FALSE);
					}	

					
				}
				case "<=" : {
					if (v1.intValue()<=v2.intValue()){
							return new Boolean(Boolean.TRUE);
					} else {
							return new Boolean(Boolean.FALSE);
					}	
					
				}
				case ">=" : {
					if (v1.intValue()>=v2.intValue()){
							return new Boolean(Boolean.TRUE);
					} else {
							return new Boolean(Boolean.FALSE);
					}	
					
				}
				case "<>" : {
					if (v1.intValue()!=v2.intValue()){
							return new Boolean(Boolean.TRUE);
					} else {
							return new Boolean(Boolean.FALSE);
					}	
					
				}

			}
			return null;

	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // tipo_variable ::= STRING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // tipo_variable ::= BOOLEAN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // tipo_variable ::= INTEGER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_variable",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // simbolos_esp ::= HREF 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // simbolos_esp ::= A 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // simbolos_esp ::= BLOCKQUOTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // simbolos_esp ::= HR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // simbolos_esp ::= LI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // simbolos_esp ::= OL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // simbolos_esp ::= UL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // simbolos_esp ::= FONT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // simbolos_esp ::= SUP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // simbolos_esp ::= SUB 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // simbolos_esp ::= BLINK 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // simbolos_esp ::= STRIKE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // simbolos_esp ::= I 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // simbolos_esp ::= U 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // simbolos_esp ::= B 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // simbolos_esp ::= P 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // simbolos_esp ::= CENTER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // simbolos_esp ::= BODY 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // simbolos_esp ::= TITLE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // simbolos_esp ::= HEAD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // simbolos_esp ::= HTML 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // simbolos_esp ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // simbolos_esp ::= TEXTO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+" "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // simbolos_esp ::= AMP_NTILDE_MINUS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // simbolos_esp ::= AMP_NTILDE_MAYUS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // simbolos_esp ::= AMP_UACUTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // simbolos_esp ::= AMP_OACUTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // simbolos_esp ::= AMP_IACUTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // simbolos_esp ::= AMP_EACUTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // simbolos_esp ::= AMP_AACUTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // simbolos_esp ::= AMP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // simbolos_esp ::= AMP_GT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // simbolos_esp ::= AMP_LT 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolos_esp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // texto ::= texto simbolos_esp 
            {
              String RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simbolos_espleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbolos_espright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simbolos_esp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=texto+simbolos_esp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // texto ::= simbolos_esp 
            {
              String RESULT =null;
		int simbolos_espleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbolos_espright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simbolos_esp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simbolos_esp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // atrib_href ::= HREF IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_href",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // atrib_name ::= NAME IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_name",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // atrib_width ::= WIDTH IGUAL COM PORCENTAJE COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_width",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // atrib_width ::= WIDTH IGUAL COM NUMERO_ENTERO COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+String.valueOf(e4)+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_width",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // atrib_start ::= START IGUAL COM NUMERO_ENTERO COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+String.valueOf(e4)+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_start",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // atrib_tipo_caracter ::= TYPE IGUAL COM texto COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+String.valueOf(e4)+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_tipo_caracter",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // atrib_tipo_caracter ::= TYPE IGUAL COM NUMERO_ENTERO COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+String.valueOf(e4)+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_tipo_caracter",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // atrib_type ::= TYPE IGUAL COM TIPO_LISTA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_type",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // atrib_color ::= COLOR IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_color",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // atrib_color ::= COLOR IGUAL COM CONST_COLOR COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_color",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // atrib_bgcolor ::= BGCOLOR IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_bgcolor",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // atrib_bgcolor ::= BGCOLOR IGUAL COM CONST_COLOR COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_bgcolor",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // atrib_face ::= FACE IGUAL COM TIPO_LETRA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_face",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // atrib_size ::= SIZE IGUAL COM NUMERO_ENTERO COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+String.valueOf(e4)+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_size",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // atrib_align ::= ALIGN IGUAL COM ALINEACION COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_align",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // atrib_link ::= LINK IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_link",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // atrib_link ::= LINK IGUAL COM CONST_COLOR COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_link",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // atrib_text ::= TEXT IGUAL COM ANCLA_ETIQUETA COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_text",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // atrib_text ::= TEXT IGUAL COM CONST_COLOR COM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1+e2+e3+e4+e5; System.out.println("ATRIBUTO: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atrib_text",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // atributos_a ::= atrib_href 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_a",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // atributos_a ::= atrib_name 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_a",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // atributos_hr ::= atrib_size 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_hr",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // atributos_hr ::= atrib_width 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_hr",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // atributos_hr ::= atrib_align 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_hr",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // n_atributos_hr ::= n_atributos_hr atributos_hr 
            {
              String RESULT =null;
		int n_atributos_hrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_atributos_hrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n_atributos_hr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributos_hrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_hrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_hr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n_atributos_hr+atributos_hr; System.out.println("Otro atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_hr",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // n_atributos_hr ::= atributos_hr 
            {
              String RESULT =null;
		int atributos_hrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_hrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_hr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = atributos_hr; System.out.println("Un nuevo atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_hr",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // et_li ::= ABRE LI CIERRA texto 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<li>"+e3+"\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_li",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // n_et_li ::= n_et_li et_li 
            {
              String RESULT =null;
		int n_et_lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_et_liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n_et_li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int et_lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int et_liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String et_li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=n_et_li+et_li; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_et_li",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // n_et_li ::= et_li 
            {
              String RESULT =null;
		int et_lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int et_liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String et_li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=et_li; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_et_li",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // atributos_ol ::= atrib_start 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_ol",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // atributos_ol ::= atrib_tipo_caracter 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_ol",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // n_atributos_ol ::= n_atributos_ol atributos_ol 
            {
              String RESULT =null;
		int n_atributos_olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_atributos_olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n_atributos_ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributos_olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n_atributos_ol+atributos_ol; System.out.println("Otro atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_ol",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // n_atributos_ol ::= atributos_ol 
            {
              String RESULT =null;
		int atributos_olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = atributos_ol; System.out.println("Un nuevo atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_ol",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // atributos_ul ::= atrib_type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_ul",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // atributos_font ::= atrib_color 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_font",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // atributos_font ::= atrib_face 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_font",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // atributos_font ::= atrib_align 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_font",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // atributos_font ::= atrib_size 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_font",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // n_atributos_font ::= n_atributos_font atributos_font 
            {
              String RESULT =null;
		int n_atributos_fontleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_atributos_fontright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n_atributos_font = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributos_fontleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_fontright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_font = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n_atributos_font+atributos_font; System.out.println("Otro atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_font",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // n_atributos_font ::= atributos_font 
            {
              String RESULT =null;
		int atributos_fontleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_fontright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_font = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = atributos_font; System.out.println("Un nuevo atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_font",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // atributos_body ::= atrib_link 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_body",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // atributos_body ::= atrib_text 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_body",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // atributos_body ::= atrib_bgcolor 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = " "+e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos_body",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // n_atributos_body ::= n_atributos_body atributos_body 
            {
              String RESULT =null;
		int n_atributos_bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n_atributos_bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n_atributos_body = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributos_bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_body = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n_atributos_body+atributos_body; System.out.println("Otro atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_body",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // n_atributos_body ::= atributos_body 
            {
              String RESULT =null;
		int atributos_bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributos_bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String atributos_body = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =atributos_body; System.out.println("Un nuevo atributo: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("n_atributos_body",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // end_et_a ::= ABRE FIN A CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</a>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_a",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // et_a ::= ABRE A atributos_a CIERRA texto end_et_a 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<a "+e2+" >"+e4+e5+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_a",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // et_a ::= ABRE A CIERRA texto end_et_a 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<a>"+"\n"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_a",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // end_et_blockquote ::= ABRE FIN BLOCKQUOTE CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</blockquote>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_blockquote",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // et_blockquote ::= ABRE BLOCKQUOTE CIERRA texto end_et_blockquote 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<blockquote>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_blockquote",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // et_hr ::= ABRE HR n_atributos_hr CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<hr "+e2+" >"+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_hr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // et_hr ::= ABRE HR CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<hr>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_hr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // end_et_nobr ::= ABRE FIN NOBR CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</nobr>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_nobr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // et_nobr ::= ABRE NOBR CIERRA texto end_et_nobr 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "\n"+"<nobr>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_nobr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // et_br ::= ABRE BR CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "\n"+"<br>"+"\n"; System.out.println(" etiqueta:  "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_br",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // end_et_ol ::= ABRE FIN OL CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</ol>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_ol",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // et_ol ::= ABRE OL n_atributos_ol CIERRA n_et_li end_et_ol 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<ol "+e2+" >"+e4+e5+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_ol",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // et_ol ::= ABRE OL CIERRA n_et_li end_et_ol 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<ol>"+"\n"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_ol",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // end_et_ul ::= ABRE FIN UL CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</ul>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_ul",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // et_ul ::= ABRE UL atributos_ul CIERRA n_et_li end_et_ul 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<ul "+e2+" >"+e4+e5+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_ul",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // et_ul ::= ABRE UL CIERRA n_et_li end_et_ul 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<ul>"+"\n"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_ul",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // end_et_font ::= ABRE FIN FONT CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</font>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_font",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // et_font ::= ABRE FONT n_atributos_font CIERRA texto end_et_font 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<font "+e2+" >"+e4+e5+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_font",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // et_font ::= ABRE FONT CIERRA texto end_et_font 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<font>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_font",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // end_et_sup ::= ABRE FIN SUP CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</sup>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_sup",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // et_sup ::= ABRE SUP CIERRA texto end_et_sup 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<sup>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_sup",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // end_et_sub ::= ABRE FIN SUB CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</sub>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_sub",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // et_sub ::= ABRE SUB CIERRA texto end_et_sub 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<sub>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_sub",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // end_et_blink ::= ABRE FIN BLINK CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</blink>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_blink",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // et_blink ::= ABRE BLINK CIERRA texto end_et_blink 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<blink>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_blink",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // end_et_strike ::= ABRE FIN STRIKE CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</strike>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_strike",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // et_strike ::= ABRE STRIKE CIERRA texto end_et_strike 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<strike>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_strike",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // end_et_i ::= ABRE FIN I CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</i>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_i",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // et_i ::= ABRE I CIERRA texto end_et_i 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<i>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_i",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // end_et_u ::= ABRE FIN U CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</u>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_u",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // et_u ::= ABRE U CIERRA texto end_et_u 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<u>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_u",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // end_et_b ::= ABRE FIN B CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</b>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_b",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // et_b ::= ABRE B CIERRA texto end_et_b 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<b>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_b",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // end_et_p ::= ABRE FIN P CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</p>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_p",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // et_p ::= ABRE P atrib_align CIERRA texto end_et_p 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<p "+e2+" >"+e4+e5+"\n"; System.out.println(" etiqueta : "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_p",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // et_p ::= ABRE P CIERRA texto end_et_p 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<p>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_p",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // end_et_center ::= ABRE FIN CENTER CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</center>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_center",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // et_center ::= ABRE CENTER CIERRA texto end_et_center 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<center>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_center",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // end_et_body ::= ABRE FIN BODY CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</body>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // et_body ::= ABRE BODY n_atributos_body CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<body "+e2+" >"+"\n"; System.out.println(" etiqueta :  "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // et_body ::= ABRE BODY CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<body>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_body",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // end_et_title ::= ABRE FIN TITLE CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</title>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_title",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // et_title ::= ABRE TITLE CIERRA texto end_et_title 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<title>"+e3+e4+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_title",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // end_et_head ::= ABRE FIN HEAD CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</head>"+"\n"; System.out.println(" etiqueta:  "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_head",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // et_head ::= ABRE HEAD CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<head>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_head",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // end_et_html ::= ABRE FIN HTML CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "</html>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_et_html",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // et_html ::= ABRE HTML CIERRA 
            {
              String RESULT =null;
		int e0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= "<html>"+"\n"; System.out.println(" etiqueta: "+RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("et_html",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operador_relacional ::= DIFERENTE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_relacional ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_relacional ::= MENOR_IGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_relacional ::= CIERRA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_relacional ::= ABRE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_relacional ::= IGUAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exprLogic3 ::= PARENT_A exprLogic PARENT_C 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e2.booleanValue(); System.out.println("operacion logica con parentesis: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exprLogic3 ::= FALSE 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(Boolean.FALSE); System.out.println("Devolver false: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprLogic3 ::= TRUE 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(Boolean.TRUE); System.out.println("Devolver true: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exprLogic2 ::= exprLogic3 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprLogic2 ::= condicion_relacional OR condicion_relacional 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(e1.booleanValue() || e3.booleanValue()); System.out.printf(" operacion OR con dos condiciones relacionales"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprLogic2 ::= condicion_relacional AND condicion_relacional 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(e1.booleanValue() && e3.booleanValue()); System.out.printf(" operacion AND con dos condiciones relacionales"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprLogic ::= exprLogic2 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	System.out.printf(" otra peracion logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exprLogic ::= exprLogic OR exprLogic2 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(e1.booleanValue() || e3.booleanValue()); System.out.printf(" operacion OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprLogic ::= exprLogic AND exprLogic2 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Boolean(e1.booleanValue() && e3.booleanValue()); System.out.printf(" operacion AND "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogic",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion_relacional ::= expr operador_relacional expr 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.evaluarCondicionRelacional(e1,e3,e2); System.out.println("Condicion relacional: ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_relacional",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion ::= exprLogic 
            {
              Boolean RESULT =null;
		int exprLogicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprLogicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean exprLogic = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=exprLogic.booleanValue(); System.out.println("Condicion logica: ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion ::= condicion_relacional 
            {
              Boolean RESULT =null;
		int condicion_relacionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicion_relacionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean condicion_relacional = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=condicion_relacional.booleanValue(); System.out.println("Condicion relacional: ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print ::= texto 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1;  System.out.println("PRINT de variable: ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print ::= PARAMETRO_TEXTO 
            {
              String RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e4.substring(1, e4.length()-1).trim(); System.out.println("PRINT de texto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prints ::= prints COMA print 
            {
              String RESULT =null;
		int printsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int printsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String prints = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String print = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarCodigoHtml(print); System.out.println("Otro PRINT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prints",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prints ::= print 
            {
              String RESULT =null;
		int printleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int printright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String print = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarCodigoHtml(print); System.out.println("Un PRINT: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prints",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // escritura ::= PRINT error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // escritura ::= PRINT PARENT_A prints PARENT_C PT_COMA 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPrint(parser.devolverCodigoHtml(),parser.devolverPanel(),e1); parser.reiniciarCodigoHtml(); System.out.println("Instruccion PRINT Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclo_for ::= FOR error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclo_for ::= FOR asignacion TO expr bloques 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e6 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruccion> e7 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionFor((InstruccionAsignacion)e2,e6,e7,e1); System.out.println("Instruccion FOR Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclo_while ::= WHILE error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclo_while ::= WHILE condicion bloques 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruccion> e3 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionWhile(e2,e3,e1); System.out.println("Instruccion WHILE Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicional ::= IF error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicional ::= IF condicion THEN bloques ELSE bloques 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruccion> e4 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruccion> e6 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionIF(e2,e4,e6,e1); System.out.println("Instruccion IF Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= VAR texto DOS_PT tipo_variable PT_COMA 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(e2,e4,parser.devolverPanel(),e1,parser.retornarIndexTab()); System.out.println("Instruccion Declaracion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion2 ::= texto DOS_PT_IGUAL exprLogic PT_COMA 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(e1,e3,"BOOLEAN",parser.devolverPanel(),e2,parser.retornarIndexTab()); System.out.println("Instruccion Asignacion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion2 ::= texto DOS_PT_IGUAL exprLogic 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e3 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(e1,e3,"BOOLEAN",parser.devolverPanel(),e2,parser.retornarIndexTab()); System.out.println("Instruccion Asignacion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= texto DOS_PT_IGUAL expr PT_COMA 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(e1,e3,"INTEGER",parser.devolverPanel(),e2,parser.retornarIndexTab()); System.out.println("Instruccion Asignacion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= texto DOS_PT_IGUAL expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(e1,e3,"INTEGER",parser.devolverPanel(),e2,parser.retornarIndexTab()); System.out.println("Instruccion Asignacion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr3 ::= PARENT_A expr PARENT_C 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr3 ::= IDENTIFICADOR 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.retornarVariable(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr3 ::= NUMERO_ENTERO 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr2 ::= expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr2 ::= expr2 FIN expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() / e3.intValue()); System.out.printf(" Division = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr2 ::= expr2 MULT expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() * e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr RESTA expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() - e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr SUMA expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() + e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= escritura 
            {
              Instruccion RESULT =null;
		int escrituraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int escrituraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion escritura = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= escritura; System.out.println("Instruccion Ingresada Print: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= asignacion2 
            {
              Instruccion RESULT =null;
		int asignacion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion asignacion2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= asignacion2; System.out.println("Instruccion Ingresada Asignacion: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= asignacion 
            {
              Instruccion RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion asignacion = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= asignacion; System.out.println("Instruccion Ingresada Asignacion: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion declaracion = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= declaracion; System.out.println("Instruccion Ingresada Declaracion de variable: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= ciclo_for 
            {
              Instruccion RESULT =null;
		int ciclo_forleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciclo_forright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion ciclo_for = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ciclo_for; System.out.println("Instruccion Ingresada ciclo_for: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= ciclo_while 
            {
              Instruccion RESULT =null;
		int ciclo_whileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciclo_whileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion ciclo_while = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ciclo_while; System.out.println("Instruccion Ingresada ciclo_while: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= condicional 
            {
              Instruccion RESULT =null;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion condicional = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=condicional; System.out.println("Instruccion Ingresada condicional: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarInstruccion(instruccion); System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarInstruccion(instruccion); System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloques ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarInstruccion(instruccion); RESULT= parser.devolverListaInstrucciones(); parser.reiniciarListaInstruciiones(); System.out.println(" UN BLOQUE CON una sola instruccion ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloques",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloques ::= BEGIN CORCHETE_A instrucciones CORCHETE_C END PT_COMA 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= parser.devolverListaInstrucciones(); parser.reiniciarListaInstruciiones(); System.out.println(" UN BLOQUE CON VARIAS instrucciones ");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloques",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // codigo_embebido ::= ABRE_EMBE instrucciones CIERRA_EMBE 
            {
              List<Instruccion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= parser.devolverListaInstrucciones(); parser.reiniciarListaInstruciiones(); System.out.println(" UN BLOQUE CON instrucciones en codigo embebido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_embebido",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_html ::= error 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ERROR ACCION NO EXISTE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion_html ::= codigo_embebido 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruccion> e1 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= parser.ejecutarInstrucciones(e1); System.out.println("SE EJECUTO EL CODIGO EMBEBIDO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_html ::= end_et_html 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_html ::= end_et_body 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion_html ::= et_body 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_html ::= et_a 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion_html ::= et_blockquote 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion_html ::= et_hr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion_html ::= et_nobr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion_html ::= et_br 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion_html ::= et_ul 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion_html ::= et_ol 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion_html ::= et_font 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion_html ::= et_sup 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion_html ::= et_sub 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion_html ::= et_blink 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion_html ::= et_strike 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_html ::= et_i 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_html ::= et_u 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion_html ::= et_b 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion_html ::= et_p 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion_html ::= et_center 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion_html ::= end_et_head 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion_html ::= et_title 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion_html ::= et_head 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion_html ::= et_html 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_html",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones_html ::= instrucciones_html instruccion_html 
            {
              Object RESULT =null;
		int instrucciones_htmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrucciones_htmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones_html = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instruccion_htmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccion_htmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String instruccion_html = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarCodigoHtmlFinal(instruccion_html); System.out.println(" VARIAS INSTRUCCIONES HTML"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_html",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones_html ::= instruccion_html 
            {
              Object RESULT =null;
		int instruccion_htmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccion_htmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String instruccion_html = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.agregarCodigoHtmlFinal(instruccion_html); System.out.println(" UNA SOLA INSTRUCCION HTML"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_html",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones_iniciales ::= instrucciones_html 
            {
              Object RESULT =null;
		int instrucciones_htmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrucciones_htmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instrucciones_html = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("un archivo de etiquetas HTML"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones_iniciales EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

