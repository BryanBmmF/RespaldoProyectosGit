/* The following code was generated by JFlex 1.7.0 */

package proyecto2compi1;

import static proyecto2compi1.sym2.*;
import java_cup.runtime.*;
import javax.swing.JTextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico 2.flex</tt>
 */
public class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\63\1\64\2\34\1\0\2\34\16\63\4\0\1\34\1\0\1\41"+
    "\1\42\1\62\1\43\1\46\10\0\1\40\1\44\11\45\2\0\1\36"+
    "\1\35\1\37\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\60\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\4\0"+
    "\1\33\1\0\1\52\1\2\1\53\1\61\1\55\1\6\1\51\1\10"+
    "\1\56\1\12\1\13\1\47\1\15\1\16\1\57\1\20\1\21\1\22"+
    "\1\23\1\50\1\54\1\26\1\27\1\30\1\31\1\32\4\0\41\63"+
    "\2\0\4\62\4\0\1\62\2\0\1\63\7\0\1\62\4\0\1\62"+
    "\5\0\27\62\1\0\37\62\1\0\u01ca\62\4\0\14\62\16\0\5\62"+
    "\7\0\1\62\1\0\1\62\21\0\160\63\5\62\1\0\2\62\2\0"+
    "\4\62\10\0\1\62\1\0\3\62\1\0\1\62\1\0\24\62\1\0"+
    "\123\62\1\0\213\62\1\0\5\63\2\0\236\62\11\0\46\62\2\0"+
    "\1\62\7\0\47\62\7\0\1\62\1\0\55\63\1\0\1\63\1\0"+
    "\2\63\1\0\2\63\1\0\1\63\10\0\33\62\5\0\3\62\15\0"+
    "\5\63\6\0\1\62\4\0\13\63\5\0\53\62\37\63\4\0\2\62"+
    "\1\63\143\62\1\0\1\62\10\63\1\0\6\63\2\62\2\63\1\0"+
    "\4\63\2\62\12\63\3\62\2\0\1\62\17\0\1\63\1\62\1\63"+
    "\36\62\33\63\2\0\131\62\13\63\1\62\16\0\12\63\41\62\11\63"+
    "\2\62\4\0\1\62\5\0\26\62\4\63\1\62\11\63\1\62\3\63"+
    "\1\62\5\63\22\0\31\62\3\63\104\0\1\62\1\0\13\62\67\0"+
    "\33\63\1\0\4\63\66\62\3\63\1\62\22\63\1\62\7\63\12\62"+
    "\2\63\2\0\12\63\1\0\7\62\1\0\7\62\1\0\3\63\1\0"+
    "\10\62\2\0\2\62\2\0\26\62\1\0\7\62\1\0\1\62\3\0"+
    "\4\62\2\0\1\63\1\62\7\63\2\0\2\63\2\0\3\63\1\62"+
    "\10\0\1\63\4\0\2\62\1\0\3\62\2\63\2\0\12\63\4\62"+
    "\7\0\1\62\5\0\3\63\1\0\6\62\4\0\2\62\2\0\26\62"+
    "\1\0\7\62\1\0\2\62\1\0\2\62\1\0\2\62\2\0\1\63"+
    "\1\0\5\63\4\0\2\63\2\0\3\63\3\0\1\63\7\0\4\62"+
    "\1\0\1\62\7\0\14\63\3\62\1\63\13\0\3\63\1\0\11\62"+
    "\1\0\3\62\1\0\26\62\1\0\7\62\1\0\2\62\1\0\5\62"+
    "\2\0\1\63\1\62\10\63\1\0\3\63\1\0\3\63\2\0\1\62"+
    "\17\0\2\62\2\63\2\0\12\63\1\0\1\62\17\0\3\63\1\0"+
    "\10\62\2\0\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0"+
    "\5\62\2\0\1\63\1\62\7\63\2\0\2\63\2\0\3\63\10\0"+
    "\2\63\4\0\2\62\1\0\3\62\2\63\2\0\12\63\1\0\1\62"+
    "\20\0\1\63\1\62\1\0\6\62\3\0\3\62\1\0\4\62\3\0"+
    "\2\62\1\0\1\62\1\0\2\62\3\0\2\62\3\0\3\62\3\0"+
    "\14\62\4\0\5\63\3\0\3\63\1\0\4\63\2\0\1\62\6\0"+
    "\1\63\16\0\12\63\11\0\1\62\7\0\3\63\1\0\10\62\1\0"+
    "\3\62\1\0\27\62\1\0\12\62\1\0\5\62\3\0\1\62\7\63"+
    "\1\0\3\63\1\0\4\63\7\0\2\63\1\0\2\62\6\0\2\62"+
    "\2\63\2\0\12\63\22\0\2\63\1\0\10\62\1\0\3\62\1\0"+
    "\27\62\1\0\12\62\1\0\5\62\2\0\1\63\1\62\7\63\1\0"+
    "\3\63\1\0\4\63\7\0\2\63\7\0\1\62\1\0\2\62\2\63"+
    "\2\0\12\63\1\0\2\62\17\0\2\63\1\0\10\62\1\0\3\62"+
    "\1\0\51\62\2\0\1\62\7\63\1\0\3\63\1\0\4\63\1\62"+
    "\10\0\1\63\10\0\2\62\2\63\2\0\12\63\12\0\6\62\2\0"+
    "\2\63\1\0\22\62\3\0\30\62\1\0\11\62\1\0\1\62\2\0"+
    "\7\62\3\0\1\63\4\0\6\63\1\0\1\63\1\0\10\63\22\0"+
    "\2\63\15\0\60\62\1\63\2\62\7\63\4\0\10\62\10\63\1\0"+
    "\12\63\47\0\2\62\1\0\1\62\2\0\2\62\1\0\1\62\2\0"+
    "\1\62\6\0\4\62\1\0\7\62\1\0\3\62\1\0\1\62\1\0"+
    "\1\62\2\0\2\62\1\0\4\62\1\63\2\62\6\63\1\0\2\63"+
    "\1\62\2\0\5\62\1\0\1\62\1\0\6\63\2\0\12\63\2\0"+
    "\4\62\40\0\1\62\27\0\2\63\6\0\12\63\13\0\1\63\1\0"+
    "\1\63\1\0\1\63\4\0\2\63\10\62\1\0\44\62\4\0\24\63"+
    "\1\0\2\63\5\62\13\63\1\0\44\63\11\0\1\63\71\0\53\62"+
    "\24\63\1\62\12\63\6\0\6\62\4\63\4\62\3\63\1\62\3\63"+
    "\2\62\7\63\3\62\4\63\15\62\14\63\1\62\17\63\2\0\46\62"+
    "\1\0\1\62\5\0\1\62\2\0\53\62\1\0\u014d\62\1\0\4\62"+
    "\2\0\7\62\1\0\1\62\1\0\4\62\2\0\51\62\1\0\4\62"+
    "\2\0\41\62\1\0\4\62\2\0\7\62\1\0\1\62\1\0\4\62"+
    "\2\0\17\62\1\0\71\62\1\0\4\62\2\0\103\62\2\0\3\63"+
    "\40\0\20\62\20\0\125\62\14\0\u026c\62\2\0\21\62\1\0\32\62"+
    "\5\0\113\62\3\0\3\62\17\0\15\62\1\0\4\62\3\63\13\0"+
    "\22\62\3\63\13\0\22\62\2\63\14\0\15\62\1\0\3\62\1\0"+
    "\2\63\14\0\64\62\40\63\3\0\1\62\3\0\2\62\1\63\2\0"+
    "\12\63\41\0\3\63\2\0\12\63\6\0\130\62\10\0\51\62\1\63"+
    "\1\62\5\0\106\62\12\0\35\62\3\0\14\63\4\0\14\63\12\0"+
    "\12\63\36\62\2\0\5\62\13\0\54\62\4\0\21\63\7\62\2\63"+
    "\6\0\12\63\46\0\27\62\5\63\4\0\65\62\12\63\1\0\35\63"+
    "\2\0\13\63\6\0\12\63\15\0\1\62\130\0\5\63\57\62\21\63"+
    "\7\62\4\0\12\63\21\0\11\63\14\0\3\63\36\62\15\63\2\62"+
    "\12\63\54\62\16\63\14\0\44\62\24\63\10\0\12\63\3\0\3\62"+
    "\12\63\44\62\122\0\3\63\1\0\25\63\4\62\1\63\4\62\3\63"+
    "\2\62\11\0\300\62\47\63\25\0\4\63\u0116\62\2\0\6\62\2\0"+
    "\46\62\2\0\6\62\2\0\10\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\37\62\2\0\65\62\1\0\7\62\1\0\1\62\3\0"+
    "\3\62\1\0\7\62\3\0\4\62\2\0\6\62\4\0\15\62\5\0"+
    "\3\62\1\0\7\62\16\0\5\63\32\0\5\63\20\0\2\62\23\0"+
    "\1\62\13\0\5\63\5\0\6\63\1\0\1\62\15\0\1\62\20\0"+
    "\15\62\3\0\33\62\25\0\15\63\4\0\1\63\3\0\14\63\21\0"+
    "\1\62\4\0\1\62\2\0\12\62\1\0\1\62\3\0\5\62\6\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\4\62\1\0\13\62\2\0"+
    "\4\62\5\0\5\62\4\0\1\62\21\0\51\62\u0a77\0\57\62\1\0"+
    "\57\62\1\0\205\62\6\0\4\62\3\63\2\62\14\0\46\62\1\0"+
    "\1\62\5\0\1\62\2\0\70\62\7\0\1\62\17\0\1\63\27\62"+
    "\11\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62"+
    "\1\0\7\62\1\0\7\62\1\0\7\62\1\0\40\63\57\0\1\62"+
    "\u01d5\0\3\62\31\0\11\62\6\63\1\0\5\62\2\0\5\62\4\0"+
    "\126\62\2\0\2\63\2\0\3\62\1\0\132\62\1\0\4\62\5\0"+
    "\51\62\3\0\136\62\21\0\33\62\65\0\20\62\u0200\0\u19b6\62\112\0"+
    "\u51cd\62\63\0\u048d\62\103\0\56\62\2\0\u010d\62\3\0\20\62\12\63"+
    "\2\62\24\0\57\62\1\63\4\0\12\63\1\0\31\62\7\0\1\63"+
    "\120\62\2\63\45\0\11\62\2\0\147\62\2\0\4\62\1\0\4\62"+
    "\14\0\13\62\115\0\12\62\1\63\3\62\1\63\4\62\1\63\27\62"+
    "\5\63\20\0\1\62\7\0\64\62\14\0\2\63\62\62\21\63\13\0"+
    "\12\63\6\0\22\63\6\62\3\0\1\62\4\0\12\63\34\62\10\63"+
    "\2\0\27\62\15\63\14\0\35\62\3\0\4\63\57\62\16\63\16\0"+
    "\1\62\12\63\46\0\51\62\16\63\11\0\3\62\1\63\10\62\2\63"+
    "\2\0\12\63\6\0\27\62\3\0\1\62\1\63\4\0\60\62\1\63"+
    "\1\62\3\63\2\62\2\63\5\62\2\63\1\62\1\63\1\62\30\0"+
    "\3\62\2\0\13\62\5\63\2\0\3\62\2\63\12\0\6\62\2\0"+
    "\6\62\2\0\6\62\11\0\7\62\1\0\7\62\221\0\43\62\10\63"+
    "\1\0\2\63\2\0\12\63\6\0\u2ba4\62\14\0\27\62\4\0\61\62"+
    "\u2104\0\u016e\62\2\0\152\62\46\0\7\62\14\0\5\62\5\0\1\62"+
    "\1\63\12\62\1\0\15\62\1\0\5\62\1\0\1\62\1\0\2\62"+
    "\1\0\2\62\1\0\154\62\41\0\u016b\62\22\0\100\62\2\0\66\62"+
    "\50\0\15\62\3\0\20\63\20\0\7\63\14\0\2\62\30\0\3\62"+
    "\31\0\1\62\6\0\5\62\1\0\207\62\2\0\1\63\4\0\1\62"+
    "\13\0\12\63\7\0\32\62\4\0\1\62\1\0\32\62\13\0\131\62"+
    "\3\0\6\62\2\0\6\62\2\0\6\62\2\0\3\62\3\0\2\62"+
    "\3\0\2\62\22\0\3\63\4\0\14\62\1\0\32\62\1\0\23\62"+
    "\1\0\2\62\1\0\17\62\2\0\16\62\42\0\173\62\105\0\65\62"+
    "\210\0\1\63\202\0\35\62\3\0\61\62\57\0\37\62\21\0\33\62"+
    "\65\0\36\62\2\0\44\62\4\0\10\62\1\0\5\62\52\0\236\62"+
    "\2\0\12\63\u0356\0\6\62\2\0\1\62\1\0\54\62\1\0\2\62"+
    "\3\0\1\62\2\0\27\62\252\0\26\62\12\0\32\62\106\0\70\62"+
    "\6\0\2\62\100\0\1\62\3\63\1\0\2\63\5\0\4\63\4\62"+
    "\1\0\3\62\1\0\33\62\4\0\3\63\4\0\1\63\40\0\35\62"+
    "\203\0\66\62\12\0\26\62\12\0\23\62\215\0\111\62\u03b7\0\3\63"+
    "\65\62\17\63\37\0\12\63\20\0\3\63\55\62\13\63\2\0\1\63"+
    "\22\0\31\62\7\0\12\63\6\0\3\63\44\62\16\63\1\0\12\63"+
    "\100\0\3\63\60\62\16\63\4\62\13\0\12\63\u04a6\0\53\62\15\63"+
    "\10\0\12\63\u0936\0\u036f\62\221\0\143\62\u0b9d\0\u042f\62\u33d1\0\u0239\62"+
    "\u04c7\0\105\62\13\0\1\62\56\63\20\0\4\63\15\62\u4060\0\2\62"+
    "\u2163\0\5\63\3\0\26\63\2\0\7\63\36\0\4\63\224\0\3\63"+
    "\u01bb\0\125\62\1\0\107\62\1\0\2\62\2\0\1\62\2\0\2\62"+
    "\2\0\4\62\1\0\14\62\1\0\1\62\1\0\7\62\1\0\101\62"+
    "\1\0\4\62\2\0\10\62\1\0\7\62\1\0\34\62\1\0\4\62"+
    "\1\0\5\62\1\0\1\62\3\0\7\62\1\0\u0154\62\2\0\31\62"+
    "\1\0\31\62\1\0\37\62\1\0\31\62\1\0\37\62\1\0\31\62"+
    "\1\0\37\62\1\0\31\62\1\0\37\62\1\0\31\62\1\0\10\62"+
    "\2\0\62\63\u1600\0\4\62\1\0\33\62\1\0\2\62\1\0\1\62"+
    "\2\0\1\62\1\0\12\62\1\0\4\62\1\0\1\62\1\0\1\62"+
    "\6\0\1\62\4\0\1\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\2\62\1\0\1\62\2\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\2\62\1\0\1\62\2\0\4\62"+
    "\1\0\7\62\1\0\4\62\1\0\4\62\1\0\1\62\1\0\12\62"+
    "\1\0\21\62\5\0\3\62\1\0\5\62\1\0\21\62\u1144\0\ua6d7\62"+
    "\51\0\u1035\62\13\0\336\62\u3fe2\0\u021e\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\63\36\0\140\63\200\0\360\63\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\6\1\1\4\5\1\1\5"+
    "\3\1\1\6\2\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\1\2\16\1\17\6\1\1\20\11\1"+
    "\1\21\3\1\1\22\3\1\1\23\12\1\1\24\3\1"+
    "\1\25\1\26\46\1\1\27\6\1\1\30\1\31\10\1"+
    "\1\32\1\33\14\1\1\34\3\1\1\35\1\36\1\37"+
    "\2\1\1\40\1\41\1\42\1\1\1\43\1\44\1\1"+
    "\1\45\1\46\2\1\1\47\3\1\1\50\1\1\1\51"+
    "\11\1\1\52\1\53\1\1\1\54\3\1\1\55\3\1"+
    "\1\56\1\1\1\57\1\60\12\1\1\61\1\1\1\62"+
    "\7\1\1\63\2\1\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\3\1\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u013e\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u013e\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u013e\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u04f8\0\65\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u013e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u013e\0\u013e\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\65\0\65\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u013e\0\u1ab5\0\u1aea\0\u1b1f\0\u013e\0\u013e\0\u013e\0\u1b54"+
    "\0\u1b89\0\u013e\0\u013e\0\u013e\0\u1bbe\0\u013e\0\u013e\0\u1bf3"+
    "\0\u013e\0\u013e\0\u1c28\0\u1c5d\0\u013e\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u013e\0\u1d31\0\u013e\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u013e\0\u013e\0\u1f43\0\u013e"+
    "\0\u1f78\0\u1fad\0\u1fe2\0\u013e\0\u2017\0\u204c\0\u2081\0\u013e"+
    "\0\u20b6\0\u013e\0\u013e\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u013e\0\u22fd\0\u013e"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u013e"+
    "\0\u24a5\0\u24da\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u250f\0\u2544\0\u2579\0\u013e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\7\1\15\1\16\1\17\1\20"+
    "\1\21\1\7\1\22\1\23\1\24\1\25\1\7\1\26"+
    "\1\7\1\27\1\7\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\2\1\40\1\41\1\42\1\15"+
    "\1\24\1\11\1\3\1\5\1\25\1\7\1\13\1\20"+
    "\1\17\1\6\1\7\1\2\1\31\33\2\7\0\22\2"+
    "\1\0\1\2\13\7\1\43\4\7\1\44\1\45\10\7"+
    "\1\30\6\0\2\2\2\7\1\2\1\43\14\7\1\30"+
    "\1\2\6\7\1\46\4\7\1\47\2\7\1\50\2\7"+
    "\1\51\10\7\1\30\6\0\2\2\2\7\1\2\1\47"+
    "\1\7\1\46\5\7\1\50\4\7\1\30\1\2\4\7"+
    "\1\52\3\7\1\53\5\7\1\54\13\7\1\30\6\0"+
    "\2\2\2\7\1\2\6\7\1\52\1\53\1\54\4\7"+
    "\1\30\1\2\10\7\1\55\21\7\1\30\6\0\2\2"+
    "\2\7\1\2\7\7\1\55\5\7\1\30\1\2\32\7"+
    "\1\30\6\0\2\2\2\7\1\2\15\7\1\30\1\2"+
    "\1\56\15\7\1\57\5\7\1\60\5\7\1\30\6\0"+
    "\2\2\2\7\1\2\3\7\1\56\1\7\1\60\2\7"+
    "\1\57\4\7\1\30\1\2\21\7\1\61\10\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\4\7"+
    "\1\62\14\7\1\63\1\7\1\64\6\7\1\30\6\0"+
    "\2\2\2\7\1\2\1\7\1\64\4\7\1\62\6\7"+
    "\1\30\1\2\24\7\1\65\5\7\1\30\6\0\2\2"+
    "\2\7\1\2\5\7\1\65\7\7\1\30\1\2\4\7"+
    "\1\66\3\7\1\67\21\7\1\30\6\0\2\2\2\7"+
    "\1\2\6\7\1\66\1\67\5\7\1\30\1\2\1\70"+
    "\31\7\1\30\6\0\2\2\2\7\1\2\3\7\1\70"+
    "\11\7\1\30\1\2\1\71\15\7\1\72\13\7\1\30"+
    "\6\0\2\2\2\7\1\2\3\7\1\71\4\7\1\72"+
    "\4\7\1\30\1\2\13\7\1\73\16\7\1\30\6\0"+
    "\2\2\2\7\1\2\1\73\14\7\1\30\1\2\24\7"+
    "\1\74\5\7\1\30\6\0\2\2\2\7\1\2\5\7"+
    "\1\74\7\7\1\30\1\2\4\7\1\75\3\7\1\76"+
    "\21\7\1\30\6\0\2\2\2\7\1\2\6\7\1\75"+
    "\1\76\5\7\1\30\1\2\10\7\1\77\7\7\1\100"+
    "\2\7\1\101\1\102\5\7\1\30\6\0\2\2\2\7"+
    "\1\2\1\7\1\101\3\7\1\102\1\7\1\77\5\7"+
    "\1\30\1\2\4\7\1\103\3\7\1\104\17\7\1\105"+
    "\1\7\1\30\6\0\2\2\2\7\1\2\6\7\1\103"+
    "\1\104\5\7\1\30\1\2\13\7\1\106\16\7\1\30"+
    "\6\0\2\2\2\7\1\2\1\106\14\7\1\30\1\2"+
    "\7\7\1\107\1\110\21\7\1\30\6\0\2\2\2\7"+
    "\1\2\7\7\1\110\5\7\1\30\1\2\4\7\1\111"+
    "\25\7\1\30\6\0\2\2\2\7\1\2\6\7\1\111"+
    "\6\7\1\30\1\0\33\30\10\0\2\30\1\0\16\30"+
    "\65\0\33\112\7\0\22\112\1\0\33\2\7\0\1\2"+
    "\1\113\20\2\1\0\33\2\7\0\1\2\1\113\2\41"+
    "\16\2\1\0\16\2\1\114\14\2\7\0\5\2\1\115"+
    "\1\2\1\116\1\117\1\2\1\120\1\121\1\122\1\123"+
    "\1\124\3\2\1\0\1\2\10\7\1\125\21\7\1\30"+
    "\6\0\2\2\2\7\1\2\7\7\1\125\5\7\1\30"+
    "\1\2\24\7\1\126\5\7\1\30\6\0\2\2\2\7"+
    "\1\2\5\7\1\126\7\7\1\30\1\2\10\7\1\127"+
    "\21\7\1\30\6\0\2\2\2\7\1\2\7\7\1\127"+
    "\5\7\1\30\1\2\2\7\1\130\27\7\1\30\6\0"+
    "\2\2\2\7\1\2\4\7\1\130\10\7\1\30\1\2"+
    "\1\131\7\7\1\132\5\7\1\133\5\7\1\134\5\7"+
    "\1\30\6\0\2\2\2\7\1\2\3\7\1\131\1\7"+
    "\1\134\1\7\1\132\1\133\4\7\1\30\1\2\3\7"+
    "\1\135\26\7\1\30\6\0\2\2\2\7\1\2\12\7"+
    "\1\135\2\7\1\30\1\2\15\7\1\136\14\7\1\30"+
    "\6\0\2\2\2\7\1\2\11\7\1\136\3\7\1\30"+
    "\1\2\21\7\1\137\10\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\13\7\1\140\16\7\1\30"+
    "\6\0\2\2\2\7\1\2\1\140\14\7\1\30\1\2"+
    "\22\7\1\141\7\7\1\30\6\0\2\2\2\7\1\2"+
    "\15\7\1\30\1\2\2\7\1\142\27\7\1\30\6\0"+
    "\2\2\2\7\1\2\4\7\1\142\10\7\1\30\1\2"+
    "\15\7\1\143\14\7\1\30\6\0\2\2\2\7\1\2"+
    "\11\7\1\143\3\7\1\30\1\2\2\7\1\144\27\7"+
    "\1\30\6\0\2\2\2\7\1\2\4\7\1\144\10\7"+
    "\1\30\1\2\1\145\3\7\1\146\25\7\1\30\6\0"+
    "\2\2\2\7\1\2\3\7\1\145\2\7\1\146\6\7"+
    "\1\30\1\2\1\147\31\7\1\30\6\0\2\2\2\7"+
    "\1\2\3\7\1\147\11\7\1\30\1\2\4\7\1\150"+
    "\25\7\1\30\6\0\2\2\2\7\1\2\6\7\1\150"+
    "\6\7\1\30\1\2\14\7\1\151\15\7\1\30\6\0"+
    "\2\2\2\7\1\2\15\7\1\30\1\2\22\7\1\152"+
    "\7\7\1\30\6\0\2\2\2\7\1\2\15\7\1\30"+
    "\1\2\5\7\1\153\24\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\14\7\1\134\1\154\14\7"+
    "\1\30\6\0\2\2\2\7\1\2\11\7\1\154\3\7"+
    "\1\30\1\2\21\7\1\155\10\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\14\7\1\156\10\7"+
    "\1\145\4\7\1\30\6\0\2\2\2\7\1\2\15\7"+
    "\1\30\1\2\1\7\1\157\30\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\10\7\1\160\21\7"+
    "\1\30\6\0\2\2\2\7\1\2\7\7\1\160\5\7"+
    "\1\30\1\2\21\7\1\161\10\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\3\7\1\162\26\7"+
    "\1\30\6\0\2\2\2\7\1\2\12\7\1\162\2\7"+
    "\1\30\1\2\6\7\1\163\23\7\1\30\6\0\2\2"+
    "\2\7\1\2\2\7\1\163\12\7\1\30\1\2\13\7"+
    "\1\164\15\7\1\165\1\30\6\0\2\2\2\7\1\2"+
    "\1\164\14\7\1\30\1\2\24\7\1\166\5\7\1\30"+
    "\6\0\2\2\2\7\1\2\5\7\1\166\7\7\1\30"+
    "\1\2\1\167\20\7\1\170\10\7\1\30\6\0\2\2"+
    "\2\7\1\2\3\7\1\167\11\7\1\30\1\2\1\7"+
    "\1\171\15\7\1\172\12\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\1\173\26\7\1\174\2\7"+
    "\1\30\6\0\2\2\2\7\1\2\3\7\1\173\11\7"+
    "\1\30\1\2\23\7\1\175\6\7\1\30\6\0\2\2"+
    "\2\7\1\2\1\7\1\175\13\7\1\30\1\2\17\7"+
    "\1\176\12\7\1\30\6\0\2\2\2\7\1\2\15\7"+
    "\1\30\1\2\10\7\1\177\21\7\1\30\6\0\2\2"+
    "\2\7\1\2\7\7\1\177\5\7\1\30\1\2\3\7"+
    "\1\200\26\7\1\30\6\0\2\2\2\7\1\2\12\7"+
    "\1\200\2\7\1\30\1\2\13\7\1\201\16\7\1\30"+
    "\6\0\2\2\2\7\1\2\1\201\14\7\1\30\33\2"+
    "\7\0\6\2\1\202\13\2\1\0\33\2\7\0\6\2"+
    "\1\203\13\2\1\0\33\2\7\0\6\2\1\204\13\2"+
    "\1\0\33\2\7\0\10\2\1\205\11\2\1\0\33\2"+
    "\7\0\10\2\1\206\11\2\1\0\33\2\7\0\10\2"+
    "\1\207\11\2\1\0\33\2\7\0\10\2\1\210\11\2"+
    "\1\0\33\2\7\0\10\2\1\211\11\2\1\0\33\2"+
    "\7\0\6\2\1\212\13\2\1\0\1\2\6\7\1\213"+
    "\23\7\1\30\6\0\2\2\2\7\1\2\2\7\1\213"+
    "\12\7\1\30\1\2\1\162\31\7\1\30\6\0\2\2"+
    "\2\7\1\2\3\7\1\162\11\7\1\30\1\2\1\214"+
    "\31\7\1\30\6\0\2\2\2\7\1\2\3\7\1\214"+
    "\11\7\1\30\1\2\16\7\1\215\13\7\1\30\6\0"+
    "\2\2\2\7\1\2\10\7\1\215\4\7\1\30\1\2"+
    "\2\7\1\216\27\7\1\30\6\0\2\2\2\7\1\2"+
    "\4\7\1\216\10\7\1\30\1\2\15\7\1\217\14\7"+
    "\1\30\6\0\2\2\2\7\1\2\11\7\1\217\3\7"+
    "\1\30\1\2\2\7\1\220\27\7\1\30\6\0\2\2"+
    "\2\7\1\2\4\7\1\220\10\7\1\30\1\2\4\7"+
    "\1\162\25\7\1\30\6\0\2\2\2\7\1\2\6\7"+
    "\1\162\6\7\1\30\1\2\30\7\1\221\1\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\23\7"+
    "\1\222\6\7\1\30\6\0\2\2\2\7\1\2\1\7"+
    "\1\222\13\7\1\30\1\2\2\7\1\223\27\7\1\30"+
    "\6\0\2\2\2\7\1\2\4\7\1\223\10\7\1\30"+
    "\1\2\16\7\1\224\13\7\1\30\6\0\2\2\2\7"+
    "\1\2\10\7\1\224\4\7\1\30\1\2\2\7\1\225"+
    "\27\7\1\30\6\0\2\2\2\7\1\2\4\7\1\225"+
    "\10\7\1\30\1\2\4\7\1\226\25\7\1\30\6\0"+
    "\2\2\2\7\1\2\6\7\1\226\6\7\1\30\1\2"+
    "\23\7\1\227\6\7\1\30\6\0\2\2\2\7\1\2"+
    "\1\7\1\227\13\7\1\30\1\2\7\7\1\230\22\7"+
    "\1\30\6\0\2\2\2\7\1\2\15\7\1\30\1\2"+
    "\30\7\1\162\1\7\1\30\6\0\2\2\2\7\1\2"+
    "\15\7\1\30\1\2\4\7\1\231\25\7\1\30\6\0"+
    "\2\2\2\7\1\2\6\7\1\231\6\7\1\30\1\2"+
    "\3\7\1\232\26\7\1\30\6\0\2\2\2\7\1\2"+
    "\12\7\1\232\2\7\1\30\1\2\5\7\1\233\24\7"+
    "\1\30\6\0\2\2\2\7\1\2\15\7\1\30\1\2"+
    "\13\7\1\234\16\7\1\30\6\0\2\2\2\7\1\2"+
    "\1\234\14\7\1\30\1\2\23\7\1\235\6\7\1\30"+
    "\6\0\2\2\2\7\1\2\1\7\1\235\13\7\1\30"+
    "\1\2\23\7\1\236\6\7\1\30\6\0\2\2\2\7"+
    "\1\2\1\7\1\236\13\7\1\30\1\2\12\7\1\237"+
    "\17\7\1\30\6\0\2\2\2\7\1\2\15\7\1\30"+
    "\1\2\16\7\1\240\13\7\1\30\6\0\2\2\2\7"+
    "\1\2\10\7\1\240\4\7\1\30\1\2\4\7\1\241"+
    "\25\7\1\30\6\0\2\2\2\7\1\2\6\7\1\241"+
    "\6\7\1\30\1\2\21\7\1\242\10\7\1\30\6\0"+
    "\2\2\2\7\1\2\15\7\1\30\1\2\25\7\1\134"+
    "\4\7\1\30\6\0\2\2\2\7\1\2\15\7\1\30"+
    "\1\2\17\7\1\243\12\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\7\7\1\153\22\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\25\7"+
    "\1\244\4\7\1\30\6\0\2\2\2\7\1\2\15\7"+
    "\1\30\1\2\4\7\1\245\25\7\1\30\6\0\2\2"+
    "\2\7\1\2\6\7\1\245\6\7\1\30\1\2\1\246"+
    "\31\7\1\30\6\0\2\2\2\7\1\2\3\7\1\246"+
    "\11\7\1\30\1\2\21\7\1\247\10\7\1\30\6\0"+
    "\2\2\2\7\1\2\15\7\1\30\1\2\10\7\1\250"+
    "\21\7\1\30\6\0\2\2\2\7\1\2\7\7\1\250"+
    "\5\7\1\30\1\2\13\7\1\162\16\7\1\30\6\0"+
    "\2\2\2\7\1\2\1\162\14\7\1\30\1\2\23\7"+
    "\1\251\6\7\1\30\6\0\2\2\2\7\1\2\1\7"+
    "\1\251\13\7\1\30\1\2\13\7\1\252\16\7\1\30"+
    "\6\0\2\2\2\7\1\2\1\252\14\7\1\30\1\2"+
    "\4\7\1\253\25\7\1\30\6\0\2\2\2\7\1\2"+
    "\6\7\1\253\6\7\1\30\1\2\23\7\1\134\6\7"+
    "\1\30\6\0\2\2\2\7\1\2\1\7\1\134\13\7"+
    "\1\30\1\2\23\7\1\254\6\7\1\30\6\0\2\2"+
    "\2\7\1\2\1\7\1\254\13\7\1\30\1\2\13\7"+
    "\1\255\16\7\1\30\6\0\2\2\2\7\1\2\1\255"+
    "\14\7\1\30\33\2\7\0\14\2\1\256\5\2\1\0"+
    "\33\2\7\0\11\2\1\257\10\2\1\0\33\2\7\0"+
    "\11\2\1\260\10\2\1\0\33\2\7\0\11\2\1\261"+
    "\10\2\1\0\33\2\7\0\11\2\1\262\10\2\1\0"+
    "\33\2\7\0\11\2\1\263\10\2\1\0\33\2\7\0"+
    "\14\2\1\264\5\2\1\0\1\2\15\7\1\265\14\7"+
    "\1\30\6\0\2\2\2\7\1\2\11\7\1\265\3\7"+
    "\1\30\1\2\13\7\1\266\16\7\1\30\6\0\2\2"+
    "\2\7\1\2\1\266\14\7\1\30\1\2\13\7\1\267"+
    "\16\7\1\30\6\0\2\2\2\7\1\2\1\267\14\7"+
    "\1\30\1\2\12\7\1\162\17\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\12\7\1\270\17\7"+
    "\1\30\6\0\2\2\2\7\1\2\15\7\1\30\1\2"+
    "\12\7\1\271\17\7\1\30\6\0\2\2\2\7\1\2"+
    "\15\7\1\30\1\2\4\7\1\272\25\7\1\30\6\0"+
    "\2\2\2\7\1\2\6\7\1\272\6\7\1\30\1\2"+
    "\13\7\1\273\16\7\1\30\6\0\2\2\2\7\1\2"+
    "\1\273\14\7\1\30\1\2\21\7\1\274\10\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\22\7"+
    "\1\275\7\7\1\30\6\0\2\2\2\7\1\2\15\7"+
    "\1\30\1\2\15\7\1\162\14\7\1\30\6\0\2\2"+
    "\2\7\1\2\11\7\1\162\3\7\1\30\1\2\10\7"+
    "\1\276\21\7\1\30\6\0\2\2\2\7\1\2\7\7"+
    "\1\276\5\7\1\30\1\2\16\7\1\231\13\7\1\30"+
    "\6\0\2\2\2\7\1\2\10\7\1\231\4\7\1\30"+
    "\1\2\13\7\1\134\16\7\1\30\6\0\2\2\2\7"+
    "\1\2\1\134\14\7\1\30\1\2\4\7\1\277\25\7"+
    "\1\30\6\0\2\2\2\7\1\2\6\7\1\277\6\7"+
    "\1\30\1\2\21\7\1\273\10\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\23\7\1\300\6\7"+
    "\1\30\6\0\2\2\2\7\1\2\1\7\1\300\13\7"+
    "\1\30\1\2\12\7\1\301\17\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\4\7\1\302\25\7"+
    "\1\30\6\0\2\2\2\7\1\2\6\7\1\302\6\7"+
    "\1\30\1\2\7\7\1\303\22\7\1\30\6\0\2\2"+
    "\2\7\1\2\15\7\1\30\1\2\16\7\1\304\13\7"+
    "\1\30\6\0\2\2\2\7\1\2\10\7\1\304\4\7"+
    "\1\30\33\2\7\0\5\2\1\305\14\2\1\0\33\2"+
    "\7\0\12\2\1\306\7\2\1\0\33\2\7\0\12\2"+
    "\1\307\7\2\1\0\33\2\7\0\12\2\1\310\7\2"+
    "\1\0\33\2\7\0\12\2\1\311\7\2\1\0\33\2"+
    "\7\0\12\2\1\312\7\2\1\0\33\2\7\0\5\2"+
    "\1\313\14\2\1\0\1\2\16\7\1\314\13\7\1\30"+
    "\6\0\2\2\2\7\1\2\10\7\1\314\4\7\1\30"+
    "\1\2\20\7\1\315\11\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\21\7\1\316\10\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\4\7"+
    "\1\225\25\7\1\30\6\0\2\2\2\7\1\2\6\7"+
    "\1\225\6\7\1\30\1\2\10\7\1\126\21\7\1\30"+
    "\6\0\2\2\2\7\1\2\7\7\1\126\5\7\1\30"+
    "\1\2\5\7\1\317\24\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\21\7\1\162\10\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\1\2\4\7"+
    "\1\320\25\7\1\30\6\0\2\2\2\7\1\2\6\7"+
    "\1\320\6\7\1\30\1\2\26\7\1\162\3\7\1\30"+
    "\6\0\2\2\2\7\1\2\15\7\1\30\33\2\7\0"+
    "\17\2\1\321\2\2\1\0\33\2\7\0\6\2\1\322"+
    "\13\2\1\0\33\2\7\0\6\2\1\323\13\2\1\0"+
    "\33\2\7\0\6\2\1\324\13\2\1\0\33\2\7\0"+
    "\6\2\1\325\13\2\1\0\33\2\7\0\6\2\1\326"+
    "\13\2\1\0\33\2\7\0\17\2\1\327\2\2\1\0"+
    "\1\2\21\7\1\330\10\7\1\30\6\0\2\2\2\7"+
    "\1\2\15\7\1\30\1\2\24\7\1\331\5\7\1\30"+
    "\6\0\2\2\2\7\1\2\5\7\1\331\7\7\1\30"+
    "\1\2\10\7\1\332\21\7\1\30\6\0\2\2\2\7"+
    "\1\2\7\7\1\332\5\7\1\30\33\2\7\0\13\2"+
    "\1\333\6\2\1\0\33\2\7\0\13\2\1\334\6\2"+
    "\1\0\33\2\7\0\13\2\1\335\6\2\1\0\33\2"+
    "\7\0\13\2\1\336\6\2\1\0\33\2\7\0\13\2"+
    "\1\337\6\2\1\0\33\2\7\0\13\2\1\340\6\2"+
    "\1\0\33\2\7\0\13\2\1\341\6\2\1\0\1\2"+
    "\16\7\1\342\13\7\1\30\6\0\2\2\2\7\1\2"+
    "\10\7\1\342\4\7\1\30\1\2\4\7\1\343\25\7"+
    "\1\30\6\0\2\2\2\7\1\2\6\7\1\343\6\7"+
    "\1\30\1\2\23\7\1\344\6\7\1\30\6\0\2\2"+
    "\2\7\1\2\1\7\1\344\13\7\1\30\1\2\3\7"+
    "\1\236\26\7\1\30\6\0\2\2\2\7\1\2\12\7"+
    "\1\236\2\7\1\30\1\2\4\7\1\345\25\7\1\30"+
    "\6\0\2\2\2\7\1\2\6\7\1\345\6\7\1\30";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9646];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\27\1\6\11\307\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public String lexeme;
	public int linea;
	public int columna;
	public char c;
	JTextArea textArea;

	private Symbol symbol(int type) {
		return new Symbol(type, yyline+1, yycolumn+1);
	}

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline+1, yycolumn+1, value);
	}

	private void error(String error, int linea, int columna) {
		String mensaje = "Se detecto un Error Lexico en la  Linea:" + linea + "  Columna: " + columna+"  El error:"+error;
		System.out.println(mensaje);
		this.textArea.append("\n" + mensaje);
	}

	public Lexer2 (java.io.Reader entrada, JTextArea textArea) {
		this.zzReader = entrada;
		this.textArea = textArea;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2872) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.printf(" TEXTO: %s\n", yytext()); return symbol(TEXTO, yytext());
            } 
            // fall through
          case 60: break;
          case 2: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(A, yytext());
            } 
            // fall through
          case 61: break;
          case 3: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(B, yytext());
            } 
            // fall through
          case 62: break;
          case 4: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(I, yytext());
            } 
            // fall through
          case 63: break;
          case 5: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(P, yytext());
            } 
            // fall through
          case 64: break;
          case 6: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(U, yytext());
            } 
            // fall through
          case 65: break;
          case 7: 
            { System.out.printf(" IDENTIFICADOR: %s\n", yytext()); return symbol(IDENTIFICADOR, yytext());
            } 
            // fall through
          case 66: break;
          case 8: 
            { /* los ignoramos */
            } 
            // fall through
          case 67: break;
          case 9: 
            { System.out.printf(" IGUAL: %s\n", yytext()); return symbol(IGUAL, yytext());
            } 
            // fall through
          case 68: break;
          case 10: 
            { System.out.printf(" MENOR QUE: %s\n", yytext()); return symbol(ABRE, yytext());
            } 
            // fall through
          case 69: break;
          case 11: 
            { System.out.printf(" MAYOR QUE: %s\n", yytext()); return symbol(CIERRA, yytext());
            } 
            // fall through
          case 70: break;
          case 12: 
            { System.out.printf(" DIV: %s\n", yytext()); return symbol(FIN, yytext());
            } 
            // fall through
          case 71: break;
          case 13: 
            { System.out.printf(" COMILLA DOBLE: %s\n", yytext()); return symbol(COM, yytext());
            } 
            // fall through
          case 72: break;
          case 14: 
            { System.out.printf(" ENTERO: %s\n", yytext()); return symbol(NUMERO_ENTERO, new Integer(yytext()));
            } 
            // fall through
          case 73: break;
          case 15: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP, yytext());
            } 
            // fall through
          case 74: break;
          case 16: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(BR, yytext());
            } 
            // fall through
          case 75: break;
          case 17: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(HR, yytext());
            } 
            // fall through
          case 76: break;
          case 18: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(LI, yytext());
            } 
            // fall through
          case 77: break;
          case 19: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(OL, yytext());
            } 
            // fall through
          case 78: break;
          case 20: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(UL, yytext());
            } 
            // fall through
          case 79: break;
          case 21: 
            { System.out.printf(" ANCLA_ETIQUETA: %s\n", yytext()); return symbol(ANCLA_ETIQUETA, yytext());
            } 
            // fall through
          case 80: break;
          case 22: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(PORCENTAJE, yytext());
            } 
            // fall through
          case 81: break;
          case 23: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(CONST_COLOR, yytext());
            } 
            // fall through
          case 82: break;
          case 24: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(SUB, yytext());
            } 
            // fall through
          case 83: break;
          case 25: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(SUP, yytext());
            } 
            // fall through
          case 84: break;
          case 26: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_LT, yytext());
            } 
            // fall through
          case 85: break;
          case 27: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_GT, yytext());
            } 
            // fall through
          case 86: break;
          case 28: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(BODY, yytext());
            } 
            // fall through
          case 87: break;
          case 29: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(TIPO_LISTA, yytext());
            } 
            // fall through
          case 88: break;
          case 30: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(FACE, yytext());
            } 
            // fall through
          case 89: break;
          case 31: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(FONT, yytext());
            } 
            // fall through
          case 90: break;
          case 32: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(HEAD, yytext());
            } 
            // fall through
          case 91: break;
          case 33: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(HREF, yytext());
            } 
            // fall through
          case 92: break;
          case 34: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(HTML, yytext());
            } 
            // fall through
          case 93: break;
          case 35: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(ALINEACION, yytext());
            } 
            // fall through
          case 94: break;
          case 36: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(LINK, yytext());
            } 
            // fall through
          case 95: break;
          case 37: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(NAME, yytext());
            } 
            // fall through
          case 96: break;
          case 38: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(NOBR, yytext());
            } 
            // fall through
          case 97: break;
          case 39: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(SIZE, yytext());
            } 
            // fall through
          case 98: break;
          case 40: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(TEXT, yytext());
            } 
            // fall through
          case 99: break;
          case 41: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(TYPE, yytext());
            } 
            // fall through
          case 100: break;
          case 42: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(ALIGN, yytext());
            } 
            // fall through
          case 101: break;
          case 43: 
            { System.out.printf(" PARAMETRO: %s\n", yytext()); return symbol(TIPO_LETRA, yytext());
            } 
            // fall through
          case 102: break;
          case 44: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(BLINK, yytext());
            } 
            // fall through
          case 103: break;
          case 45: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(COLOR, yytext());
            } 
            // fall through
          case 104: break;
          case 46: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(START, yytext());
            } 
            // fall through
          case 105: break;
          case 47: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(TITLE, yytext());
            } 
            // fall through
          case 106: break;
          case 48: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(WIDTH, yytext());
            } 
            // fall through
          case 107: break;
          case 49: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(CENTER, yytext());
            } 
            // fall through
          case 108: break;
          case 50: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(STRIKE, yytext());
            } 
            // fall through
          case 109: break;
          case 51: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(BGCOLOR, yytext());
            } 
            // fall through
          case 110: break;
          case 52: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_NTILDE_MINUS, yytext());
            } 
            // fall through
          case 111: break;
          case 53: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_AACUTE, yytext());
            } 
            // fall through
          case 112: break;
          case 54: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_UACUTE, yytext());
            } 
            // fall through
          case 113: break;
          case 55: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_EACUTE, yytext());
            } 
            // fall through
          case 114: break;
          case 56: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_IACUTE, yytext());
            } 
            // fall through
          case 115: break;
          case 57: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_OACUTE, yytext());
            } 
            // fall through
          case 116: break;
          case 58: 
            { System.out.printf(" SIMBOLO: %s\n", yytext()); return symbol(AMP_NTILDE_MAYUS, yytext());
            } 
            // fall through
          case 117: break;
          case 59: 
            { System.out.printf(" ETIQUETA: %s\n", yytext()); return symbol(BLOCKQUOTE, yytext());
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer2 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer2 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer2(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
