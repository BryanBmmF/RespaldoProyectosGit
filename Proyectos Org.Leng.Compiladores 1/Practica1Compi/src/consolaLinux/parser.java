
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 27 01:20:53 CST 2019
//----------------------------------------------------

package consolaLinux;

import java_cup.runtime.*;
import consolaLinux.backend.comandos.*;
import consolaLinux.backend.comandos.interfaces.*;
import consolaLinux.backend.comandos.implementaciones.*;
import consolaLinux.backend.controladores.*;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 27 01:20:53 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\010\004\000\002\010" +
    "\006\000\002\011\004\000\002\011\004\000\002\012\003" +
    "\000\002\012\004\000\002\013\005\000\002\013\004\000" +
    "\002\014\005\000\002\014\004\000\002\015\007\000\002" +
    "\015\004\000\002\016\007\000\002\016\004\000\002\017" +
    "\007\000\002\017\005\000\002\017\004\000\002\020\005" +
    "\000\002\020\004\000\002\021\011\000\002\021\007\000" +
    "\002\021\004\000\002\002\004\000\002\002\003\000\002" +
    "\002\002\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\030\003\026\015\021\016\006\017\016\020" +
    "\031\021\020\022\017\023\005\024\011\025\027\026\007" +
    "\001\002\000\004\002\127\001\002\000\006\003\122\006" +
    "\123\001\002\000\010\002\uffdb\006\117\027\uffdb\001\002" +
    "\000\006\003\101\006\102\001\002\000\006\002\ufff6\027" +
    "\ufff6\001\002\000\006\003\073\006\074\001\002\000\006" +
    "\002\ufff8\027\ufff8\001\002\000\006\002\ufffb\027\ufffb\001" +
    "\002\000\006\002\ufffe\027\ufffe\001\002\000\006\002\ufffc" +
    "\027\ufffc\001\002\000\012\002\uffdb\003\067\006\071\027" +
    "\uffdb\001\002\000\006\003\062\006\063\001\002\000\006" +
    "\003\057\006\060\001\002\000\010\002\uffef\003\056\027" +
    "\uffef\001\002\000\006\002\ufff7\027\ufff7\001\002\000\006" +
    "\002\ufff5\027\ufff5\001\002\000\006\002\ufffd\027\ufffd\001" +
    "\002\000\006\002\ufff9\027\ufff9\001\002\000\006\002\ufff4" +
    "\027\ufff4\001\002\000\006\003\053\006\054\001\002\000" +
    "\006\002\ufffa\027\ufffa\001\002\000\006\003\035\006\036" +
    "\001\002\000\006\002\uffff\027\033\001\002\000\030\003" +
    "\026\015\021\016\006\017\016\020\031\021\020\022\017" +
    "\023\005\024\011\025\027\026\007\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffec\027\uffec\001\002\000\030" +
    "\004\050\015\041\016\051\017\047\020\037\021\044\022" +
    "\043\023\042\024\040\025\045\026\046\001\002\000\010" +
    "\002\uffd6\006\uffd6\027\uffd6\001\002\000\010\002\uffd2\006" +
    "\uffd2\027\uffd2\001\002\000\010\002\uffd7\006\uffd7\027\uffd7" +
    "\001\002\000\010\002\uffd3\006\uffd3\027\uffd3\001\002\000" +
    "\010\002\uffd4\006\uffd4\027\uffd4\001\002\000\010\002\uffd5" +
    "\006\uffd5\027\uffd5\001\002\000\010\002\uffd1\006\uffd1\027" +
    "\uffd1\001\002\000\010\002\uffd0\006\uffd0\027\uffd0\001\002" +
    "\000\010\002\uffd8\006\uffd8\027\uffd8\001\002\000\010\002" +
    "\uffda\006\uffda\027\uffda\001\002\000\010\002\uffd9\006\uffd9" +
    "\027\uffd9\001\002\000\006\002\uffed\027\uffed\001\002\000" +
    "\006\002\uffe1\027\uffe1\001\002\000\030\004\050\015\041" +
    "\016\051\017\047\020\037\021\044\022\043\023\042\024" +
    "\040\025\045\026\046\001\002\000\006\002\uffe2\027\uffe2" +
    "\001\002\000\006\002\uffee\027\uffee\001\002\000\006\002" +
    "\uffea\027\uffea\001\002\000\030\004\050\015\041\016\051" +
    "\017\047\020\037\021\044\022\043\023\042\024\040\025" +
    "\045\026\046\001\002\000\006\002\uffeb\027\uffeb\001\002" +
    "\000\006\002\uffe8\027\uffe8\001\002\000\030\004\050\015" +
    "\041\016\051\017\047\020\037\021\044\022\043\023\042" +
    "\024\040\025\045\026\046\001\002\000\004\006\065\001" +
    "\002\000\030\004\050\015\041\016\051\017\047\020\037" +
    "\021\044\022\043\023\042\024\040\025\045\026\046\001" +
    "\002\000\006\002\uffe9\027\uffe9\001\002\000\006\002\ufff0" +
    "\027\ufff0\001\002\000\006\002\ufff1\027\ufff1\001\002\000" +
    "\034\002\uffdc\004\050\015\041\016\051\017\047\020\037" +
    "\021\044\022\043\023\042\024\040\025\045\026\046\027" +
    "\uffdc\001\002\000\006\002\uffdd\027\uffdd\001\002\000\006" +
    "\002\uffe3\027\uffe3\001\002\000\032\004\050\011\075\015" +
    "\041\016\051\017\047\020\037\021\044\022\043\023\042" +
    "\024\040\025\045\026\046\001\002\000\004\006\077\001" +
    "\002\000\006\002\uffe4\027\uffe4\001\002\000\030\004\050" +
    "\015\041\016\051\017\047\020\037\021\044\022\043\023" +
    "\042\024\040\025\045\026\046\001\002\000\006\002\uffe5" +
    "\027\uffe5\001\002\000\006\002\uffde\027\uffde\001\002\000" +
    "\012\011\103\012\105\013\107\014\104\001\002\000\004" +
    "\006\uffcd\001\002\000\004\006\uffce\001\002\000\004\006" +
    "\112\001\002\000\004\006\110\001\002\000\004\006\uffcf" +
    "\001\002\000\030\004\050\015\041\016\051\017\047\020" +
    "\037\021\044\022\043\023\042\024\040\025\045\026\046" +
    "\001\002\000\006\002\uffdf\027\uffdf\001\002\000\010\011" +
    "\103\013\107\014\104\001\002\000\004\006\114\001\002" +
    "\000\030\004\050\015\041\016\051\017\047\020\037\021" +
    "\044\022\043\023\042\024\040\025\045\026\046\001\002" +
    "\000\006\002\uffe0\027\uffe0\001\002\000\006\002\ufff3\027" +
    "\ufff3\001\002\000\036\002\uffdc\004\050\010\120\015\041" +
    "\016\051\017\047\020\037\021\044\022\043\023\042\024" +
    "\040\025\045\026\046\027\uffdc\001\002\000\010\002\uffdb" +
    "\006\071\027\uffdb\001\002\000\006\002\ufff2\027\ufff2\001" +
    "\002\000\006\002\uffe6\027\uffe6\001\002\000\030\004\050" +
    "\015\041\016\051\017\047\020\037\021\044\022\043\023" +
    "\042\024\040\025\045\026\046\001\002\000\004\006\125" +
    "\001\002\000\030\004\050\015\041\016\051\017\047\020" +
    "\037\021\044\022\043\023\042\024\040\025\045\026\046" +
    "\001\002\000\006\002\uffe7\027\uffe7\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\032\006\003\007\031\010\013\011\023\012" +
    "\014\013\012\014\027\015\024\016\011\017\021\020\007" +
    "\021\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\033" +
    "\007\031\010\013\011\023\012\014\013\012\014\027\015" +
    "\024\016\011\017\021\020\007\021\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\063\001\001\000\002" +
    "\001\001\000\004\003\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\110\001\001\000\002\001\001\000\004\004\112\001\001" +
    "\000\002\001\001\000\004\003\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\071\001\001\000\004" +
    "\002\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\123\001\001\000\002\001\001\000\004\003\125" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// Connect this parser to a scanner!
	private ControladorArbol controlArbol;
	private JTextArea textArea;

	public parser(Lexer lexer, ControladorArbol controlArbol, JTextArea textArea) {
		super(lexer);
		this.controlArbol = controlArbol;
		this.textArea = textArea;
	}

	public void mostrarErrorSintaxis(Symbol cur_token) {
		String error = "Estructura invalida en posición " + cur_token.right
			 + ", token: " + cur_token.value;
		System.out.println(error);
		textArea.append("\n" + error);
	}

	public void ejecutarComandoLs(ComandoLs ls) {
			Comando<ComandoLs> comandLs = new ImplementComandoLs();
			comandLs.ejecutarComando(ls, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoCd(ComandoCd cd) {
			Comando<ComandoCd> comandCd = new ImplementComandoCd(); 	
			comandCd.ejecutarComando(cd, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoPwd(ComandoPwd pwd) {	
			Comando<ComandoPwd> comandPwd = new ImplementComandoPwd(); 
			comandPwd.ejecutarComando(pwd, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoTouch(ComandoTouch touch) {	
			Comando<ComandoTouch> comandTouch = new ImplementComandoTouch(); 
			comandTouch.ejecutarComando(touch, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoMkdir(ComandoMkdir mkdir) {	
			Comando<ComandoMkdir> comandMkdir = new ImplementComandoMkdir(); 
			comandMkdir.ejecutarComando(mkdir, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoMv(ComandoMv mv) {	
			Comando<ComandoMv> comandoMv = new ImplementComandoMv(); 
			comandoMv.ejecutarComando(mv, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoCp(ComandoCp cp) {	
			Comando<ComandoCp> comandoCp = new ImplementComandoCp(); 
			comandoCp.ejecutarComando(cp, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoRm(ComandoRm rm) {	
			Comando<ComandoRm> comandoRm = new ImplementComandoRm(); 
			comandoRm.ejecutarComando(rm, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoRmdir(ComandoRmdir rmdir) {	
			Comando<ComandoRmdir> comandoRmdir = new ImplementComandoRmdir(); 
			comandoRmdir.ejecutarComando(rmdir, this.controlArbol,this.textArea);
	}
	public void ejecutarComandoChmod(ComandoChmod chmod) {	
			Comando<ComandoChmod> comandChmod = new ImplementComandoChmod(); 
			comandChmod.ejecutarComando(chmod, this.controlArbol,this.textArea);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // salir ::= EXIT 
            {
              String RESULT =null;
		 System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // permisos_chmod ::= GUION_R_MINUS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("permisos_chmod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // permisos_chmod ::= AGREGAR_PERMISOS_CHMOD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("permisos_chmod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // permisos_chmod ::= REMOVER_PERMISOS_CHMOD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("permisos_chmod",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paths ::= CHMOD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paths ::= RMDIR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paths ::= RM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paths ::= CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paths ::= MV 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paths ::= MKDIR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paths ::= TOUCH 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paths ::= PWD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paths ::= CD 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paths ::= LS 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paths ::= PATH 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paths",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // path ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // path ::= ESPACIO 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // path ::= ESPACIO paths 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // chmod ::= CHMOD error 
            {
              ComandoChmod RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // chmod ::= CHMOD ESPACIO permisos_chmod ESPACIO paths 
            {
              ComandoChmod RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoChmod(e1, null, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // chmod ::= CHMOD ESPACIO GUION_R_MAYUS ESPACIO permisos_chmod ESPACIO paths 
            {
              ComandoChmod RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoChmod(e1, e2, e3, e4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chmod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rmdir ::= RMDIR error 
            {
              ComandoRmdir RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rmdir ::= RMDIR ESPACIO paths 
            {
              ComandoRmdir RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoRmdir(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rmdir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rm ::= RM error 
            {
              ComandoRm RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rm ::= RM ESPACIO paths 
            {
              ComandoRm RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoRm(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rm ::= RM ESPACIO GUION_R_MINUS ESPACIO paths 
            {
              ComandoRm RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoRm(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rm",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cp ::= CP error 
            {
              ComandoCp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cp ::= CP ESPACIO paths ESPACIO paths 
            {
              ComandoCp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoCp(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mv ::= MV error 
            {
              ComandoMv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mv ::= MV ESPACIO paths ESPACIO paths 
            {
              ComandoMv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoMv(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mv",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mkdir ::= MKDIR error 
            {
              ComandoMkdir RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mkdir ::= MKDIR ESPACIO paths 
            {
              ComandoMkdir RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoMkdir(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mkdir",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // touch ::= TOUCH error 
            {
              ComandoTouch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // touch ::= TOUCH ESPACIO paths 
            {
              ComandoTouch RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoTouch(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("touch",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pwd ::= PWD error 
            {
              ComandoPwd RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pwd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pwd ::= PWD 
            {
              ComandoPwd RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoPwd(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pwd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cd ::= CD error 
            {
              ComandoCd RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ERROR EN cd"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cd ::= CD path 
            {
              ComandoCd RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoCd(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ls ::= LS ESPACIO COMPLET_LS path 
            {
              ComandoLs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoLs(e1, e3, e4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ls ::= LS path 
            {
              ComandoLs RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComandoLs(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comando ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ERROR COMANDO NO EXISTE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comando ::= chmod 
            {
              Object RESULT =null;
		int chmodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chmodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoChmod chmod = (ComandoChmod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoChmod(chmod);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comando ::= rmdir 
            {
              Object RESULT =null;
		int rmdirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rmdirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoRmdir rmdir = (ComandoRmdir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoRmdir(rmdir); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= rm 
            {
              Object RESULT =null;
		int rmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoRm rm = (ComandoRm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoRm(rm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comando ::= cp 
            {
              Object RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoCp cp = (ComandoCp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoCp(cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comando ::= mv 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoMv mv = (ComandoMv)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoMv(mv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comando ::= mkdir 
            {
              Object RESULT =null;
		int mkdirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mkdirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoMkdir mkdir = (ComandoMkdir)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoMkdir(mkdir); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comando ::= touch 
            {
              Object RESULT =null;
		int touchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int touchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoTouch touch = (ComandoTouch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoTouch(touch); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comando ::= pwd 
            {
              Object RESULT =null;
		int pwdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pwdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoPwd pwd = (ComandoPwd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoPwd(pwd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comando ::= cd 
            {
              Object RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoCd cd = (ComandoCd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoCd(cd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // comando ::= ls 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComandoLs ls = (ComandoLs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("comando ingresado: "); parser.ejecutarComandoLs(ls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // comandos ::= comando 
            {
              Object RESULT =null;
		int comandoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comandoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comando = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // comandos ::= comando ENCADENACION comandos 
            {
              Object RESULT =null;
		int comandoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comandoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comando = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comandosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comandosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comandos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= comandos EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

