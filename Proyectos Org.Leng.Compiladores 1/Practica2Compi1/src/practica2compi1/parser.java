
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 28 20:26:29 CST 2019
//----------------------------------------------------

package practica2compi1;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import practica2compi1.backend.instrucciones.*;
import javax.swing.JTextArea;
import practica2compi1.frontend.PanelGrafico;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 28 20:26:29 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\005\003\000\002\005\004\000\002\004\007\000" +
    "\002\002\003\000\002\002\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\003\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\005\000\002\006\005\000\002\011\004\000\002\011" +
    "\004\000\002\012\004\000\002\012\004\000\002\013\004" +
    "\000\002\013\004\000\002\014\004\000\002\014\004\000" +
    "\002\015\003\000\002\016\003\000\002\017\003\000\002" +
    "\020\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\022\006\000\002\022\004\000\002\023\004" +
    "\000\002\023\004\000\002\024\004\000\002\024\004\000" +
    "\002\025\003\000\002\026\003\000\002\027\003\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\052\003\033\017\016\020\014\021\007\022" +
    "\051\023\027\024\050\025\046\026\015\027\045\030\036" +
    "\031\005\032\044\033\043\034\040\035\025\036\017\037" +
    "\020\040\013\041\042\001\002\000\054\002\ufff0\003\ufff0" +
    "\006\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\001" +
    "\002\000\012\003\127\007\060\041\064\043\061\001\002" +
    "\000\054\002\ufff5\003\ufff5\006\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\041\ufff5\001\002\000\012\003\125\007\060" +
    "\041\064\043\061\001\002\000\010\002\uffff\017\124\040" +
    "\013\001\002\000\052\002\000\003\033\017\122\020\014" +
    "\021\007\022\051\023\027\024\050\025\046\026\015\027" +
    "\045\030\036\031\005\032\044\033\043\034\040\035\025" +
    "\036\017\037\020\041\042\001\002\000\054\002\ufff3\003" +
    "\ufff3\006\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3" +
    "\001\002\000\010\007\060\041\064\043\061\001\002\000" +
    "\012\003\113\007\060\041\064\043\061\001\002\000\054" +
    "\002\uffcf\003\uffcf\006\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\041\uffcf\001\002\000\004\002\ufffc\001\002\000\054" +
    "\002\uffc2\003\uffc2\006\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\041\uffc2\001\002\000\054\002\uffc1\003\uffc1\006\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\001\002\000" +
    "\004\002\112\001\002\000\054\002\ufff4\003\ufff4\006\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\001\002\000" +
    "\054\002\ufff2\003\ufff2\006\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\041\ufff2\001\002\000\054\002\uffef\003\uffef\006" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\041\uffef\001\002" +
    "\000\054\002\uffc3\003\uffc3\006\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\041\uffc3\001\002\000\054\002\ufff8\003\ufff8" +
    "\006\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\001" +
    "\002\000\012\003\110\007\060\041\064\043\061\001\002" +
    "\000\054\002\uffeb\003\uffeb\006\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\041\uffeb\001\002\000\054\002\uffec\003\uffec" +
    "\006\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec\001" +
    "\002\000\054\002\uffe7\003\uffe7\006\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\041\uffe7\001\002\000\054\002\uffe4\003" +
    "\uffe4\006\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\041\uffe4" +
    "\001\002\000\054\002\uffee\003\uffee\006\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\041\uffee\001\002\000\054\002\uffe9" +
    "\003\uffe9\006\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041" +
    "\uffe9\001\002\000\014\003\106\007\060\041\064\042\105" +
    "\043\061\001\002\000\054\002\ufff6\003\ufff6\006\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\041\ufff6\001\002\000\054" +
    "\002\uffc4\003\uffc4\006\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\041\uffc4\001\002\000\054\002\uffe8\003\uffe8\006\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8\001\002\000" +
    "\056\002\uffe6\003\uffe6\004\103\006\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\041\uffe6\001\002\000\012\003\101\007" +
    "\060\041\064\043\061\001\002\000\012\003\077\007\060" +
    "\041\064\043\061\001\002\000\054\002\uffce\003\uffce\006" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce\001\002" +
    "\000\054\002\uffd0\003\uffd0\006\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\041\uffd0\001\002\000\054\002\uffea\003\uffea" +
    "\006\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\041\uffea\001" +
    "\002\000\054\002\uffd1\003\uffd1\006\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\041\uffd1\001\002\000\012\003\056\007" +
    "\060\041\064\043\061\001\002\000\054\002\uffe5\003\uffe5" +
    "\006\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\001" +
    "\002\000\010\002\ufffb\017\ufffb\040\ufffb\001\002\000\054" +
    "\002\ufff1\003\ufff1\006\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\041\ufff1\001\002\000\054\002\uffed\003\uffed\006\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\041\uffed\001\002\000" +
    "\054\002\uffd4\003\uffd4\006\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\041\uffd4\001\002\000\072\002\uffde\003\uffde\005" +
    "\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde\001" +
    "\002\000\010\007\060\041\064\043\061\001\002\000\072" +
    "\002\uffdd\003\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\041\uffdd\001\002\000\060\002\uffd5\003\uffd5\006" +
    "\uffd5\011\072\012\071\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\041\uffd5\001\002\000\072\002\uffe1\003\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\065\014\066\015\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\001\002\000" +
    "\072\002\uffdc\003\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\041\uffdc\001\002\000\010\007\060\041\064" +
    "\043\061\001\002\000\010\007\060\041\064\043\061\001" +
    "\002\000\072\002\uffdf\003\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\041\uffdf\001\002\000\072\002\uffe0" +
    "\003\uffe0\005\uffe0\006\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\041\uffe0\001\002\000\010\007\060\041\064\043\061\001" +
    "\002\000\010\007\060\041\064\043\061\001\002\000\072" +
    "\002\uffe3\003\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\065\014\066\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\041\uffe3\001\002\000\072\002\uffe2\003\uffe2\005" +
    "\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\065\014\066" +
    "\015\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\001" +
    "\002\000\010\010\076\011\072\012\071\001\002\000\072" +
    "\002\uffdb\003\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\041\uffdb\001\002\000\054\002\uffc7\003\uffc7\006" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\001\002" +
    "\000\060\002\uffc8\003\uffc8\006\uffc8\011\072\012\071\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\001\002\000\054" +
    "\002\uffc5\003\uffc5\006\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\001\002\000\060\002\uffc6\003\uffc6\006\uffc6" +
    "\011\072\012\071\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041" +
    "\uffc6\001\002\000\010\007\060\041\064\043\061\001\002" +
    "\000\060\002\uffda\003\uffda\006\uffda\011\072\012\071\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\041\uffda\001\002\000\054" +
    "\002\uffcc\003\uffcc\006\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\041\uffcc\001\002\000\054\002\uffcb\003\uffcb\006\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\001\002\000" +
    "\060\002\uffcd\003\uffcd\006\uffcd\011\072\012\071\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\041\uffcd\001\002\000\054\002" +
    "\uffd2\003\uffd2\006\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\041\uffd2\001\002\000\060\002\uffd3\003\uffd3\006\uffd3\011" +
    "\072\012\071\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3" +
    "\001\002\000\004\002\001\001\002\000\054\002\uffd8\003" +
    "\uffd8\006\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\001\002\000\060\002\uffd9\003\uffd9\006\uffd9\011\072\012" +
    "\071\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\001\002" +
    "\000\010\005\116\011\072\012\071\001\002\000\046\003" +
    "\033\020\014\021\007\022\051\023\027\024\050\025\046" +
    "\026\015\027\045\030\036\031\005\032\044\033\043\034" +
    "\040\035\025\036\017\037\020\041\042\001\002\000\050" +
    "\003\033\006\120\020\014\021\007\022\051\023\027\024" +
    "\050\025\046\026\015\027\045\030\036\031\005\032\044" +
    "\033\043\034\040\035\025\036\017\037\020\041\042\001" +
    "\002\000\010\002\ufff9\017\ufff9\040\ufff9\001\002\000\054" +
    "\002\ufff7\003\ufff7\006\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\041\ufff7\001\002\000\004\002\ufffe\001\002\000\010" +
    "\002\ufffa\017\ufffa\040\ufffa\001\002\000\004\002\ufffd\001" +
    "\002\000\054\002\uffd6\003\uffd6\006\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\041\uffd6\001\002\000\060\002\uffd7\003" +
    "\uffd7\006\uffd7\011\072\012\071\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\041\uffd7\001\002\000\054\002\uffc9\003\uffc9\006" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\001\002" +
    "\000\010\011\072\012\071\015\131\001\002\000\010\007" +
    "\060\041\064\043\061\001\002\000\060\002\uffca\003\uffca" +
    "\006\uffca\011\072\012\071\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\056\002\010\003\020\004\052\005\007\006" +
    "\051\010\025\011\036\012\005\013\021\014\011\015\022" +
    "\016\053\017\003\020\023\021\033\022\054\023\030\024" +
    "\027\025\046\026\034\027\040\030\031\001\001\000\002" +
    "\001\001\000\010\031\127\032\062\033\056\001\001\000" +
    "\002\001\001\000\010\031\125\032\062\033\056\001\001" +
    "\000\004\004\122\001\001\000\046\006\051\010\120\011" +
    "\036\012\005\013\021\014\011\015\022\016\053\017\003" +
    "\020\023\021\033\022\054\023\030\024\027\025\046\026" +
    "\034\027\040\030\031\001\001\000\002\001\001\000\010" +
    "\031\114\032\062\033\056\001\001\000\010\031\113\032" +
    "\062\033\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\110\032\062\033" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\106\032\062\033\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\101\032\062\033\056\001\001\000\010" +
    "\031\077\032\062\033\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\061\032\062\033\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\074\032\062\033" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\067\001\001\000" +
    "\004\033\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\073\033\056\001\001\000\006\032\072\033" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\103" +
    "\032\062\033\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\116\006\051" +
    "\010\025\011\036\012\005\013\021\014\011\015\022\016" +
    "\053\017\003\020\023\021\033\022\054\023\030\024\027" +
    "\025\046\026\034\027\040\030\031\001\001\000\046\006" +
    "\051\010\120\011\036\012\005\013\021\014\011\015\022" +
    "\016\053\017\003\020\023\021\033\022\054\023\030\024" +
    "\027\025\046\026\034\027\040\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\131\032" +
    "\062\033\056\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private JTextArea textArea;
	private List<String> listaErrores;
	private List<Instruccion> listaInstrucciones;
	private PanelGrafico panel;
	private String ejecucion;

	public parser(Lexer lexer, PanelGrafico panel, String ejecucion) {
		super(lexer);
		this.panel = panel;
		this.textArea = panel.getTxtMensajes();
		this.ejecucion = ejecucion;
		this.listaErrores = new ArrayList();
		this.listaInstrucciones = new ArrayList();
	}

	public void reiniciarListaInstruciiones(){
			this.listaInstrucciones = new ArrayList();

	}

	public List<Instruccion> devolverListaInstrucciones(){
			return this.listaInstrucciones;

	}

	public void agregarInstruccion(Instruccion instruccion){
			this.listaInstrucciones.add(instruccion);

	}

	public void limpiarListas(){
            listaErrores.clear();
    }
	public void syntax_error(Symbol cur_token) {
		String error = "Estructura invalida:   " + "Linea: "+(cur_token.left)+"	Columna: "+(cur_token.right)
			 + "   Token: " + cur_token.value;
		System.out.println(error);
		listaErrores.add(error);
		textArea.append("\nError Sintactico:\n" + error);
	}

	public void unrecovered_sintax_error(Symbol cur_token) throws java.lang.Exception{
		String error = "Estructura invalida:   " + "Linea: "+(cur_token.left)+"	Columna: "+(cur_token.right)
			 + "   Token: " + cur_token.value;
		System.out.println(error);
		listaErrores.add(error);
		textArea.append("\nError Sintactico:\n" + error);
	}

	public void ejecutarInstruccion(Instruccion instruccion) {
		if (instruccion != null) {
				instruccion.ejecutar(this.panel);
		}
	}

	public void ingresarVariable(String nombre, Integer valor){
			if (this.ejecucion.equals("instrucciones")){
				/* code */
				if (this.panel.verificarVariableInstruc(nombre)){
					/* existe la variable a ingresar */
					String error = "La variable : "+nombre+" ya esta declarada...";
					listaErrores.add(error);
					textArea.append("\nError Semantico:\n" + error);

				} else {
						this.panel.agregarVariableInstruc(nombre, valor);

				}

			} else {
				/* code */
				if (this.panel.verificarVariableArchiv(nombre)){
					/* existe la variable a ingresar */
					String error = "La variable : "+nombre+" ya esta declarada...";
					listaErrores.add(error);
					textArea.append("\nError Semantico:\n" + error);

				} else {
						this.panel.agregarVariableArchiv(nombre, valor);

				}

			}

	}

	public void asignarVariable(String nombre, Integer valor){
			if (this.ejecucion.equals("instrucciones")){
				/* code */
				if (this.panel.verificarVariableInstruc(nombre)){
					/* existe la variable a asignar el valor */
					this.panel.asignarVariableInstruc(nombre, valor);

				} else {
						//se crea y se asigna de una vez
						this.panel.agregarVariableInstruc(nombre, valor);

				}

			} else {
				/* code */
				if (this.panel.verificarVariableArchiv(nombre)){
					/* existe la variable a asignar el valor */
					this.panel.asignarVariableArchiv(nombre, valor);

				} else {
						//se crea y se asigna de una vez
						this.panel.agregarVariableArchiv(nombre, valor);

				}

			}

	}

	public Integer retornarVariable(String nombre){
			Integer var = null;
			if (this.ejecucion.equals("instrucciones")){
				/* code */
				if (this.panel.verificarVariableInstruc(nombre)){
					/* existe la variable a usar */
					if (this.panel.retornarVariableInstruc(nombre)!=null){
						/* code */
						var = this.panel.retornarVariableInstruc(nombre);
					} else {
							String error = "La variable : "+nombre+" no tiene valor asignado...";
							listaErrores.add(error);
							textArea.append("\nError Semantico:\n" + error);
							var = 0;
					}
					

				} else {
						String error = "La variable : "+nombre+" no existe y no se puede usar...";
						listaErrores.add(error);
						textArea.append("\nError Semantico:\n" + error);

				}

			} else {
				/* code */
				if (this.panel.verificarVariableArchiv(nombre)){
					/* existe la variable a usar */
					if (this.panel.retornarVariableArchiv(nombre)!=null){
						/* code */
						var = this.panel.retornarVariableArchiv(nombre);
					} else {
							String error = "La variable : "+nombre+" no tiene valor asignado...";
							listaErrores.add(error);
							textArea.append("\nError Semantico:\n" + error);
							var = 0;
					}
					

				} else {
						String error = "La variable : "+nombre+" no existe y no se puede usar...";
						listaErrores.add(error);
						textArea.append("\nError Semantico:\n" + error);

				}
			}

			return var;

	}



	/*lista que devuelve los errores encontrados*/
	public List<String> devolverErrores(){
			return listaErrores;
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // to_draw ::= TO_DRAW 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionToDraw(e1); System.out.println("Instruccion TO_DRAW Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_draw",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // to_erase ::= TO_ERASE 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionToErase(e1); System.out.println("Instruccion TO_ERASE Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_erase",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // show_turtle ::= SHOW_TURTLE 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionShowTurtle(e1); System.out.println("Instruccion SHOW_TURTLE Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show_turtle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // hide_turtle ::= HIDE_TURTLE 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionHideTurtle(e1); System.out.println("Instruccion HIDE_TURTLE Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hide_turtle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // position_y ::= POSITION_Y error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_y",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // position_y ::= POSITION_Y expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPositionY(e2, e1); System.out.println("Instruccion POSITION_Y Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_y",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // position_x ::= POSITION_X error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_x",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // position_x ::= POSITION_X expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPositionX(e2, e1); System.out.println("Instruccion POSITION_X Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_x",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // position_xy ::= POSITION_XY error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_xy",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // position_xy ::= POSITION_XY expr COMA expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPositionXY(e2, e4, e1); System.out.println("Instruccion POSITION_XY Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("position_xy",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // color ::= COLOR error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // color ::= COLOR CODIGO_COLOR 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionColor(e2, e1); System.out.println("Instruccion COLOR HEXADECIMAL Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // color ::= COLOR expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionColor(e2, e1); System.out.println("Instruccion COLOR Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // to_center ::= TO_CENTER 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionToCenter(e1); System.out.println("Instruccion TO_CENTER Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("to_center",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pen_down ::= PEN_DOWN 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPenDown(e1); System.out.println("Instruccion PEN_DOWN Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pen_down",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pen_up ::= PEN_UP 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionPenUp(e1); System.out.println("Instruccion PEN_UP Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pen_up",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // clears ::= CLEARS 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionClears(e1); System.out.println("Instruccion CLEARS Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clears",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // in_left ::= LEFT error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_left",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // in_left ::= LEFT expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionLeft(e2, e1); System.out.println("Instruccion LEFT Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_left",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // in_right ::= RIGHT error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_right",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // in_right ::= RIGHT expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionRight(e2, e1); System.out.println("Instruccion RIGHT Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in_right",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // backward ::= BACKWARD error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("backward",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // backward ::= BACKWARD expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionBackward(e2, e1); System.out.println("Instruccion BACKWARD Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("backward",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // forward ::= FORWARD error 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forward",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // forward ::= FORWARD expr 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstruccionForward(e2, e1); System.out.println("Instruccion FORWARD Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forward",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= VARIABLE IGUAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Asignacion Ingresada: "); parser.asignarVariable(e1,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr3 ::= PARENT_A expr PARENT_C 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr3 ::= VARIABLE 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.retornarVariable(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr3 ::= NUMERO_ENTERO 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr2 ::= expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr2 ::= expr2 DIV expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() / e3.intValue()); System.out.printf(" Division = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr2 ::= expr2 MULT expr3 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() * e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr RESTA expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() - e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr SUMA expr2 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(e1.intValue() + e3.intValue()); System.out.printf(" Multiplicacion = %d\n", RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ERROR ACCION NO EXISTE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asignacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada Asignacion: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= VARIABLE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada Declaracion de variable: "); parser.ingresarVariable(e1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= to_draw 
            {
              Object RESULT =null;
		int to_drawleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int to_drawright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion to_draw = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada TO_DRAW: "); parser.ejecutarInstruccion(to_draw); parser.agregarInstruccion(to_draw); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= to_erase 
            {
              Object RESULT =null;
		int to_eraseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int to_eraseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion to_erase = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada TO_ERASE: "); parser.ejecutarInstruccion(to_erase); parser.agregarInstruccion(to_erase); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= show_turtle 
            {
              Object RESULT =null;
		int show_turtleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int show_turtleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion show_turtle = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada SHOW_TURTLE: "); parser.ejecutarInstruccion(show_turtle); parser.agregarInstruccion(show_turtle); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= hide_turtle 
            {
              Object RESULT =null;
		int hide_turtleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hide_turtleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion hide_turtle = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada HIDE_TURTLE: "); parser.ejecutarInstruccion(hide_turtle); parser.agregarInstruccion(hide_turtle); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= position_y 
            {
              Object RESULT =null;
		int position_yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int position_yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion position_y = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada POSITION_Y: "); parser.ejecutarInstruccion(position_y); parser.agregarInstruccion(position_y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= position_x 
            {
              Object RESULT =null;
		int position_xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int position_xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion position_x = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada POSITION_X: "); parser.ejecutarInstruccion(position_x); parser.agregarInstruccion(position_x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= position_xy 
            {
              Object RESULT =null;
		int position_xyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int position_xyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion position_xy = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada POSITION_XY: "); parser.ejecutarInstruccion(position_xy); parser.agregarInstruccion(position_xy); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= color 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion color = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada COLOR: "); parser.ejecutarInstruccion(color); parser.agregarInstruccion(color); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= to_center 
            {
              Object RESULT =null;
		int to_centerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int to_centerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion to_center = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada TO_CENTER: "); parser.ejecutarInstruccion(to_center); parser.agregarInstruccion(to_center); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= pen_down 
            {
              Object RESULT =null;
		int pen_downleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pen_downright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion pen_down = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada PEN_DOWN: "); parser.ejecutarInstruccion(pen_down); parser.agregarInstruccion(pen_down); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= pen_up 
            {
              Object RESULT =null;
		int pen_upleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pen_upright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion pen_up = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada PEN_UP: "); parser.ejecutarInstruccion(pen_up); parser.agregarInstruccion(pen_up); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= clears 
            {
              Object RESULT =null;
		int clearsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clearsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion clears = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada CLEARS: "); parser.ejecutarInstruccion(clears); parser.agregarInstruccion(clears); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= in_left 
            {
              Object RESULT =null;
		int in_leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int in_leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion in_left = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada LEFT: "); parser.ejecutarInstruccion(in_left); parser.agregarInstruccion(in_left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= in_right 
            {
              Object RESULT =null;
		int in_rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int in_rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion in_right = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada RIGHT: "); parser.ejecutarInstruccion(in_right); parser.agregarInstruccion(in_right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= backward 
            {
              Object RESULT =null;
		int backwardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int backwardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion backward = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada BACKWARD: "); parser.ejecutarInstruccion(backward); parser.agregarInstruccion(backward); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= forward 
            {
              Object RESULT =null;
		int forwardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forwardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion forward = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instruccion Ingresada FORWARD: "); parser.ejecutarInstruccion(forward); parser.agregarInstruccion(forward); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instruccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // repeticion ::= REPEAT expr CORCHETE_A instrucciones CORCHETE_C 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Varias instrucciones Ingresadas: "); parser.ejecutarInstruccion(new InstruccionRepeat(e2,parser.devolverListaInstrucciones(),e1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // repeticiones ::= repeticiones repeticion 
            {
              Object RESULT =null;
		int repeticionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int repeticionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repeticiones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int repeticionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repeticionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repeticion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticiones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // repeticiones ::= repeticion 
            {
              Object RESULT =null;
		int repeticionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repeticionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repeticion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Otra Accion Ingresada: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeticiones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_iniciales ::= COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Comentarios "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones_iniciales ::= repeticiones COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int repeticionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int repeticionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object repeticiones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Varias repeticiones de instrucciones Ingresadas: con Comentarios "); parser.reiniciarListaInstruciiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones_iniciales ::= instrucciones COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instrucciones Ingresadas con Comentarios: "); parser.reiniciarListaInstruciiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones_iniciales ::= repeticiones 
            {
              Object RESULT =null;
		int repeticionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repeticionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object repeticiones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Varias repeticiones de instrucciones Ingresadas: "); parser.reiniciarListaInstruciiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones_iniciales ::= instrucciones 
            {
              Object RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object instrucciones = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Instrucciones Ingresadas: "); parser.reiniciarListaInstruciiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones_iniciales",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones_iniciales EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

