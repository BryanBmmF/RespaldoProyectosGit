/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica2compi1.frontend;

import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import practica2compi1.Lexer;
import practica2compi1.backend.archivos.ControladorDeArchivos;
import practica2compi1.parser;

/**
 *
 * @author bryan
 */
public class EdicionKok extends javax.swing.JDialog {
    private PanelGrafico panel;
    private Lexer lexer;
    private parser parser;
    private boolean modificado;
    public static final String ARCHIVO_NUEVO="Archivo Nuevo sin Guardar";
    public static final String GUARDAR_CAMBIOS="Desea Guardar Cambios al archivo abierto?";
    public static final String GUARDAR_ARCHIVO="Desea Guardar este Archivo?";
    public static final String PATRON_ENC="' este patron fue encontrado en el texto.";
    public static final String PATRON_NO_ENC="' este patron no fue encontrado en el texto.";
    public static final String PATH_ICONO="src/analizadorsintactico/gui/img/iconoAnalizador.png";
    /**
     * Creates new form EdicionKok
     */
    public EdicionKok(java.awt.Frame parent, PanelGrafico panel) {
        super(parent, true);
        initComponents();
        this.panel = panel;
        this.lexer = new Lexer(new StringReader(""), this.txtMensajes);
        this.parser = new parser(lexer, this.panel, "archivos");
        
        btnDeshacer.setEnabled(false);// deshabilitando botones de rehacer deshacer
        btnRehacer.setEnabled(false);
        
        this.LanzarEventHacerRehacer();//lanza eventos de rehacer deshacer
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnDeshacer = new javax.swing.JButton();
        btnRehacer = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtArchivoOpen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        txtMensajes.setEditable(false);
        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane2.setViewportView(txtMensajes);

        jLabel1.setText("Mensajes:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jToolBar1.setRollover(true);

        jButton1.setText("Cargar Archivo");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica2compi1/frontend/img/limpiar.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        btnDeshacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica2compi1/frontend/img/deshacer.png"))); // NOI18N
        btnDeshacer.setFocusable(false);
        btnDeshacer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeshacer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeshacer);

        btnRehacer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica2compi1/frontend/img/rehacer.png"))); // NOI18N
        btnRehacer.setFocusable(false);
        btnRehacer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRehacer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRehacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRehacerActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRehacer);

        jButton2.setText("ejecutar");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("guardar");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtArchivoOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtArchivoOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            ControladorDeArchivos controlador= new ControladorDeArchivos();
            if (controlador.getArch()!=null) {// si hay un archivo abierto
                    int confirmar = JOptionPane.showConfirmDialog(this, GUARDAR_CAMBIOS);
                    if (confirmar==0) {//si quiere guardar cambios
                          controlador.guardarCambiosArchivo(controlador.getArch().getPath(), textArea.getText());//se reescribe el archivO
                          controlador.setArch(null);// se vuelve al estado de ningun archivo abierto
                          reestablecerEstadoDoc();
                          textArea.setText(abrirArchivo());//SE ABRE LA VENTANA PARA ABRIR ARCHIVO
                    }
                    if (confirmar==1) {
                            //si no quiere guardar cambios el archivo queda tal y como esta
                            controlador.setArch(null);// se vuelve al estado de ningun archivo abierto
                            reestablecerEstadoDoc();
                            textArea.setText(abrirArchivo());//SE ABRE LA VENTANA PARA ABRIR ARCHIVO
                    }
            } else {// si no hay un archivo abierto se abre uno nuevo y se visualiza en el textArea
                        int confirmar = JOptionPane.showConfirmDialog(this,GUARDAR_ARCHIVO);
                        if (confirmar==0) {//si quiere guardar
                               guardarArchivoClose();
                               textArea.setText(abrirArchivo());
                        }
                        if (confirmar==1) {
                                textArea.setText(abrirArchivo());
                        }
                        
                        
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            txtMensajes.setText("");//limpiando area de mensajes
            String[] lineas = textArea.getText().split("\n");
            for(String entrada: lineas){
                    System.out.println("Intruccion: "+entrada);
                    this.lexer.yyreset(new StringReader(entrada));
                    try {
                            this.parser.parse();
                    } catch (Exception ex) {
                            Logger.getLogger(EdicionKok.class.getName()).log(Level.SEVERE, null, ex);
                    }
            
            }
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnRehacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRehacerActionPerformed
        // TODO add your handling code here:
            try {
                    undoManager.redo();//manejador rehace
            } catch (CannotRedoException cre) {
                    cre.printStackTrace();
            }
            updateButtons();
    }//GEN-LAST:event_btnRehacerActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed
        // TODO add your handling code here:
            
             try {
                    undoManager.undo();//manejador deshace
            } catch (CannotRedoException cre) {
                    cre.printStackTrace();
            }
            updateButtons();
    }//GEN-LAST:event_btnDeshacerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            ControladorDeArchivos controlador= new ControladorDeArchivos();
            if (controlador.getArch()!=null) {// si hay un archivo abierto
                    controlador.guardarCambiosArchivo(controlador.getArch().getPath(), textArea.getText());//se reescribe el archivo
            } else {// si no hay un archivo abierto
                    guardarArchivo();
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        textArea.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed
    //metodo para guardar un archivo POR DEFECTO
    private void guardarArchivo() {
            ControladorDeArchivos controlador= new ControladorDeArchivos();
             /**llamamos el metodo que permite cargar la ventana*/
            JFileChooser file=new JFileChooser();
            file.showSaveDialog(this);
            controlador.exportarAarchivo(file.getSelectedFile(), textArea.getText(),"");//por defecto sin extension
            if (controlador.getArch()!=null) {//si hay uno abierto se actualiza el contenedor
                    txtArchivoOpen.setText(controlador.getArch().getName());
            }
            
            
    }
    //guarda archivo y cierra
    private void guardarArchivoClose() {
            ControladorDeArchivos controlador= new ControladorDeArchivos();
             /**llamamos el metodo que permite cargar la ventana*/
            JFileChooser file=new JFileChooser();
            file.showSaveDialog(this);
            controlador.exportarAarchivo(file.getSelectedFile(), textArea.getText(),"");//por defecto sin extension
          
            controlador.setArch(null);// se vuelve al estado de ningun archivo abierto
            reestablecerEstadoDoc();      
    }
    //metodo para abriri un archivo
    private String abrirArchivo() {
            ControladorDeArchivos controlador= new ControladorDeArchivos();
             /**llamamos el metodo que permite cargar la ventana*/
            JFileChooser file=new JFileChooser();
            file.showOpenDialog(this);
            txtArchivoOpen.setText(file.getSelectedFile().getName());//se actualiza el contenedor del nombre del archivo
            /**abrimos el archivo seleccionado*/
            return controlador.cargarArchivo(file.getSelectedFile());
            
    }
    /**
     * @param args the command line arguments
     */
    
    public void reestablecerEstadoDoc(){
            txtArchivoOpen.setText(ARCHIVO_NUEVO);
            textArea.setText("");
    }
    //metodo para poner a la escucha el Text Area de posibles cambios de edicion de texto
    public void LanzarEventHacerRehacer(){
            textArea.getDocument().addUndoableEditListener(
                    new UndoableEditListener() {
                            public void undoableEditHappened(UndoableEditEvent e) {
                                    undoManager.addEdit(e.getEdit());
                                    updateButtons();
                            }
                    }
            );
    
    }
    //actualizacion de botones
    public void updateButtons() {
//            btnDeshacer.setText("Se puede Deshacer");
//            btnRehacer.setText("Se puede Rehacer");
            btnDeshacer.setEnabled(undoManager.canUndo());//se habilita o deshabilita segun el manejador
            btnRehacer.setEnabled(undoManager.canRedo());
    }
    //se declara un miembro manejador para el manejo de eventos Rehacer Deshacer cambios
    protected UndoManager undoManager = new UndoManager();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JButton btnRehacer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea textArea;
    private javax.swing.JLabel txtArchivoOpen;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables
}
