
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Cup;

import Analizadores.Flex.Lexer;
import Instructions.Asignacion;
import Instructions.Call;
import Instructions.DeclaracionArreglo;
import Instructions.Return;
import Instructions.Declaracion;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;
import javax.swing.JTextArea;
import Objetos.Token;
import Instructions.Instruction;
import Objetos.Logica;
import Tablas.TablaSimbolos.TablaSimbolos;
import Tablas.TablaTipos.TablaTipos;
import Objetos.AccionVariable;
import Instructions.*;
import Objetos.*;
import Valores.Ambitos;
import CErrores.*;
import Tablas.TablaSimbolos.Simbolos;
import Valores.Temporales;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\002\003\000\002\054" +
    "\004\000\002\055\005\000\002\055\005\000\002\055\004" +
    "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
    "\002\055\004\000\002\050\004\000\002\044\006\000\002" +
    "\040\005\000\002\040\005\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\036\005\000\002\037\003" +
    "\000\002\052\006\000\002\053\006\000\002\012\006\000" +
    "\002\012\005\000\002\041\005\000\002\041\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\034\012\000" +
    "\002\034\011\000\002\056\006\000\002\056\004\000\002" +
    "\045\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\005\000\002\046\005\000\002\046\004\000\002\047\004" +
    "\000\002\042\004\000\002\042\003\000\002\043\004\000" +
    "\002\043\004\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\024\003\000\002\024\004\000\002\024\004\000\002" +
    "\024\005\000\002\023\004\000\002\023\003\000\002\020" +
    "\011\000\002\021\006\000\002\022\011\000\002\025\011" +
    "\000\002\025\007\000\002\026\012\000\002\026\010\000" +
    "\002\027\020\000\002\027\016\000\002\051\003\000\002" +
    "\051\003\000\002\030\006\000\002\030\004\000\002\031" +
    "\006\000\002\031\004\000\002\032\006\000\002\033\006" +
    "\000\002\016\006\000\002\016\005\000\002\015\005\000" +
    "\002\015\003\000\002\017\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\010\003\000\002\010" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\005\003\000\002\005\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\005\000\002\007\003\000\002\006\003\000\002\006\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\030\003\021\005\015\006\011\007\012\010" +
    "\010\011\006\012\017\013\025\014\016\015\023\020\024" +
    "\001\002\000\004\062\357\001\002\000\004\002\000\001" +
    "\002\000\006\052\uffe4\062\uffe4\001\002\000\032\003\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\020\ufff9\032\ufff9\001\002\000\006" +
    "\052\uffe5\062\uffe5\001\002\000\006\052\uffe7\062\uffe7\001" +
    "\002\000\006\052\uffe6\062\uffe6\001\002\000\004\022\355" +
    "\001\002\000\006\021\155\022\354\001\002\000\006\052" +
    "\uffe8\062\uffe8\001\002\000\006\052\uffe1\062\uffe1\001\002" +
    "\000\006\052\uffe3\062\uffe3\001\002\000\004\002\353\001" +
    "\002\000\004\022\352\001\002\000\032\003\152\005\015" +
    "\006\011\007\012\010\010\011\006\012\017\013\025\014" +
    "\016\015\023\020\024\032\150\001\002\000\006\052\uffe0" +
    "\062\uffe0\001\002\000\024\005\015\006\011\007\012\010" +
    "\010\011\006\012\017\013\025\014\016\015\023\001\002" +
    "\000\006\052\uffe2\062\uffe2\001\002\000\004\052\027\001" +
    "\002\000\026\004\042\026\053\050\050\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\006\052\031\062\033\001\002\000\026\004\042\026\053" +
    "\050\050\062\043\063\046\064\045\065\040\066\044\067" +
    "\052\070\037\001\002\000\006\021\034\022\uffee\001\002" +
    "\000\006\021\uffe9\022\uffe9\001\002\000\004\062\035\001" +
    "\002\000\006\021\uffea\022\uffea\001\002\000\046\021\uff9b" +
    "\022\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\034\uff9b\035\uff9b\051\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002\000\046\021" +
    "\uff89\022\uff89\023\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\034\uff89\035\uff89\051\uff89\053\uff89\054\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\061\uff89\001\002\000\046" +
    "\021\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027\uff88\030" +
    "\uff88\031\uff88\034\uff88\035\uff88\051\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\001\002\000" +
    "\046\021\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\034\uff9c\035\uff9c\051\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002" +
    "\000\046\021\uff87\022\uff87\023\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\034\uff87\035\uff87\051\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\001" +
    "\002\000\052\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\034\uff86\035\uff86\050\075\051" +
    "\uff86\052\027\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86" +
    "\060\uff86\061\uff86\001\002\000\046\021\uff8d\022\uff8d\023" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\034\uff8d" +
    "\035\uff8d\051\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\001\002\000\046\021\uff8a\022\uff8a" +
    "\023\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\034" +
    "\uff8a\035\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\001\002\000\046\021\uff8b\022" +
    "\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\034\uff8b\035\uff8b\051\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\001\002\000\046\021\uff84" +
    "\022\uff84\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\034\uff84\035\uff84\051\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\061\uff84\001\002\000\026\004" +
    "\042\026\053\050\050\062\043\063\046\064\045\065\040" +
    "\066\044\067\052\070\037\001\002\000\016\025\061\026" +
    "\057\027\056\030\062\031\060\053\070\001\002\000\046" +
    "\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\034\uff8c\035\uff8c\051\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\001\002\000" +
    "\026\004\042\026\053\050\050\062\043\063\046\064\045" +
    "\065\040\066\044\067\052\070\037\001\002\000\046\021" +
    "\uff85\022\uff85\023\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\034\uff85\035\uff85\051\uff85\053\uff85\054\uff85\055" +
    "\uff85\056\uff85\057\uff85\060\uff85\061\uff85\001\002\000\046" +
    "\021\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\027\056\030" +
    "\062\031\060\034\uff9e\035\uff9e\051\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\001\002\000" +
    "\026\004\042\026\053\050\050\062\043\063\046\064\045" +
    "\065\040\066\044\067\052\070\037\001\002\000\026\004" +
    "\042\026\053\050\050\062\043\063\046\064\045\065\040" +
    "\066\044\067\052\070\037\001\002\000\026\004\042\026" +
    "\053\050\050\062\043\063\046\064\045\065\040\066\044" +
    "\067\052\070\037\001\002\000\026\004\042\026\053\050" +
    "\050\062\043\063\046\064\045\065\040\066\044\067\052" +
    "\070\037\001\002\000\026\004\042\026\053\050\050\062" +
    "\043\063\046\064\045\065\040\066\044\067\052\070\037" +
    "\001\002\000\046\021\uffa0\022\uffa0\023\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\034\uffa0\035\uffa0\051\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\001\002\000\046\021\uffa3\022\uffa3\023\uffa3\025\uffa3" +
    "\026\uffa3\027\056\030\062\031\060\034\uffa3\035\uffa3\051" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\001\002\000\046\021\uff9f\022\uff9f\023\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f" +
    "\051\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\001\002\000\046\021\uffa2\022\uffa2\023\uffa2" +
    "\025\uffa2\026\uffa2\027\056\030\062\031\060\034\uffa2\035" +
    "\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\001\002\000\046\021\uffa1\022\uffa1\023" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1" +
    "\035\uffa1\051\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\001\002\000\054\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\034\uffec\035\uffec\051\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001" +
    "\002\000\032\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\051\073\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\001\002\000\014\025\061\026\057\027\056\030\062" +
    "\031\060\001\002\000\046\021\uff9d\022\uff9d\023\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d" +
    "\051\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\001\002\000\050\021\uff83\022\uff83\023\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\034\uff83\035" +
    "\uff83\051\uff83\052\031\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\061\uff83\001\002\000\032\004\042\026" +
    "\053\033\105\050\102\051\110\062\043\063\046\064\045" +
    "\065\040\066\044\067\052\070\037\001\002\000\016\021" +
    "\uffa7\022\uffa7\034\uff94\035\uff94\051\uffa7\053\uffa7\001\002" +
    "\000\006\021\142\051\143\001\002\000\006\034\120\035" +
    "\121\001\002\000\030\025\061\026\057\027\056\030\062" +
    "\031\060\054\126\055\130\056\133\057\127\060\132\061" +
    "\131\001\002\000\030\004\042\026\053\033\105\050\114" +
    "\062\043\063\046\064\045\065\040\066\044\067\052\070" +
    "\037\001\002\000\020\021\uff96\022\uff96\023\uff96\034\uff96" +
    "\035\uff96\051\uff96\053\uff96\001\002\000\010\021\uffaa\051" +
    "\uffaa\053\uffaa\001\002\000\030\004\042\026\053\033\105" +
    "\050\114\062\043\063\046\064\045\065\040\066\044\067" +
    "\052\070\037\001\002\000\044\021\uffa5\022\uffa5\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\034\uff95\035\uff95\051" +
    "\uffa5\053\uffa5\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\001\002\000\040\021\uffa8\022\uffa8\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\051\uffa8\053\uffa8\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002\000" +
    "\046\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\034\uffac\035\uffac\051\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\001\002" +
    "\000\012\021\uffa6\022\uffa6\051\uffa6\053\uffa6\001\002\000" +
    "\020\021\uff94\022\uff94\023\uff94\034\uff94\035\uff94\051\uff94" +
    "\053\uff94\001\002\000\020\021\uff98\022\uff98\023\uff98\034" +
    "\uff98\035\uff98\051\uff98\053\uff98\001\002\000\030\004\042" +
    "\026\053\033\105\050\114\062\043\063\046\064\045\065" +
    "\040\066\044\067\052\070\037\001\002\000\046\021\uff95" +
    "\022\uff95\023\uff95\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\034\uff95\035\uff95\051\uff95\053\uff95\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\010\034" +
    "\uff94\035\uff94\051\117\001\002\000\020\021\uff97\022\uff97" +
    "\023\uff97\034\uff97\035\uff97\051\uff97\053\uff97\001\002\000" +
    "\030\004\042\026\053\033\105\050\114\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\030\004\042\026\053\033\105\050\114\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\020\021\uff9a\022\uff9a\023\uff9a\034\120\035\uff9a\051\uff9a" +
    "\053\uff9a\001\002\000\020\021\uff99\022\uff99\023\uff99\034" +
    "\uff99\035\uff99\051\uff99\053\uff99\001\002\000\036\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\034\uff95\035\uff95\051" +
    "\125\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\001\002\000\012\021\uffa4\022\uffa4\051\uffa4\053\uffa4\001" +
    "\002\000\026\004\042\026\053\050\050\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\026\004\042\026\053\050\050\062\043\063\046\064\045" +
    "\065\040\066\044\067\052\070\037\001\002\000\026\004" +
    "\042\026\053\050\050\062\043\063\046\064\045\065\040" +
    "\066\044\067\052\070\037\001\002\000\026\004\042\026" +
    "\053\050\050\062\043\063\046\064\045\065\040\066\044" +
    "\067\052\070\037\001\002\000\026\004\042\026\053\050" +
    "\050\062\043\063\046\064\045\065\040\066\044\067\052" +
    "\070\037\001\002\000\026\004\042\026\053\050\050\062" +
    "\043\063\046\064\045\065\040\066\044\067\052\070\037" +
    "\001\002\000\032\021\uff90\022\uff90\023\uff90\025\061\026" +
    "\057\027\056\030\062\031\060\034\uff90\035\uff90\051\uff90" +
    "\053\uff90\001\002\000\032\021\uff8f\022\uff8f\023\uff8f\025" +
    "\061\026\057\027\056\030\062\031\060\034\uff8f\035\uff8f" +
    "\051\uff8f\053\uff8f\001\002\000\032\021\uff8e\022\uff8e\023" +
    "\uff8e\025\061\026\057\027\056\030\062\031\060\034\uff8e" +
    "\035\uff8e\051\uff8e\053\uff8e\001\002\000\032\021\uff93\022" +
    "\uff93\023\uff93\025\061\026\057\027\056\030\062\031\060" +
    "\034\uff93\035\uff93\051\uff93\053\uff93\001\002\000\032\021" +
    "\uff91\022\uff91\023\uff91\025\061\026\057\027\056\030\062" +
    "\031\060\034\uff91\035\uff91\051\uff91\053\uff91\001\002\000" +
    "\032\021\uff92\022\uff92\023\uff92\025\061\026\057\027\056" +
    "\030\062\031\060\034\uff92\035\uff92\051\uff92\053\uff92\001" +
    "\002\000\030\004\042\026\053\033\105\050\102\062\043" +
    "\063\046\064\045\065\040\066\044\067\052\070\037\001" +
    "\002\000\046\021\uffad\022\uffad\023\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\034\uffad\035\uffad\051\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\001\002\000\010\021\uffab\051\uffab\053\uffab\001\002\000" +
    "\016\025\061\026\057\027\056\030\062\031\060\053\146" +
    "\001\002\000\054\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000\004\002\uffff" +
    "\001\002\000\004\017\167\001\002\000\004\022\165\001" +
    "\002\000\004\022\164\001\002\000\006\021\155\022\156" +
    "\001\002\000\032\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc" +
    "\032\ufffc\001\002\000\004\062\157\001\002\000\032\003" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\020\ufffe\032\ufffe\001\002\000" +
    "\010\021\uffef\022\uffef\024\162\001\002\000\006\021\ufff4" +
    "\022\ufff4\001\002\000\006\021\ufff5\022\ufff5\001\002\000" +
    "\030\004\042\026\053\033\105\050\102\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\006\021\ufff0\022\ufff0\001\002\000\006\021\ufff1\022\ufff1" +
    "\001\002\000\032\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\032\ufffd\001\002\000\004\002\ufff7\001\002\000\004\052" +
    "\170\001\002\000\030\003\215\016\177\036\201\041\175" +
    "\042\205\043\220\044\214\045\211\046\222\047\171\062" +
    "\172\001\002\000\004\052\347\001\002\000\010\024\162" +
    "\050\075\052\027\001\002\000\032\003\uffce\016\uffce\036" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\053\uffce\062\uffce\001\002\000\004\022\343\001" +
    "\002\000\004\050\334\001\002\000\004\022\333\001\002" +
    "\000\030\004\042\026\053\033\105\050\102\062\043\063" +
    "\046\064\045\065\040\066\044\067\052\070\037\001\002" +
    "\000\004\022\331\001\002\000\004\050\323\001\002\000" +
    "\004\022\322\001\002\000\004\022\321\001\002\000\032" +
    "\003\uffd0\016\uffd0\036\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0\062\uffd0\001\002" +
    "\000\032\003\215\016\177\036\201\041\175\042\205\043" +
    "\220\044\214\045\211\046\222\047\171\052\306\062\172" +
    "\001\002\000\032\003\uffd3\016\uffd3\036\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\053\uffd3" +
    "\062\uffd3\001\002\000\032\003\215\016\177\036\201\041" +
    "\175\042\205\043\220\044\214\045\211\046\222\047\171" +
    "\053\304\062\172\001\002\000\004\022\303\001\002\000" +
    "\024\004\042\052\300\062\043\063\046\064\045\065\040" +
    "\066\044\067\052\070\037\001\002\000\004\022\276\001" +
    "\002\000\036\003\uffc4\016\uffc4\036\uffc4\037\260\040\257" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\053\uffc4\062\uffc4\001\002\000\024\004\042\052\253" +
    "\062\043\063\046\064\045\065\040\066\044\067\052\070" +
    "\037\001\002\000\006\022\251\053\250\001\002\000\032" +
    "\003\uffcf\016\uffcf\036\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\053\uffcf\062\uffcf\001\002" +
    "\000\004\022\247\001\002\000\004\050\226\001\002\000" +
    "\032\003\uffcd\016\uffcd\036\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\053\uffcd\062\uffcd\001" +
    "\002\000\004\052\223\001\002\000\004\062\224\001\002" +
    "\000\004\053\225\001\002\000\004\022\uffae\001\002\000" +
    "\004\062\227\001\002\000\004\024\230\001\002\000\026" +
    "\004\042\026\053\050\050\062\043\063\046\064\045\065" +
    "\040\066\044\067\052\070\037\001\002\000\016\023\232" +
    "\025\061\026\057\027\056\030\062\031\060\001\002\000" +
    "\030\004\042\026\053\033\105\050\114\062\043\063\046" +
    "\064\045\065\040\066\044\067\052\070\037\001\002\000" +
    "\010\023\234\034\120\035\121\001\002\000\006\025\237" +
    "\026\235\001\002\000\026\004\uffb4\026\uffb4\050\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\001\002\000\026\004\042\026\053\050\050\062\043\063" +
    "\046\064\045\065\040\066\044\067\052\070\037\001\002" +
    "\000\026\004\uffb5\026\uffb5\050\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002\000\016" +
    "\025\061\026\057\027\056\030\062\031\060\051\241\001" +
    "\002\000\032\003\215\016\177\036\201\041\175\042\205" +
    "\043\220\044\214\045\211\046\222\047\171\052\243\062" +
    "\172\001\002\000\032\003\uffb6\016\uffb6\036\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\053" +
    "\uffb6\062\uffb6\001\002\000\030\003\215\016\177\036\201" +
    "\041\175\042\205\043\220\044\214\045\211\046\222\047" +
    "\171\062\172\001\002\000\032\003\215\016\177\036\201" +
    "\041\175\042\205\043\220\044\214\045\211\046\222\047" +
    "\171\053\245\062\172\001\002\000\032\003\uffb7\016\uffb7" +
    "\036\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\053\uffb7\062\uffb7\001\002\000\032\003\uffd4" +
    "\016\uffd4\036\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\053\uffd4\062\uffd4\001\002\000\032" +
    "\003\uffc7\016\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\053\uffc7\062\uffc7\001\002" +
    "\000\032\003\uffc5\016\uffc5\036\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\053\uffc5\062\uffc5" +
    "\001\002\000\032\003\uffc6\016\uffc6\036\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\053\uffc6" +
    "\062\uffc6\001\002\000\004\022\uffb2\001\002\000\030\004" +
    "\042\026\053\033\105\050\102\062\043\063\046\064\045" +
    "\065\040\066\044\067\052\070\037\001\002\000\006\021" +
    "\142\053\255\001\002\000\004\022\uffb3\001\002\000\036" +
    "\003\uffbf\016\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\053\uffbf" +
    "\062\uffbf\001\002\000\004\052\273\001\002\000\004\050" +
    "\265\001\002\000\036\003\uffc3\016\uffc3\036\uffc3\037\260" +
    "\040\257\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\053\uffc3\062\uffc3\001\002\000\032\003\uffc2" +
    "\016\uffc2\036\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\053\uffc2\062\uffc2\001\002\000\036" +
    "\003\uffc0\016\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\053\uffc0" +
    "\062\uffc0\001\002\000\032\003\uffc1\016\uffc1\036\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\053\uffc1\062\uffc1\001\002\000\030\004\042\026\053\033" +
    "\105\050\114\062\043\063\046\064\045\065\040\066\044" +
    "\067\052\070\037\001\002\000\010\034\120\035\121\051" +
    "\267\001\002\000\004\052\270\001\002\000\030\003\215" +
    "\016\177\036\201\041\175\042\205\043\220\044\214\045" +
    "\211\046\222\047\171\062\172\001\002\000\032\003\215" +
    "\016\177\036\201\041\175\042\205\043\220\044\214\045" +
    "\211\046\222\047\171\053\272\062\172\001\002\000\036" +
    "\003\uffbc\016\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\053\uffbc" +
    "\062\uffbc\001\002\000\030\003\215\016\177\036\201\041" +
    "\175\042\205\043\220\044\214\045\211\046\222\047\171" +
    "\062\172\001\002\000\032\003\215\016\177\036\201\041" +
    "\175\042\205\043\220\044\214\045\211\046\222\047\171" +
    "\053\275\062\172\001\002\000\032\003\uffbd\016\uffbd\036" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\053\uffbd\062\uffbd\001\002\000\032\003\uffca\016" +
    "\uffca\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\053\uffca\062\uffca\001\002\000\004\022" +
    "\uffb0\001\002\000\030\004\042\026\053\033\105\050\102" +
    "\062\043\063\046\064\045\065\040\066\044\067\052\070" +
    "\037\001\002\000\006\021\142\053\302\001\002\000\004" +
    "\022\uffb1\001\002\000\032\003\uffc9\016\uffc9\036\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\053\uffc9\062\uffc9\001\002\000\004\002\ufff6\001\002\000" +
    "\004\041\315\001\002\000\030\003\215\016\177\036\201" +
    "\041\175\042\205\043\220\044\214\045\211\046\222\047" +
    "\171\062\172\001\002\000\032\003\215\016\177\036\201" +
    "\041\175\042\205\043\220\044\214\045\211\046\222\047" +
    "\171\053\310\062\172\001\002\000\004\041\311\001\002" +
    "\000\004\050\312\001\002\000\030\004\042\026\053\033" +
    "\105\050\114\062\043\063\046\064\045\065\040\066\044" +
    "\067\052\070\037\001\002\000\010\034\120\035\121\051" +
    "\314\001\002\000\032\003\uffb9\016\uffb9\036\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\053" +
    "\uffb9\062\uffb9\001\002\000\004\050\316\001\002\000\030" +
    "\004\042\026\053\033\105\050\114\062\043\063\046\064" +
    "\045\065\040\066\044\067\052\070\037\001\002\000\010" +
    "\034\120\035\121\051\320\001\002\000\032\003\uffb8\016" +
    "\uffb8\036\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\053\uffb8\062\uffb8\001\002\000\032\003" +
    "\uffd1\016\uffd1\036\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\053\uffd1\062\uffd1\001\002\000" +
    "\032\003\uffd2\016\uffd2\036\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\053\uffd2\062\uffd2\001" +
    "\002\000\030\004\042\026\053\033\105\050\114\062\043" +
    "\063\046\064\045\065\040\066\044\067\052\070\037\001" +
    "\002\000\010\034\120\035\121\051\325\001\002\000\004" +
    "\052\326\001\002\000\030\003\215\016\177\036\201\041" +
    "\175\042\205\043\220\044\214\045\211\046\222\047\171" +
    "\062\172\001\002\000\032\003\215\016\177\036\201\041" +
    "\175\042\205\043\220\044\214\045\211\046\222\047\171" +
    "\053\330\062\172\001\002\000\036\003\uffbe\016\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\053\uffbe\062\uffbe\001\002\000" +
    "\032\003\uffcc\016\uffcc\036\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\053\uffcc\062\uffcc\001" +
    "\002\000\004\022\uffa9\001\002\000\032\003\uffc8\016\uffc8" +
    "\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\053\uffc8\062\uffc8\001\002\000\030\004\042" +
    "\026\053\033\105\050\114\062\043\063\046\064\045\065" +
    "\040\066\044\067\052\070\037\001\002\000\010\034\120" +
    "\035\121\051\336\001\002\000\032\003\215\016\177\036" +
    "\201\041\175\042\205\043\220\044\214\045\211\046\222" +
    "\047\171\052\340\062\172\001\002\000\032\003\uffba\016" +
    "\uffba\036\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\053\uffba\062\uffba\001\002\000\030\003" +
    "\215\016\177\036\201\041\175\042\205\043\220\044\214" +
    "\045\211\046\222\047\171\062\172\001\002\000\032\003" +
    "\215\016\177\036\201\041\175\042\205\043\220\044\214" +
    "\045\211\046\222\047\171\053\342\062\172\001\002\000" +
    "\032\003\uffbb\016\uffbb\036\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\053\uffbb\062\uffbb\001" +
    "\002\000\032\003\uffcb\016\uffcb\036\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\053\uffcb\062" +
    "\uffcb\001\002\000\006\024\345\052\031\001\002\000\030" +
    "\004\042\026\053\033\105\050\102\062\043\063\046\064" +
    "\045\065\040\066\044\067\052\070\037\001\002\000\004" +
    "\022\uffed\001\002\000\004\062\350\001\002\000\004\053" +
    "\351\001\002\000\004\022\uffaf\001\002\000\036\003\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff1\022\ufff1\032\ufff8" +
    "\001\002\000\004\002\001\001\002\000\032\003\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\020\ufffb\032\ufffb\001\002\000\032\003" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\020\ufffa\032\ufffa\001\002\000" +
    "\006\021\ufff2\022\ufff2\001\002\000\012\021\uffef\022\uffef" +
    "\024\162\050\361\001\002\000\006\021\ufff3\022\ufff3\001" +
    "\002\000\026\005\015\006\011\007\012\010\010\011\006" +
    "\012\017\013\025\014\016\015\023\051\363\001\002\000" +
    "\004\062\u010e\001\002\000\004\052\u010b\001\002\000\006" +
    "\021\365\051\366\001\002\000\024\005\015\006\011\007" +
    "\012\010\010\011\006\012\017\013\025\014\016\015\023" +
    "\001\002\000\004\052\367\001\002\000\030\003\373\005" +
    "\015\006\011\007\012\010\010\011\006\012\017\013\025" +
    "\014\016\015\023\020\024\001\002\000\004\062\157\001" +
    "\002\000\004\053\u0108\001\002\000\004\022\u0107\001\002" +
    "\000\004\022\u0106\001\002\000\032\003\152\005\015\006" +
    "\011\007\012\010\010\011\006\012\017\013\025\014\016" +
    "\015\023\020\024\032\u0100\001\002\000\006\021\155\022" +
    "\376\001\002\000\032\003\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\020" +
    "\uffda\032\uffda\001\002\000\004\053\uffdb\001\002\000\030" +
    "\003\215\016\177\036\201\041\175\042\205\043\220\044" +
    "\214\045\211\046\222\047\171\062\172\001\002\000\004" +
    "\022\u0104\001\002\000\006\021\155\022\u0103\001\002\000" +
    "\032\003\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8\032\uffd8\001" +
    "\002\000\032\003\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\032" +
    "\uffd7\001\002\000\032\003\215\016\177\036\201\041\175" +
    "\042\205\043\220\044\214\045\211\046\222\047\171\053" +
    "\uffd5\062\172\001\002\000\036\003\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\020\uffd6\021\ufff1\022\ufff1\032\uffd6\001\002\000\032" +
    "\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\032\uffd9\001\002" +
    "\000\032\003\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\032\uffdf" +
    "\001\002\000\004\062\u010a\001\002\000\006\021\uffdd\051" +
    "\uffdd\001\002\000\030\003\373\005\015\006\011\007\012" +
    "\010\010\011\006\012\017\013\025\014\016\015\023\020" +
    "\024\001\002\000\004\053\u010d\001\002\000\032\003\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\020\uffde\032\uffde\001\002\000\006" +
    "\021\uffdc\051\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\020\002\017\034\006\035\003\040\013\052" +
    "\012\054\004\055\021\001\001\000\006\036\357\037\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\034\153\035\003\040\152\050\146\052" +
    "\150\001\001\000\002\001\001\000\004\035\025\001\001" +
    "\000\002\001\001\000\004\012\027\001\001\000\014\003" +
    "\040\004\035\005\144\013\053\016\046\001\001\000\004" +
    "\041\031\001\001\000\014\003\040\004\035\005\050\013" +
    "\053\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\040\004\070\005\071\013\053\016\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\040\004\035" +
    "\005\054\013\053\016\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\040\004\035\005\066\013\053" +
    "\016\046\001\001\000\014\003\040\004\035\005\065\013" +
    "\053\016\046\001\001\000\014\003\040\004\035\005\064" +
    "\013\053\016\046\001\001\000\014\003\040\004\035\005" +
    "\063\013\053\016\046\001\001\000\014\003\040\004\035" +
    "\005\062\013\053\016\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\105" +
    "\004\106\005\100\006\077\007\075\010\110\011\102\013" +
    "\053\014\103\015\076\016\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\123\004\070\005\100\006\077\007\115\011\102" +
    "\013\053\016\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\114\004\035\005\100\006\112\007\111" +
    "\011\102\013\053\016\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\114\004\070\005" +
    "\100\006\077\007\115\011\102\013\053\016\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\114\004\035\005\100\006\122\007\111\011\102" +
    "\013\053\016\046\001\001\000\022\003\114\004\035\005" +
    "\100\006\121\007\111\011\102\013\053\016\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\040\004\035\005\140\013\053" +
    "\016\046\001\001\000\014\003\040\004\035\005\137\013" +
    "\053\016\046\001\001\000\014\003\040\004\035\005\136" +
    "\013\053\016\046\001\001\000\014\003\040\004\035\005" +
    "\135\013\053\016\046\001\001\000\014\003\040\004\035" +
    "\005\134\013\053\016\046\001\001\000\014\003\040\004" +
    "\035\005\133\013\053\016\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\105\004\106" +
    "\005\100\006\077\007\075\010\110\011\102\013\053\014" +
    "\143\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\160\037" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\105\004\106\005" +
    "\100\006\077\007\075\010\110\011\102\013\053\014\162" +
    "\016\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\016\216\017\175\020\212\024\203\025\215\026\172\027" +
    "\220\030\177\031\173\032\211\033\207\036\201\042\206" +
    "\043\205\053\202\001\001\000\002\001\001\000\004\012" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\105\004\106\005" +
    "\100\006\077\007\075\010\110\011\102\013\053\014\331" +
    "\016\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\016\216\017\175\020\212\024\203\025\215\026\172\027" +
    "\220\030\177\031\173\032\211\033\207\036\201\043\304" +
    "\053\202\001\001\000\002\001\001\000\036\016\216\017" +
    "\175\020\212\024\203\025\215\026\172\027\220\030\177" +
    "\031\173\032\211\033\207\036\201\043\245\053\202\001" +
    "\001\000\002\001\001\000\010\003\276\013\053\016\046" +
    "\001\001\000\002\001\001\000\010\021\261\022\255\023" +
    "\260\001\001\000\010\003\251\013\053\016\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\040\004\035\005\230" +
    "\013\053\016\046\001\001\000\002\001\001\000\022\003" +
    "\114\004\035\005\100\006\232\007\111\011\102\013\053" +
    "\016\046\001\001\000\002\001\001\000\004\051\235\001" +
    "\001\000\002\001\001\000\014\003\040\004\035\005\237" +
    "\013\053\016\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\016\216\017\175\020\212\024\203\025\215" +
    "\026\172\027\220\030\177\031\173\032\211\033\207\036" +
    "\201\043\241\053\202\001\001\000\002\001\001\000\040" +
    "\016\216\017\175\020\212\024\203\025\215\026\172\027" +
    "\220\030\177\031\173\032\211\033\207\036\201\042\243" +
    "\043\205\053\202\001\001\000\036\016\216\017\175\020" +
    "\212\024\203\025\215\026\172\027\220\030\177\031\173" +
    "\032\211\033\207\036\201\043\245\053\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\105\004\106\005\100\006\077\007\075\010\110\011\102" +
    "\013\053\014\103\015\253\016\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\263\022\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\114\004\035\005\100\006\265\007\111\011\102\013" +
    "\053\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\016\216\017\175\020\212\024\203\025\215\026" +
    "\172\027\220\030\177\031\173\032\211\033\207\036\201" +
    "\042\270\043\205\053\202\001\001\000\036\016\216\017" +
    "\175\020\212\024\203\025\215\026\172\027\220\030\177" +
    "\031\173\032\211\033\207\036\201\043\245\053\202\001" +
    "\001\000\002\001\001\000\040\016\216\017\175\020\212" +
    "\024\203\025\215\026\172\027\220\030\177\031\173\032" +
    "\211\033\207\036\201\042\273\043\205\053\202\001\001" +
    "\000\036\016\216\017\175\020\212\024\203\025\215\026" +
    "\172\027\220\030\177\031\173\032\211\033\207\036\201" +
    "\043\245\053\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\105\004\106\005\100" +
    "\006\077\007\075\010\110\011\102\013\053\014\103\015" +
    "\300\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\016\216\017\175\020\212\024\203\025\215\026\172" +
    "\027\220\030\177\031\173\032\211\033\207\036\201\042" +
    "\306\043\205\053\202\001\001\000\036\016\216\017\175" +
    "\020\212\024\203\025\215\026\172\027\220\030\177\031" +
    "\173\032\211\033\207\036\201\043\245\053\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\114\004" +
    "\035\005\100\006\312\007\111\011\102\013\053\016\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\114\004\035\005\100\006\316\007\111" +
    "\011\102\013\053\016\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\114\004\035\005\100\006\323\007\111\011\102\013" +
    "\053\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\016\216\017\175\020\212\024\203\025\215\026" +
    "\172\027\220\030\177\031\173\032\211\033\207\036\201" +
    "\042\326\043\205\053\202\001\001\000\036\016\216\017" +
    "\175\020\212\024\203\025\215\026\172\027\220\030\177" +
    "\031\173\032\211\033\207\036\201\043\245\053\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\114\004\035\005\100\006" +
    "\334\007\111\011\102\013\053\016\046\001\001\000\002" +
    "\001\001\000\036\016\216\017\175\020\212\024\203\025" +
    "\215\026\172\027\220\030\177\031\173\032\211\033\207" +
    "\036\201\043\336\053\202\001\001\000\002\001\001\000" +
    "\040\016\216\017\175\020\212\024\203\025\215\026\172" +
    "\027\220\030\177\031\173\032\211\033\207\036\201\042" +
    "\340\043\205\053\202\001\001\000\036\016\216\017\175" +
    "\020\212\024\203\025\215\026\172\027\220\030\177\031" +
    "\173\032\211\033\207\036\201\043\245\053\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\105\004\106\005\100\006\077\007\075\010\110" +
    "\011\102\013\053\014\345\016\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\361\056\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u0108" +
    "\001\001\000\002\001\001\000\014\035\367\040\374\045" +
    "\370\046\373\052\371\001\001\000\006\036\357\037\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\367\040\u0101\047\376\052\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\016\216\017\175\020\212\024\203\025\215\026\172" +
    "\027\220\030\177\031\173\032\211\033\207\036\201\042" +
    "\u0104\043\205\053\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\016" +
    "\216\017\175\020\212\024\203\025\215\026\172\027\220" +
    "\030\177\031\173\032\211\033\207\036\201\043\245\053" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\035" +
    "\367\040\374\045\u010b\046\373\052\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    TablaSimbolos tablaSimbolos;
    TablaTipos tablaTipos;
    Logica logica;
    JTextArea area;


    public parser(Lexer lex,TablaSimbolos tablaSimbolos,TablaTipos tablaTipos,JTextArea area) {
        super(lex);
        this.tablaSimbolos = tablaSimbolos;
        this.tablaTipos = tablaTipos;
        logica = new Logica();
        this.area=area;
    }



  public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;
        System.out.println("OCURRIO UN ERROR SINTACTICO, FILA: " + token.getLine() + ", COLUMNA: " +token.getColumn() + " TOKEN:" +token.getLexeme());
	//Errores.crearError("SINTACTICO","OCURRIO UN ERROR SINTACTICO CON EL TOKEN: "+token.value,token.left,token.right);
	//Error error = Errores.ultimoError();
	//logica.mostrarError(error,area);
    }


  public void unrecovered_sintax_error(Symbol s){
	Token token = (Token) cur_token.value;
        System.out.println("OCURRIO UN ERROR SINTACTICO, FILA: " + token.getLine() + ", COLUMNA: " +token.getColumn() + " TOKEN:" +token.getLexeme());
	
  }
    
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= global EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // global ::= instructions 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	logica.operar(e,tablaSimbolos,tablaTipos);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction continuacionMain 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		for(int i=0;i<e2.size();i++){
			e1.add(e2.get(i));
		}
		RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= instruction variables PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> instrucciones = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AccionVariable> lista = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	
	List<Instruction> instructions = new ArrayList<>();
	for(int i=0;i<lista.size();i++){
		Declaracion declaracion = new Declaracion(lista.get(i).getTipoDato(),lista.get(i).getId(), tablaSimbolos, tablaTipos);
		declaracion.setAmbit(0);
		if(declaracion.validate()){
			instructions.add(declaracion);
		}
		if(lista.get(i).getTipoAccion().equals("ASIGNACION")){
			Asignacion asignacion = new Asignacion(lista.get(i).getId(),lista.get(i).getExpresion(),tablaSimbolos,tablaTipos);
			asignacion.setAmbit(0);
			if( asignacion.validate()){
				instructions.add(asignacion);
			}
		}	
	}
		
		for(int i=0;i<instructions.size();i++){
			instrucciones.add(instructions.get(i));
		}
		RESULT = instrucciones;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= instruction arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionArreglo e = (DeclaracionArreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		e.setAmbit(0);
		if(e.validate()){
		instructions.add(e);
		}
		RESULT = instructions;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= instruction subprogramas 
            {
              List<Instruction> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> lista = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subprogramaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subprogramaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Subprograma subprograma = (Subprograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(subprograma!=null){
		lista.add(subprograma);
		}
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= variables PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AccionVariable> lista = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

List<Instruction> instructions = new ArrayList<>();

	for(int i=0;i<lista.size();i++){
		Declaracion declaracion = new Declaracion(lista.get(i).getTipoDato(),lista.get(i).getId(), tablaSimbolos, tablaTipos);
		declaracion.setAmbit(0);
		if(declaracion.validate()){
			instructions.add(declaracion);
		}
		if(lista.get(i).getTipoAccion().equals("ASIGNACION")){
			Asignacion asignacion = new Asignacion(lista.get(i).getId(),lista.get(i).getExpresion(),tablaSimbolos,tablaTipos);
			asignacion.setAmbit(0);
			if( asignacion.validate()){
				instructions.add(asignacion);
			}
		}	
	}

		RESULT = instructions;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionArreglo e = (DeclaracionArreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> instructions = new ArrayList<>();
		e.setAmbit(0);
		if(e.validate()){
		instructions.add(e);
		}
		RESULT = instructions;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= subprogramas 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Subprograma e = (Subprograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> instructions = new ArrayList<>();
		if(e!=null){
		instructions.add(e);
		}
		RESULT = instructions;
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= error PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		ArrayList<Instruction> lista= new ArrayList<>(); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // continuacionMain ::= SEPARADOR main 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuacionMain",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // main ::= MAIN CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	boolean bandera = true, bandera2 = true;
	for(int i=0;i<e.size();i++){	
		e.get(i).setAmbit(0);			
	}
	
	
	
	for(int i=0;i<e.size();i++){
		if(e.get(i) instanceof Return){
			Return r = (Return) e.get(i);
			r.setTipoReturn("void");
			CErrores.agregarError("SEMANTICO","RETURN", null , 0 , "SUBPROGRAMA", r.getToken().getLine(),r.getToken().getLine(),"LA INSTRUCCION RETURN  NO PUEDE IR EN EL MAIN, ES EXCLUSIVO DE FUNCIONES QUE DEVUELVEN VALORES.");
			bandera = false;
		}else{
			bandera2 = e.get(i).validate();
		}
		if(!bandera2){
			bandera = false;
		}	
	}
	if(bandera){
		RESULT = e;
	}else{
		e.clear();
		RESULT = e;
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables ::= variables COMA asignacion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AccionVariable> e1 = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String tipo = e1.get(0).getTipoDato();
	e2.setTipoDato(tipo);
	e1.add(e2);
	RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables ::= variables COMA declaracion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<AccionVariable> e1 = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	String tipo = e1.get(0).getTipoDato();
	e2.setTipoDato(tipo);
	e1.add(e2);
	RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= tipoVariable asignacion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<AccionVariable> list = new ArrayList<>();
		e2.setTipoDato(e1);
		list.add(e2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= tipoVariable declaracion 
            {
              List<AccionVariable> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccionVariable e2 = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<AccionVariable> list = new ArrayList<>();
		e2.setTipoDato(e1);
		list.add(e2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= error PUNTO_COMA 
            {
              List<AccionVariable> RESULT =null;
		List<AccionVariable> list = new ArrayList<>(); RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= IDD ASIGNACION expresion 
            {
              AccionVariable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dato dato = new Dato(e,"VARIABLE",null);		
		RESULT = new AccionVariable("ASIGNACION",dato,expresion);	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= IDD 
            {
              AccionVariable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dato dato = new Dato(e,"VARIABLE",null);		
		RESULT = new AccionVariable("DECLARACION",dato,null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arreglos ::= ARRAY tipoVariable dimensiones ids 
            {
              DeclaracionArreglo RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpresionAritmetica> dimensiones = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Token> ids = (List<Token>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Dato> datos = new ArrayList<>();
		for(int i=0;i<ids.size();i++){
			datos.add(new Dato(ids.get(i),"ARREGLO",null));			
		}
		DeclaracionArreglo arreglo = new DeclaracionArreglo(tipo, datos, dimensiones, tablaSimbolos, tablaTipos,token);
		RESULT = arreglo;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacionArreglo ::= IDD dimensiones ASIGNACION expresion 
            {
              AsignacionArreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ExpresionAritmetica> dimensiones = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expresion = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Dato dato = new Dato(id,"ARREGLO",null);
	AsignacionArreglo arreglo = new AsignacionArreglo(dato, dimensiones,expresion,tablaSimbolos, tablaTipos);
	RESULT = arreglo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionArreglo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dimensiones ::= dimensiones CORCHETE_ABIERTO exprAritmetica CORCHETE_CERRADO 
            {
              List<ExpresionAritmetica> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<ExpresionAritmetica> e1 = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionAritmetica expresion = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		e1.add(expresion);
		RESULT = e1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dimensiones ::= CORCHETE_ABIERTO exprAritmetica CORCHETE_CERRADO 
            {
              List<ExpresionAritmetica> RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionAritmetica expresion = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<ExpresionAritmetica> lista = new ArrayList<>();
		lista.add(expresion);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimensiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ids ::= ids COMA IDD 
            {
              List<Token> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Token> e1 = (List<Token>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	e1.add(e2);
	RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ids ::= IDD 
            {
              List<Token> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	List<Token> lista = new ArrayList<>();
	lista.add(e);
	RESULT = lista;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoVariable ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT="Boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoVariable ::= CHAR 
            {
              String RESULT =null;
		RESULT="Integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoVariable ::= BYTE 
            {
              String RESULT =null;
		RESULT="Byte";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoVariable ::= INT 
            {
              String RESULT =null;
		RESULT="Integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoVariable ::= LONG 
            {
              String RESULT =null;
		RESULT="Long";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoVariable ::= FLOAT 
            {
              String RESULT =null;
		RESULT="Float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoVariable ::= DOUBLE 
            {
              String RESULT =null;
		RESULT="Double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoVariable ::= STRING 
            {
              String RESULT =null;
		RESULT="String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoVariable ::= VOID 
            {
              String RESULT =null;
		RESULT="void";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariable",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subprogramas ::= tipoVariable IDD PARENTESIS_ABIERTO parametros PARENTESIS_CERRADO CORCHETE_ABIERTO instructionsSubprograma CORCHETE_CERRADO 
            {
              Subprograma RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Parametros> parametros = (List<Parametros>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instrucciones = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		boolean bandera = false,banderaReturn = false,bandera2 = true,banderaExiste=false;
		int ambito = Ambitos.siguienteAmbito();
		List<String> listaTipos = new ArrayList<>();
		
		for(int i=0;i<instrucciones.size();i++){
			instrucciones.get(i).setAmbit(ambito);
		}

		Dato dato = new Dato(id,"VARIABLE",null);
		if (tablaSimbolos.verDato(id.getLexeme(),0,"SUBPROGRAMA") ){
			bandera = true;
			banderaExiste = true;
			CErrores.agregarError("SEMANTICO","DECLARACION", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),"EL ID: "+id.getLexeme()+
			" YA EXISTE EN LA TABLA DE SIMBOLOS POR LO CUAL NO SE PUEDE CREAR.");
		}
		
		for(int i=0;i<parametros.size();i++){
			if(parametros.get(i).getTipo().equals("void")){
				bandera =true;
				CErrores.agregarError("SEMANTICO","TIPO", parametros.get(i).getId() , ambito , "PARAMETRO", parametros.get(i).getId().getNombre().getLine(),parametros.get(i).getId().getNombre().getLine(),"EL ID: "+parametros.get(i).getId().getNombre().getLexeme()+
			" TIENE COMO TIPO DE VARIABLE LA PALABRA RESERVADA VOID, ESTE TIPO NO SE ACEPTA EN VARIABLES, PARAMETROS O ARREGLOS, SOLO FUNCIONES");
			}else{
				listaTipos.add(parametros.get(i).getTipo());
			}
		}

		
		
		


		for (int i = 0; i < instrucciones.size(); i++) {
            		if(instrucciones.get(i) instanceof Return ){
                		banderaReturn = true;
                		Return r = (Return) instrucciones.get(i);
                		r.setTipoReturn(tipo);
                                r.settSalida("tSalida"+id.getLexeme());
                                r.setEtSalida("ETsalida"+id.getLexeme());
                		if(tipo.equals("void")){
                			bandera =true;
                			CErrores.agregarError("SEMANTICO","RETURN", dato , 0 , "SUBPROGRAMA", r.getToken().getLine(),r.getToken().getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" TIENE RETURN, CUANDO ES DE TIPO VOID Y NO DEBE DE TENER NINGUN RETURN.");
            				instrucciones.remove(i);
            				i--;
                		}
			}
            	}

		banderaReturn = logica.asignarReturn(instrucciones,tipo,"tSalida"+id.getLexeme());
            	
            	if(!banderaReturn && !tipo.equals("void")){
	            	bandera =true;
            		CErrores.agregarError("SEMANTICO","RETURN", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" NO TIENE NINGUN RETURN, DEBERIA DE TENER MINIMO UNO.");

            	}
            	
            	
            	
            	for (int i = 0; i < instrucciones.size(); i++) {
			if(instrucciones.get(i) instanceof Call){
				Call call = (Call)instrucciones.get(i);
				if(call.getId().getLexeme().equals(id.getLexeme())){
					bandera = true;
					CErrores.agregarError("SEMANTICO","RECURSION", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" TIENE RECURSION, LO CUAL NO ES PERMITIDO.");
				}
			}
		}
		
		List<String> valores = new ArrayList<>();
		for (int i = 0; i < parametros.size(); i++) {
            		valores.add(parametros.get(i).getTipo());
		}
		Simbolos a=null;
		if(!banderaExiste){
	        a = new Simbolos(id.getLexeme(), "SUBPROGRAMA",tipo, ambito, parametros.size(), valores, instrucciones, "tSalida"+id.getLexeme() ,"ETsalida"+id.getLexeme());
	        tablaSimbolos.addElementInGeneral(a);
	        }
		List<String> listadoParams = new ArrayList<>();
        	for (int i = 0; i < parametros.size(); i++) {
			listadoParams.add(parametros.get(i).getId().getNombre().getLexeme()+id.getLexeme());
			Temporales.agregarT(listadoParams.get(listadoParams.size()-1), parametros.get(i).getTipo());
            		Simbolos simb = new Simbolos(parametros.get(i).getId().getNombre().getLexeme(),"PARAMETRO", parametros.get(i).getTipo(),ambito);
            		tablaSimbolos.addElementInAmbit(simb);
		}
		if(!banderaExiste){
			a.setTemporalesParametros(listadoParams);
		}		

        	for (int i = 0; i < instrucciones.size(); i++) {
            		bandera2 = instrucciones.get(i).validate();
           		 if (!bandera2) {
               		 	bandera = true;
            		}
		}

		
		
		if(!bandera){
		Subprograma subprograma = new Subprograma(tipo,dato,parametros,instrucciones,tablaSimbolos,tablaTipos);
		RESULT = subprograma;
		
		}else{
			logica.removerParametros(valores,ambito,tablaSimbolos);
			if(!banderaExiste)
			logica.removerFuncion(id.getLexeme(),tablaSimbolos); 
			RESULT = null;
		}
		
		
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subprogramas ::= tipoVariable IDD PARENTESIS_ABIERTO PARENTESIS_CERRADO CORCHETE_ABIERTO instructionsSubprograma CORCHETE_CERRADO 
            {
              Subprograma RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instrucciones = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Parametros> parametros = new ArrayList<>();
		boolean bandera = false,banderaReturn = false,bandera2 = true,banderaExiste=false;
		int ambito = Ambitos.siguienteAmbito();
		List<String> listaTipos = new ArrayList<>();
		
		for(int i=0;i<instrucciones.size();i++){
			instrucciones.get(i).setAmbit(ambito);
		}

		Dato dato = new Dato(id,"VARIABLE",null);
		if (tablaSimbolos.verDato(id.getLexeme(),0,"SUBPROGRAMA") ){
			bandera = true;
			banderaExiste = true;
			CErrores.agregarError("SEMANTICO","DECLARACION", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),"EL ID: "+id.getLexeme()+
			" YA EXISTE EN LA TABLA DE SIMBOLOS POR LO CUAL NO SE PUEDE CREAR.");
		}
		
		for(int i=0;i<parametros.size();i++){
			if(parametros.get(i).getTipo().equals("void")){
				bandera =true;
				CErrores.agregarError("SEMANTICO","TIPO", parametros.get(i).getId() , ambito , "PARAMETRO", parametros.get(i).getId().getNombre().getLine(),parametros.get(i).getId().getNombre().getLine(),"EL ID: "+parametros.get(i).getId().getNombre().getLexeme()+
			" TIENE COMO TIPO DE VARIABLE LA PALABRA RESERVADA VOID, ESTE TIPO NO SE ACEPTA EN VARIABLES, PARAMETROS O ARREGLOS, SOLO FUNCIONES");
			}else{
				listaTipos.add(parametros.get(i).getTipo());
			}
		}

		
		


		for (int i = 0; i < instrucciones.size(); i++) {
            		if(instrucciones.get(i) instanceof Return ){
                		banderaReturn = true;
                		Return r = (Return) instrucciones.get(i);
                		r.setTipoReturn(tipo);
                                r.settSalida("tSalida"+id.getLexeme());
                                r.setEtSalida("ETsalida"+id.getLexeme());
                		if(tipo.equals("void")){
                			bandera =true;
                			CErrores.agregarError("SEMANTICO","RETURN", dato , 0 , "SUBPROGRAMA", r.getToken().getLine(),r.getToken().getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" TIENE RETURN, CUANDO ES DE TIPO VOID Y NO DEBE DE TENER NINGUN RETURN.");
            				instrucciones.remove(i);
            				i--;
                		}
			}
            	}
            	
		banderaReturn = logica.asignarReturn(instrucciones,tipo,"tSalida"+id.getLexeme());

            	if(!banderaReturn && !tipo.equals("void")){
	            	bandera =true;
            		CErrores.agregarError("SEMANTICO","RETURN", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" NO TIENE NINGUN RETURN, DEBERIA DE TENER MINIMO UNO.");

            	}
            	
            	
            	
            	for (int i = 0; i < instrucciones.size(); i++) {
			if(instrucciones.get(i) instanceof Call){
				Call call = (Call)instrucciones.get(i);
				if(call.getId().getLexeme().equals(id.getLexeme())){
					bandera = true;
					CErrores.agregarError("SEMANTICO","RECURSION", dato , 0 , "SUBPROGRAMA", id.getLine(),id.getLine(),
            				" EL SUBPROGRAMA "+id.getLexeme()+" TIENE RECURSION, LO CUAL NO ES PERMITIDO.");
				}
			}
		}
		
		List<String> valores = new ArrayList<>();
		for (int i = 0; i < parametros.size(); i++) {
            		valores.add(parametros.get(i).getTipo());
		}
		Simbolos a=null;
		if(!banderaExiste){
	        a = new Simbolos(id.getLexeme(), "SUBPROGRAMA",tipo, ambito, parametros.size(), valores, instrucciones, "tSalida"+id.getLexeme() ,"ETsalida"+id.getLexeme());
	        tablaSimbolos.addElementInGeneral(a);
	        }
		List<String> listadoParams = new ArrayList<>();
        	for (int i = 0; i < parametros.size(); i++) {
			listadoParams.add(parametros.get(i).getId().getNombre().getLexeme()+id.getLexeme());
			Temporales.agregarT(listadoParams.get(listadoParams.size()-1), parametros.get(i).getTipo());
            		Simbolos simb = new Simbolos(parametros.get(i).getId().getNombre().getLexeme(),"PARAMETRO", parametros.get(i).getTipo(),ambito);
            		tablaSimbolos.addElementInAmbit(simb);
		}
		if(!banderaExiste){
			a.setTemporalesParametros(listadoParams);
		}		

        	for (int i = 0; i < instrucciones.size(); i++) {
            		bandera2 = instrucciones.get(i).validate();
           		 if (!bandera2) {
               		 	bandera = true;
            		}
		}

		
		
		if(!bandera){
		Subprograma subprograma = new Subprograma(tipo,dato,parametros,instrucciones,tablaSimbolos,tablaTipos);
		RESULT = subprograma;
		
		}else{
			logica.removerParametros(valores,ambito,tablaSimbolos);
			if(!banderaExiste)
			logica.removerFuncion(id.getLexeme(),tablaSimbolos); 
			RESULT = null;
		}
		
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= parametros COMA tipoVariable IDD 
            {
              List<Parametros> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Parametros> lista = (List<Parametros>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Dato dato = new Dato(id,"VARIABLE",null);
	Parametros parametros = new Parametros(tipo,dato);
	lista.add(parametros);
	RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros ::= tipoVariable IDD 
            {
              List<Parametros> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Dato dato = new Dato(id,"VARIABLE",null);
	Parametros parametros = new Parametros(tipo,dato);
	List<Parametros> lista = new ArrayList<>();
	lista.add(parametros);
	RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instructionsSubprograma ::= instructionSubprograma continuacionSubprograma 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	for(int i=0;i<e2.size();i++){
		e1.add(e2.get(i));
	}
	RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionsSubprograma",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructionSubprograma ::= variables PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AccionVariable> lista = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	List<Instruction> instructions = new ArrayList<>();
	for(int i=0;i<lista.size();i++){
		Declaracion declaracion = new Declaracion(lista.get(i).getTipoDato(),lista.get(i).getId(), tablaSimbolos, tablaTipos);
		instructions.add(declaracion);
		if(lista.get(i).getTipoAccion().equals("ASIGNACION")){
			Asignacion asignacion = new Asignacion(lista.get(i).getId(),lista.get(i).getExpresion(),tablaSimbolos,tablaTipos);
			instructions.add(asignacion);
		}	
	}

		RESULT = instructions;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionSubprograma",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instructionSubprograma ::= arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionArreglo e = (DeclaracionArreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> instructions = new ArrayList<>();
		instructions.add(e);
		RESULT = instructions;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionSubprograma",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instructionSubprograma ::= instructionSubprograma variables PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int subprogramaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int subprogramaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> subprograma = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<AccionVariable> lista = (List<AccionVariable>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	
	List<Instruction> instructions = new ArrayList<>();
	for(int i=0;i<lista.size();i++){
		Declaracion declaracion = new Declaracion(lista.get(i).getTipoDato(),lista.get(i).getId(), tablaSimbolos, tablaTipos);
		instructions.add(declaracion);
		if(lista.get(i).getTipoAccion().equals("ASIGNACION")){
			Asignacion asignacion = new Asignacion(lista.get(i).getId(),lista.get(i).getExpresion(),tablaSimbolos,tablaTipos);
			instructions.add(asignacion);
		}	
	}
		
		for(int i=0;i<instructions.size();i++){
			subprograma.add(instructions.get(i));
		}
		RESULT = subprograma;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionSubprograma",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructionSubprograma ::= instructionSubprograma arreglos PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracionArreglo e = (DeclaracionArreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		instructions.add(e);
		RESULT = instructions;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionSubprograma",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instructionSubprograma ::= error PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		ArrayList<Instruction> lista= new ArrayList<>(); RESULT = lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionSubprograma",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // continuacionSubprograma ::= SEPARADOR flujos 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuacionSubprograma",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // flujos ::= flujos flujo 
            {
              List<Instruction> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	for(int i=0;i<e2.size();i++){
		e1.add(e2.get(i));
	}
	RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // flujos ::= flujo 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // flujo ::= asignacion PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AccionVariable e = (AccionVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Asignacion asignacion = new Asignacion(e.getId(),e.getExpresion(),tablaSimbolos,tablaTipos);
		List<Instruction> lista = new ArrayList<>();
		lista.add(asignacion);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // flujo ::= asignacionArreglo PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AsignacionArreglo e = (AsignacionArreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // flujo ::= estructura_if 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // flujo ::= estructura_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While e = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // flujo ::= estructura_do_while 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DoWhile e = (DoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // flujo ::= estructura_for 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For e = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // flujo ::= estructura_print PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print e = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // flujo ::= estructura_println PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Println e = (Println)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // flujo ::= estructura_scann PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Scann e = (Scann)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // flujo ::= estructura_scans PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Scans e = (Scans)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // flujo ::= estructura_return PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Return e = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // flujo ::= estructura_call PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call e = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // flujo ::= error PUNTO_COMA 
            {
              List<Instruction> RESULT =null;
		
		List<Instruction> lista = new ArrayList<>();
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // flujo ::= error CORCHETE_CERRADO 
            {
              List<Instruction> RESULT =null;
		
		List<Instruction> lista = new ArrayList<>();
		RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flujo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructura_if ::= base_if 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BaseIf e = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e,null,null,tablaSimbolos,tablaTipos);
		RESULT = iff;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructura_if ::= base_if ciclo_elsif 
            {
              If RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Elsif> e2 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e1,e2,null,tablaSimbolos,tablaTipos);
		RESULT = iff;
	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructura_if ::= base_if base_else 
            {
              If RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else e2 = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		If iff = new If(e1,null,e2,tablaSimbolos,tablaTipos);
		RESULT = iff;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructura_if ::= base_if ciclo_elsif base_else 
            {
              If RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BaseIf e1 = (BaseIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Elsif> e2 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else e3 = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	
	If iff = new If(e1,e2,e3,tablaSimbolos,tablaTipos);
	RESULT = iff;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclo_elsif ::= ciclo_elsif base_elsif 
            {
              List<Elsif> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Elsif> e1 = (List<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elsif e2 = (Elsif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		e1.add(e2);
		RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_elsif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ciclo_elsif ::= base_elsif 
            {
              List<Elsif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elsif e = (Elsif)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		List<Elsif> lista = new ArrayList<>();
		lista.add(e);
		RESULT = lista;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_elsif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // base_if ::= IF PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              BaseIf RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpresionBooleana condicional = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	
		BaseIf base = new BaseIf(condicional,instructions,token,tablaSimbolos,tablaTipos);
		RESULT = base;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_if",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // base_else ::= ELSE CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              Else RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		
		Else sino = new Else(e,token,tablaSimbolos,tablaTipos);
		RESULT = sino;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_else",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // base_elsif ::= ELSIF PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              Elsif RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpresionBooleana condicional = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Elsif elsif = new Elsif(condicional, instructions, token,tablaSimbolos,tablaTipos);
		RESULT = elsif;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_elsif",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructura_while ::= WHILE PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpresionBooleana e1 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			While nuevo = new While(e1,e2,tablaSimbolos,tablaTipos,token);
			RESULT = nuevo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructura_while ::= WHILE PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO flujo 
            {
              While RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionBooleana e1 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> e2 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			List<Instruction> lista = new ArrayList<>();	
			lista.add(e2.get(0));
			While nuevo = new While(e1,lista,tablaSimbolos,tablaTipos,token);
			RESULT = nuevo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructura_do_while ::= DO CORCHETE_ABIERTO flujos CORCHETE_CERRADO WHILE PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO 
            {
              DoWhile RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionBooleana e2 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		DoWhile nuevo = new DoWhile(e2,e1,tablaSimbolos,tablaTipos,token);
		RESULT = nuevo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_do_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructura_do_while ::= DO flujo WHILE PARENTESIS_ABIERTO exprBooleana PARENTESIS_CERRADO 
            {
              DoWhile RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Instruction> e1 = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionBooleana e2 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List<Instruction> lista = new ArrayList<>();
		lista.add(e1.get(0));
		DoWhile nuevo = new DoWhile(e2,lista,tablaSimbolos,tablaTipos,token);
		RESULT =nuevo;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_do_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // estructura_for ::= FOR PARENTESIS_ABIERTO IDD ASIGNACION exprAritmetica DOS_PUNTOS exprBooleana DOS_PUNTOS signo exprAritmetica PARENTESIS_CERRADO CORCHETE_ABIERTO flujos CORCHETE_CERRADO 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ExpresionAritmetica expr = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpresionBooleana condicional = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean signo = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpresionAritmetica expresion2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instruction> lista = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

		Dato dato = new Dato(id,"VARIABLE",null);			
		For nuevo = new For(expr,expresion2,condicional,dato,signo,lista,tablaSimbolos,tablaTipos,token);
		RESULT = nuevo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructura_for ::= FOR PARENTESIS_ABIERTO IDD ASIGNACION exprAritmetica DOS_PUNTOS exprBooleana DOS_PUNTOS signo exprAritmetica PARENTESIS_CERRADO flujo 
            {
              For RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ExpresionAritmetica expr = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpresionBooleana condicional = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean signo = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresion2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expresion2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica expresion2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instruction> instr = (List<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		
			Dato dato = new Dato(id,"VARIABLE",null);
			List<Instruction> lista = new ArrayList<>();
			lista.add(instr.get(0));
			For nuevo = new For(expr,expresion2,condicional,dato,signo,lista,tablaSimbolos,tablaTipos,token);
			RESULT = nuevo;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // signo ::= SUMA 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // signo ::= RESTA 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura_print ::= PRINT CORCHETE_ABIERTO expresiones CORCHETE_CERRADO 
            {
              Print RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
	Print print = new Print(e,tablaSimbolos,tablaTipos,token);
	RESULT = print;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_print",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura_print ::= PRINT valorLiteral 
            {
              Print RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
	ExpresionUnica expr = new ExpresionUnica(e);
	List<Expresion> lista = new ArrayList<>();
	lista.add(expr);
	Print print = new Print(lista,tablaSimbolos,tablaTipos,token);
	RESULT = print;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_print",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructura_println ::= PRINTLN CORCHETE_ABIERTO expresiones CORCHETE_CERRADO 
            {
              Println RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> e = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Println print = new Println(e,tablaSimbolos,tablaTipos,token);
	RESULT = print;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_println",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructura_println ::= PRINTLN valorLiteral 
            {
              Println RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
	ExpresionUnica expr = new ExpresionUnica(e);
	List<Expresion> lista = new ArrayList<>();
	lista.add(expr);
	Println print = new Println(lista,tablaSimbolos,tablaTipos,token);
	RESULT = print;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_println",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructura_scann ::= SCANN CORCHETE_ABIERTO IDD CORCHETE_CERRADO 
            {
              Scann RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Dato dato = new Dato(e,"VARIABLE",null);
		ExpresionUnica expr = new ExpresionUnica(dato);
		Scann s = new Scann(expr,tablaSimbolos,tablaTipos,token);
		RESULT = s;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_scann",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructura_scans ::= SCANS CORCHETE_ABIERTO IDD CORCHETE_CERRADO 
            {
              Scans RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		Dato dato = new Dato(e,"VARIABLE",null);
		ExpresionUnica expr = new ExpresionUnica(dato);
		Scans s = new Scans(expr,tablaSimbolos,tablaTipos,token);
		RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_scans",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructura_call ::= IDD PARENTESIS_ABIERTO expresiones PARENTESIS_CERRADO 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expresion> expr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Call call = new Call(id,expr,tablaSimbolos,tablaTipos);
	RESULT = call;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_call",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estructura_call ::= IDD PARENTESIS_ABIERTO PARENTESIS_CERRADO 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	Call call = new Call(id, new ArrayList<Expresion>(),tablaSimbolos,tablaTipos);
	RESULT = call;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_call",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresiones ::= expresiones COMA expresion 
            {
              List<Expresion> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expresion> e1 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	e1.add(e2);
	RESULT = e1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresiones ::= expresion 
            {
              List<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	List<Expresion> lista = new ArrayList<>();
	lista.add(e);
	RESULT = lista;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estructura_return ::= RETURN expresion 
            {
              Return RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Return(expr,tablaSimbolos,tablaTipos,token);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_return",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresionAritmetica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Expresion expr = e;RESULT = expr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresionBooleana 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionBooleana e = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Expresion expr = e;RESULT = expr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresionUnica 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionUnica e = (ExpresionUnica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Expresion expr = e;RESULT = expr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionUnica ::= valorLiteral 
            {
              ExpresionUnica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionUnica(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionUnica ::= PARENTESIS_ABIERTO valorLiteral PARENTESIS_CERRADO 
            {
              ExpresionUnica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExpresionUnica(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionUnica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionAritmetica ::= exprAritmetica SUMA exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionAritmetica ::= exprAritmetica RESTA exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionAritmetica ::= exprAritmetica MULTIPLICACION exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionAritmetica ::= exprAritmetica DIVISION exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionAritmetica ::= exprAritmetica MODULO exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionAritmetica ::= RESTA exprAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(new Token("--",token.getLine(),token.getColumn()),e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionAritmetica ::= PARENTESIS_ABIERTO expresionAritmetica PARENTESIS_CERRADO 
            {
              ExpresionAritmetica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionAritmetica e = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exprAritmetica ::= valorLiteral 
            {
              ExpresionAritmetica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionAritmetica(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exprAritmetica ::= expresionAritmetica 
            {
              ExpresionAritmetica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionBooleana ::= exprBooleana OR exprBooleana 
            {
              ExpresionBooleana RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionBooleana e1 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionBooleana e2 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionBooleana(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionBooleana ::= exprBooleana AND exprBooleana 
            {
              ExpresionBooleana RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionBooleana e1 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionBooleana e2 = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionBooleana(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionBooleana ::= NOT exprBooleana 
            {
              ExpresionBooleana RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionBooleana e = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionBooleana(token,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionBooleana ::= PARENTESIS_ABIERTO expresionBooleana PARENTESIS_CERRADO 
            {
              ExpresionBooleana RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpresionBooleana e = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionBooleana ::= condicion 
            {
              ExpresionBooleana RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condicion e = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  new ExpresionBooleana(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionBooleana",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exprBooleana ::= valorLiteral 
            {
              ExpresionBooleana RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dato e = (Dato)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpresionBooleana(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exprBooleana ::= expresionBooleana 
            {
              ExpresionBooleana RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionBooleana e = (ExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= exprAritmetica MAYOR exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion ::= exprAritmetica MENOR exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicion ::= exprAritmetica MAYOR_IGUAL exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // condicion ::= exprAritmetica MENOR_IGUAL exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicion ::= exprAritmetica DIFERENTE exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicion ::= exprAritmetica IGUAL exprAritmetica 
            {
              Condicion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpresionAritmetica e1 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica e2 = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Condicion(token,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valorLiteral ::= NUMERO_ENTERO 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Integer",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valorLiteral ::= NUMERO_BYTE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Byte",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valorLiteral ::= NUMERO_DOUBLE 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Double",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valorLiteral ::= NUMERO_FLOAT 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Float",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valorLiteral ::= NUMERO_LONG 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Long",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valorLiteral ::= LEX_STRING 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"String",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valorLiteral ::= BOOLEANO 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"Boolean",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valorLiteral ::= IDD 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e,"VARIABLE",null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valorLiteral ::= literalArreglo 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo e = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e.getId(),"ARREGLO",e.getLista());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valorLiteral ::= estructura_call 
            {
              Dato RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call e = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Dato(e.getId(),"SUBPROGRAMA",e.getLista());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorLiteral",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literalArreglo ::= IDD dimensiones 
            {
              Arreglo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ExpresionAritmetica> dimensiones = (List<ExpresionAritmetica>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Arreglo arreglo= new Arreglo(id,dimensiones);
	RESULT = arreglo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("literalArreglo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
