
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practica1comp2.backend.analizadores;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import javax.swing.JTextArea;
import practica1comp2.backend.expresiones.Expresion;
import practica1comp2.backend.instrucciones.*;
import practica1comp2.backend.analizadores.simbolos.*;
import practica1comp2.backend.generadores.GeneradorCod;
import practica1comp2.backend.generadores.EtiqCondicion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\035\003\000\002\002" +
    "\004\000\002\002\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\004\000\002\016\005\000\002\016\003\000\002\020" +
    "\003\000\002\020\003\000\002\022\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\026\004\000\002\026\004\000" +
    "\002\026\003\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\006\005\000\002\017\005\000\002\017\003" +
    "\000\002\036\006\000\002\036\003\000\002\037\006\000" +
    "\002\007\007\000\002\007\011\000\002\007\010\000\002" +
    "\007\012\000\002\011\004\000\002\011\003\000\002\012" +
    "\007\000\002\013\007\000\002\014\010\000\002\015\013" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\010\006\000\002\010\006\000\002" +
    "\034\005\000\002\034\003\000\002\003\005\000\002\003" +
    "\003\000\002\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\042\004\022\005\010\006\011\007\007\010" +
    "\004\011\027\012\040\013\024\046\034\047\037\050\015" +
    "\053\012\054\020\055\035\056\033\057\030\001\002\000" +
    "\006\036\uffeb\046\uffeb\001\002\000\044\002\000\004\022" +
    "\005\010\006\011\007\007\010\004\011\027\012\040\013" +
    "\024\046\034\047\037\050\015\053\012\054\020\055\035" +
    "\056\033\057\030\001\002\000\004\046\232\001\002\000" +
    "\006\036\uffec\046\uffec\001\002\000\006\036\uffee\046\uffee" +
    "\001\002\000\006\036\uffed\046\uffed\001\002\000\004\034" +
    "\224\001\002\000\052\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\037\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\001\002\000\046\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\037\ufffe\046\ufffe\047\ufffe\050\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000\004\034\204" +
    "\001\002\000\004\002\203\001\002\000\004\043\201\001" +
    "\002\000\044\004\022\005\010\006\011\007\007\010\004" +
    "\011\027\012\040\013\024\036\141\046\034\047\037\050" +
    "\015\053\012\054\020\055\035\056\033\057\030\001\002" +
    "\000\004\041\173\001\002\000\006\036\uffef\046\uffef\001" +
    "\002\000\052\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\037\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\001\002\000\006\036\uffe8\046\uffe8\001" +
    "\002\000\004\041\172\001\002\000\052\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\037\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000" +
    "\006\036\uffea\046\uffea\001\002\000\004\036\167\001\002" +
    "\000\004\041\166\001\002\000\004\041\165\001\002\000" +
    "\004\036\157\001\002\000\052\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\154\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002\000\004\034" +
    "\130\001\002\000\052\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\037\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\001\002\000\022\004\022\005" +
    "\010\006\011\007\007\010\004\011\027\012\040\013\024" +
    "\001\002\000\006\036\uffe9\046\uffe9\001\002\000\004\046" +
    "\124\001\002\000\004\036\043\001\002\000\024\015\044" +
    "\021\046\024\053\025\060\034\062\044\055\045\051\046" +
    "\034\060\045\001\002\000\024\015\044\021\046\024\053" +
    "\025\060\034\062\044\055\045\051\046\034\060\045\001" +
    "\002\000\046\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\022\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\024\015\044\021\046\024\053\025\060\034" +
    "\062\044\055\045\051\046\034\060\045\001\002\000\046" +
    "\014\uffe5\015\uffe5\016\101\017\100\020\077\022\uffe5\023" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\024\022\uffd0\023\uffd0\032\uffd0\033\uffd0\035\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\001\002\000\046\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002\000\024\022\uffd3" +
    "\023\uffd3\032\115\033\116\035\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\001\002\000\046\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\001\002\000\020\022\113\023\uffd5\035" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\046" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000" +
    "\046\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001\002" +
    "\000\046\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022" +
    "\uffde\023\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042\uffde\001" +
    "\002\000\046\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\001\002\000\006\023\111\037\121\001\002\000\024\015" +
    "\044\021\046\024\053\025\060\034\062\044\055\045\051" +
    "\046\034\060\045\001\002\000\046\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\001\002\000\040\014\065\015\067" +
    "\022\uffcb\023\uffcb\026\072\027\071\030\070\031\066\032" +
    "\uffcb\033\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\001\002\000\024\015\044\021\046\024\053\025\060\034" +
    "\062\044\055\045\051\046\034\060\045\001\002\000\024" +
    "\015\044\021\046\024\053\025\060\034\062\044\055\045" +
    "\051\046\034\060\045\001\002\000\024\015\044\021\046" +
    "\024\053\025\060\034\062\044\055\045\051\046\034\060" +
    "\045\001\002\000\024\015\044\021\046\024\053\025\060" +
    "\034\062\044\055\045\051\046\034\060\045\001\002\000" +
    "\024\015\044\021\046\024\053\025\060\034\062\044\055" +
    "\045\051\046\034\060\045\001\002\000\024\015\044\021" +
    "\046\024\053\025\060\034\062\044\055\045\051\046\034" +
    "\060\045\001\002\000\030\014\065\015\067\022\uffcc\023" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\030\014\065\015\067\022\uffcf\023" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\001\002\000\030\014\065\015\067\022\uffcd\023" +
    "\uffcd\032\uffcd\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\001\002\000\046\014\uffe6\015\uffe6\016\101\017" +
    "\100\020\077\022\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\035\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\001\002\000\024\015\044\021\046\024\053" +
    "\025\060\034\062\044\055\045\051\046\034\060\045\001" +
    "\002\000\024\015\044\021\046\024\053\025\060\034\062" +
    "\044\055\045\051\046\034\060\045\001\002\000\024\015" +
    "\044\021\046\024\053\025\060\034\062\044\055\045\051" +
    "\046\034\060\045\001\002\000\046\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\001\002\000\046\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\001\002\000\046\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000\030\014\065" +
    "\015\067\022\uffce\023\uffce\032\uffce\033\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\001\002\000\046\014\uffe7" +
    "\015\uffe7\016\101\017\100\020\077\022\uffe7\023\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\006\023" +
    "\111\035\110\001\002\000\046\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\001\002\000\024\015\044\021\046\024" +
    "\053\025\060\034\062\044\055\045\051\046\034\060\045" +
    "\001\002\000\020\022\113\023\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\001\002\000\024\015\044\021\046" +
    "\024\053\025\060\034\062\044\055\045\051\046\034\060" +
    "\045\001\002\000\024\022\uffd4\023\uffd4\032\115\033\116" +
    "\035\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000" +
    "\024\015\044\021\046\024\053\025\060\034\062\044\055" +
    "\045\051\046\034\060\045\001\002\000\024\015\044\021" +
    "\046\024\053\025\060\034\062\044\055\045\051\046\034" +
    "\060\045\001\002\000\024\022\uffd1\023\uffd1\032\uffd1\033" +
    "\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\001\002" +
    "\000\024\022\uffd2\023\uffd2\032\uffd2\033\uffd2\035\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\004\046\uffc5" +
    "\001\002\000\046\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\022\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\001\002\000\046\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\001\002\000\006\040\uffc8\041\uffc8\001\002\000" +
    "\006\040\126\041\uffca\001\002\000\004\046\127\001\002" +
    "\000\006\040\uffc9\041\uffc9\001\002\000\004\046\034\001" +
    "\002\000\004\042\132\001\002\000\024\015\044\021\046" +
    "\024\053\025\060\034\062\044\055\045\051\046\034\060" +
    "\045\001\002\000\006\023\111\042\134\001\002\000\006" +
    "\014\135\015\136\001\002\000\026\014\153\015\044\021" +
    "\046\024\053\025\060\034\062\044\055\045\051\046\034" +
    "\060\045\001\002\000\024\015\151\021\046\024\053\025" +
    "\060\034\062\044\055\045\051\046\034\060\045\001\002" +
    "\000\004\035\140\001\002\000\044\004\022\005\010\006" +
    "\011\007\007\010\004\011\027\012\040\013\024\036\141" +
    "\046\034\047\037\050\015\053\012\054\020\055\035\056" +
    "\033\057\030\001\002\000\044\004\022\005\010\006\011" +
    "\007\007\010\004\011\027\012\040\013\024\037\145\046" +
    "\034\047\037\050\015\053\012\054\020\055\035\056\033" +
    "\057\030\001\002\000\052\002\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\037\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000\052\002\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\037\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001" +
    "\002\000\044\004\022\005\010\006\011\007\007\010\004" +
    "\011\027\012\040\013\024\037\146\046\034\047\037\050" +
    "\015\053\012\054\020\055\035\056\033\057\030\001\002" +
    "\000\052\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\037\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\001\002\000\052\002\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\037" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000\046\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\037\uffff\046\uffff\047\uffff\050\uffff\053" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\001\002\000\010" +
    "\014\065\015\067\035\uffb7\001\002\000\026\015\044\021" +
    "\046\024\053\025\060\034\062\035\uffb9\044\055\045\051" +
    "\046\034\060\045\001\002\000\010\014\065\015\067\035" +
    "\uffb8\001\002\000\004\035\uffba\001\002\000\024\015\044" +
    "\021\046\024\053\025\060\034\062\044\055\045\051\046" +
    "\034\060\045\001\002\000\006\023\111\037\156\001\002" +
    "\000\050\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\001\002\000\024\015\044\021\046\024\053\025\060" +
    "\034\062\044\055\045\051\046\034\060\045\001\002\000" +
    "\010\023\111\037\uffb3\040\uffb3\001\002\000\006\037\163" +
    "\040\162\001\002\000\024\015\044\021\046\024\053\025" +
    "\060\034\062\044\055\045\051\046\034\060\045\001\002" +
    "\000\004\041\uffb6\001\002\000\010\023\111\037\uffb4\040" +
    "\uffb4\001\002\000\052\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\037\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\001\002\000\052\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\037\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002" +
    "\000\024\015\044\021\046\024\053\025\060\034\062\044" +
    "\055\045\051\046\034\060\045\001\002\000\006\037\171" +
    "\040\162\001\002\000\004\041\uffb5\001\002\000\052\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\037\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\001\002\000\052\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\037\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\001\002\000\004\053\175\001\002" +
    "\000\004\034\176\001\002\000\024\015\044\021\046\024" +
    "\053\025\060\034\062\044\055\045\051\046\034\060\045" +
    "\001\002\000\006\023\111\035\200\001\002\000\052\002" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\037\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\001\002\000\024\015\044\021\046\024\053\025\060\034" +
    "\062\044\055\045\051\046\034\060\045\001\002\000\012" +
    "\023\111\040\ufff0\041\ufff0\042\ufff0\001\002\000\004\002" +
    "\001\001\002\000\024\015\044\021\046\024\053\025\060" +
    "\034\062\044\055\045\051\046\034\060\045\001\002\000" +
    "\006\023\111\035\206\001\002\000\044\004\022\005\010" +
    "\006\011\007\007\010\004\011\027\012\040\013\024\036" +
    "\141\046\034\047\037\050\015\053\012\054\020\055\035" +
    "\056\033\057\030\001\002\000\052\002\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\037\uffc4\046\uffc4\047\uffc4\050\uffc4\051\210\052\213\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000\044" +
    "\004\022\005\010\006\011\007\007\010\004\011\027\012" +
    "\040\013\024\036\141\046\034\047\037\050\015\053\012" +
    "\054\020\055\035\056\033\057\030\001\002\000\052\002" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\037\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\220\052\213\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\001\002\000\052\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\037\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\001\002\000\004\034\214\001\002" +
    "\000\024\015\044\021\046\024\053\025\060\034\062\044" +
    "\055\045\051\046\034\060\045\001\002\000\006\023\111" +
    "\035\216\001\002\000\044\004\022\005\010\006\011\007" +
    "\007\010\004\011\027\012\040\013\024\036\141\046\034" +
    "\047\037\050\015\053\012\054\020\055\035\056\033\057" +
    "\030\001\002\000\052\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\037\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\001\002\000\044\004\022\005" +
    "\010\006\011\007\007\010\004\011\027\012\040\013\024" +
    "\036\141\046\034\047\037\050\015\053\012\054\020\055" +
    "\035\056\033\057\030\001\002\000\052\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\037\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002\000" +
    "\052\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\037\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\001\002\000\052\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\037\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000\024\015\044" +
    "\021\046\024\053\025\060\034\062\044\055\045\051\046" +
    "\034\060\045\001\002\000\006\023\111\035\226\001\002" +
    "\000\044\004\022\005\010\006\011\007\007\010\004\011" +
    "\027\012\040\013\024\036\141\046\034\047\037\050\015" +
    "\053\012\054\020\055\035\056\033\057\030\001\002\000" +
    "\052\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\037\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\001\002\000\006\040\ufff3\041\ufff3\001\002\000" +
    "\006\040\ufff2\041\ufff2\001\002\000\012\036\154\040\ufff1" +
    "\041\ufff1\043\uffc6\001\002\000\006\040\234\041\ufff5\001" +
    "\002\000\004\046\232\001\002\000\006\040\ufff4\041\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\034\002\004\004\013\005\020\006\024\007" +
    "\025\010\031\013\012\014\022\015\035\021\005\022\030" +
    "\035\015\036\016\001\001\000\002\001\001\000\030\004" +
    "\146\005\020\006\024\007\025\010\031\013\012\014\022" +
    "\015\035\021\005\022\030\036\016\001\001\000\012\016" +
    "\232\020\227\022\230\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\173\004\142\005" +
    "\020\006\024\007\025\010\031\013\012\014\022\015\035" +
    "\021\005\022\030\036\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\041\037\040\001\001\000\002\001\001\000\004" +
    "\017\124\001\001\000\002\001\001\000\024\023\063\024" +
    "\046\025\056\026\062\027\060\030\053\031\051\032\047" +
    "\036\055\001\001\000\010\025\056\026\122\036\055\001" +
    "\001\000\002\001\001\000\010\025\056\026\121\036\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\063\024\046" +
    "\025\056\026\062\027\106\030\053\031\051\032\047\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\105\025\056\026\062\036\055\001\001\000\014\023" +
    "\104\024\046\025\056\026\062\036\055\001\001\000\012" +
    "\024\075\025\056\026\062\036\055\001\001\000\014\023" +
    "\074\024\046\025\056\026\062\036\055\001\001\000\014" +
    "\023\073\024\046\025\056\026\062\036\055\001\001\000" +
    "\014\023\072\024\046\025\056\026\062\036\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\056\026\103\036\055\001\001" +
    "\000\010\025\056\026\102\036\055\001\001\000\010\025" +
    "\056\026\101\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\063" +
    "\024\046\025\056\026\062\030\111\031\051\032\047\036" +
    "\055\001\001\000\002\001\001\000\020\023\063\024\046" +
    "\025\056\026\062\031\113\032\047\036\055\001\001\000" +
    "\002\001\001\000\016\023\063\024\046\025\056\026\062" +
    "\032\117\036\055\001\001\000\016\023\063\024\046\025" +
    "\056\026\062\032\116\036\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\130\036\016\001" +
    "\001\000\002\001\001\000\024\023\063\024\046\025\056" +
    "\026\062\027\132\030\053\031\051\032\047\036\055\001" +
    "\001\000\002\001\001\000\004\033\136\001\001\000\014" +
    "\023\151\024\046\025\056\026\062\036\055\001\001\000" +
    "\014\023\147\024\046\025\056\026\062\036\055\001\001" +
    "\000\002\001\001\000\032\003\141\004\142\005\020\006" +
    "\024\007\025\010\031\013\012\014\022\015\035\021\005" +
    "\022\030\036\016\001\001\000\032\002\143\004\013\005" +
    "\020\006\024\007\025\010\031\013\012\014\022\015\035" +
    "\021\005\022\030\036\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\146\005\020\006\024\007\025" +
    "\010\031\013\012\014\022\015\035\021\005\022\030\036" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\056\026\122\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\023\063\024\046\025\056\026\062\027\154\030\053\031" +
    "\051\032\047\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\023\063\024\046\025\056\026\062\027" +
    "\157\030\053\031\051\032\047\034\160\036\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\023\063\024" +
    "\046\025\056\026\062\027\163\030\053\031\051\032\047" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\063\024\046" +
    "\025\056\026\062\027\157\030\053\031\051\032\047\034" +
    "\167\036\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\063\024\046\025\056\026\062" +
    "\027\176\030\053\031\051\032\047\036\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\063\024\046" +
    "\025\056\026\062\027\201\030\053\031\051\032\047\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\023\063\024\046\025\056\026\062\027\204\030\053\031" +
    "\051\032\047\036\055\001\001\000\002\001\001\000\032" +
    "\003\206\004\142\005\020\006\024\007\025\010\031\013" +
    "\012\014\022\015\035\021\005\022\030\036\016\001\001" +
    "\000\006\011\210\012\211\001\001\000\032\003\222\004" +
    "\142\005\020\006\024\007\025\010\031\013\012\014\022" +
    "\015\035\021\005\022\030\036\016\001\001\000\004\012" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\023\063\024\046\025\056\026\062\027\214\030\053\031" +
    "\051\032\047\036\055\001\001\000\002\001\001\000\032" +
    "\003\216\004\142\005\020\006\024\007\025\010\031\013" +
    "\012\014\022\015\035\021\005\022\030\036\016\001\001" +
    "\000\002\001\001\000\032\003\221\004\142\005\020\006" +
    "\024\007\025\010\031\013\012\014\022\015\035\021\005" +
    "\022\030\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\023\063\024\046\025\056" +
    "\026\062\027\224\030\053\031\051\032\047\036\055\001" +
    "\001\000\002\001\001\000\032\003\226\004\142\005\020" +
    "\006\024\007\025\010\031\013\012\014\022\015\035\021" +
    "\005\022\030\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\234\022\230\036\016\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Lexer myLexer;
    private List<String> errorsList;
    private GeneradorCod generador;
    private TablaSimbolos symTable;

	public Parser(Lexer lex, GeneradorCod generador, TablaSimbolos symTable) { //falta recibir algunas tabals sim/tip
		super(lex);
		this.myLexer = lex;
		this.errorsList = myLexer.getErrorsList();
		this.generador = generador;
        this.symTable = symTable;
	}
	@Override
        public void syntax_error(Symbol st) {
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura- linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
            
            System.out.println("Error Sintactico con el Token: " + token.getLexeme() + " este no pertenece a la estructura linea: " + token.getLine() + ", columna: " + token.getColumn());
                    errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura linea: %d  columna: %d. Corrige e intenta de nuevo.", token.getLexeme(), token.getLine(), token.getColumn()));
        }

        public void addSemanticError(String msg) {
            this.errorsList.add(msg);
        }

	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> start_val = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= instrucciones 
            {
              List<Instruccion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = list;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
					list.add(ins);
                    RESULT = list;

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					List<Instruccion> instructions = new ArrayList<>();
                    instructions.add(ins);
                    RESULT = instructions;

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion PT_COMA 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = dec;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= arreglo PT_COMA 
            {
              Instruccion RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion arr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = arr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= asig PT_COMA 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					/*Validacion semantica de asignacion*/
					InstruccionAsig temp = (InstruccionAsig)as;
					if (temp.getExp().isIsPosArray() || temp.getLoc().getEx().isIsPosArray()) {
						//para asignacion de pos de array son distintas validaciones
						if (symTable.asignarArray(temp.getLoc(), temp.getExp())) {
							RESULT = as;
						} else {
							RESULT = null;
						}
						
					} else {
						//para asignacion de variables
						if (symTable.consultarVar(temp.getLoc().getId(), temp.getExp())) {
							if (symTable.verificarTipoAsig(temp.getLoc().getId(), temp.getExp())) {
								//consultar tipo de asignacion
								RESULT = as;
							} else {
								RESULT = null;
							}
							
						} else {
							RESULT = null;
						}
					}				
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= escritura PT_COMA 
            {
              Instruccion RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion esc = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = esc;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sent_while 
            {
              Instruccion RESULT =null;
		int sent_whileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent_whileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sent_while = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = sent_while;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sent_do_while 
            {
              Instruccion RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion do_while = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = do_while;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sent_for 
            {
              Instruccion RESULT =null;
		int sent_forleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent_forright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sent_for = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = sent_for;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= tipo vars 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> vs = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				/*validar que alguna de las variables que se estan declarando/asignando no hallan sido declaradas anteriormente*/
				if (symTable.addVariables(vs, t)) {
					RESULT = new InstruccionDeclaracion(t,vs,generador);
				} else {
					RESULT = null;
				}	

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= vars COMA var 
            {
              List<Id> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> vs = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id var = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			vs.add(var);
             RESULT = vs;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vars ::= var 
            {
              List<Id> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id v = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Id> vars = new ArrayList<>();
              	vars.add(v);
              	RESULT = vars;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= asig 
            {
              Id RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InstruccionAsig temp = (InstruccionAsig)as;
			RESULT = new Id(temp.getLoc().getId(),true, (InstruccionAsig)as,null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= IDENTIFICADOR 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  	RESULT = new Id(id,false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asig ::= loc ASIGN expr_log 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			//en este punto no puedo hacer la validacion semantica porque puede se este declarando y asignando la variable de una vez
			if (l.getIdent()!=null) {
				RESULT = new InstruccionAsig(new Id(new Token(l.getLugarTemp(),l.getIdent().getId().getLine(),l.getIdent().getId().getColumn()),true, l),ex, generador);
			} else {
				//para identificador de arreglos
				RESULT = new InstruccionAsig(new Id(l.getIdArray().getId(),true, l),ex, generador);
			}
			

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_dec ::= expr_dec MAS termin 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//Expresion ex = new Expresion();
				//ex.setLugarTemp(generador.getLugarTemp());
				//*ANTES COMPROBAR TIPOS Y EVALUACIONES SEMANTICAS*
				//generador.addCuarteto(new Cuarteto(op.MAS,ex.getLugarTemp(), e1.getLugarTemp(), e3.getLugarTemp()));
				RESULT = new Expresion(generador.getOp().MAS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, symTable.getComprob().evalOpMasConcat(e1,t1), generador);		
				//RESULT = ex;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_dec ::= expr_dec MENOS termin 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().MENOS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, symTable.getComprob().evalOpAritmetica(e1,t1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_dec ::= termin 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            	RESULT = t1;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termin ::= termin POR f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//RETORNA EL DE MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().POR,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, symTable.getComprob().evalOpAritmetica(t1,f1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // termin ::= termin DIV f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		//RETORNA MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().DIV,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, symTable.getComprob().evalOpAritmetica(t1,f1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // termin ::= termin MOD f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		//RETORNA RESIDUO MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().MOD,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, symTable.getComprob().evalOpAritmetica(t1,f1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // termin ::= f_unar 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // f_unar ::= NOT f_unar 
            {
              Expresion RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token no = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//comprobar que sea una expresion booleana la que se va negar
				RESULT = new Expresion(generador.getOp().NOT,null, f1, null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // f_unar ::= MENOS f_unar 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//comprobar que sea una exp aritmetica la que se va convertir en negativa
				RESULT = new Expresion(generador.getOp().MINUS,null, f1,null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // f_unar ::= factor 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= PARENT_A expr_log PARENT_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e3 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//RESULT = new Expresion(null,e2.getLugarTemp(), null, null,e2.getList(), null, null,generador);
				RESULT = e2;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= NUMERO_ENTERO 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//COMPROBAR RANGO PARA ASIGNAR SU TIPO DE ENTERO EN TEORIA TODOS SON LONG SI ESTAN DENTR DEL RANGO
				RESULT = new Expresion(null,""+e1.getLexeme(), null, null,null, null,
				 null, symTable.getComprob().tipoEntero(e1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= NUMERO_FLOTANTE 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//COMPROBAR QUE TRAIGA LA F PARA SER FLOAT SINO ES DOUBLE 
				RESULT = new Expresion(null,""+e1.getLexeme(), null, null,null, null,
				 null, symTable.getComprob().tipoDecimal(e1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().TRUE,t1.getLexeme(), null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,1,t1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().FALSE,f1.getLexeme(), null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,1,f1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= loc 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//comprobar la existencia de la variable Identificador
				Token nameVar;
				if (l.getIdArray().getId()!=null) {
					nameVar = l.getIdArray().getId();
				} else {
					nameVar = l.getIdent().getId();
				}
				if (symTable.consultarVar(nameVar, null)) {
					//asignando su tipo
					l.setTipo(symTable.getTipo(nameVar));
					RESULT = l;
				} else {
					//asignando su tipo , aqui ya no es necesario ya que ya hay un error de inexistencia del id
					l.setTipo(symTable.getTipo(nameVar));
					RESULT = l;
				}
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= CADENA 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(null,c1.getLexeme(), null, null,null, null, null,
				 new Tipo(generador.getTipoVar().STRING,7,c1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_log ::= expr_log OR expr_log2 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token or = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().OR,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_log ::= expr_log2 
            {
              Expresion RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l2;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_log2 ::= expr_log2 AND expr_log3 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token and = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().AND,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_log2 ::= expr_log3 
            {
              Expresion RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l3 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l3;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_log3 ::= expr_log3 IGUAL cond_rel 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().IGUAL,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_log3 ::= expr_log3 DISTINTO cond_rel 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().DISTINTO,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_log3 ::= cond_rel 
            {
              Expresion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion r1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = r1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond_rel ::= expr_dec MENOR expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond_rel ::= expr_dec MENOR_I expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond_rel ::= expr_dec MAYOR_I expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond_rel ::= expr_dec MAYOR expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,1,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond_rel ::= expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = ex1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arreglo ::= ARRAY tipo_dim vars1 
            {
              Instruccion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDim tip = (TipoDim)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> vs1 = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				/*validar que alguna de las variables que se estan declarando/asignando no hallan sido declaradas anteriormente*/
				tip.getTipo().setIsArray(true); //tipo array de tipo t
				if (symTable.addVariables(vs1, tip.getTipo())) {		
					RESULT = new InstruccionArray(tip, vs1, generador);
				} else {
					RESULT = null;
				}			

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vars1 ::= vars1 COMA IDENTIFICADOR 
            {
              List<Id> RESULT =null;
		int vs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> vs1 = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				vs1.add(new Id(e1,false));
             	RESULT = vs1;	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vars1 ::= IDENTIFICADOR 
            {
              List<Id> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Id> vars = new ArrayList<>();
              	vars.add(new Id(e1,false));
              	RESULT = vars;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // loc ::= IDENTIFICADOR CORCH_A expr_log CORCH_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //para asignacion de arrays n dim deberia retornar una lista de exp correspon->dimens
			//l.add(ins);
			ex1.setIsPosArray(true);  //es una posicion de array
			ex1.setIdArray(new Id(e1,false));
            RESULT = ex1;
			//RESULT = new Expresion(null,ex1.getLugarTemp(), null, null,null,generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // loc ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			//RESULT = new Id(e1.getLexeme);  no se asigna tipo todavia
			RESULT = new Expresion(e1.getLexeme(), new Id(e1,false),generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_dim ::= tipo CORCH_A expr_log CORCH_C 
            {
              TipoDim RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//un tipo y una ex1 dimension 1
				RESULT = new TipoDim(t, ex1);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dim",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null, null, generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque ELSE instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null,
								 new InstruccionElse(list2, generador), generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque elsifs 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<InstruccionIf> elsifs = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			null, generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque elsifs ELSE instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elsifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elsifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<InstruccionIf> elsifs = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			new InstruccionElse(list2, generador), generador);

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elsifs ::= elsifs elsif 
            {
              List<InstruccionIf> RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<InstruccionIf> els = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionIf el = (InstruccionIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				els.add(el);
                RESULT = els;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elsifs ::= elsif 
            {
              List<InstruccionIf> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionIf el = (InstruccionIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<InstruccionIf> instructions = new ArrayList<>();
                instructions.add(el);
                RESULT = instructions;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elsif ::= ELSIF PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              InstruccionIf RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new InstruccionIf(ex, list, generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sent_while ::= WHILE PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token wh = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//validaciones semanticas
				RESULT = new InstruccionWhile(ex,list,generador);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_while",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sent_do_while ::= DO instrucciones_bloque WHILE PARENT_A expr_log PARENT_C 
            {
              Instruccion RESULT =null;
		int dowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token dow = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token wh = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//validaciones semanticas
				RESULT = new InstruccionDo(list, ex, generador);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sent_for ::= FOR PARENT_A asig DOS_PT expr_log DOS_PT incremento PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token pt1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pt2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Incremento in = (Incremento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//val semanticas
				RESULT = new InstruccionFor((InstruccionAsig)as, ex, in, list, generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_for",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // incremento ::= MAS MAS 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // incremento ::= MENOS MENOS 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // incremento ::= MAS expr_dec 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Incremento(generador.getOp().MAS, ex);

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // incremento ::= MENOS expr_dec 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Incremento(generador.getOp().MENOS, ex);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // escritura ::= PRINT CORCH_A impres CORCH_C 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//val semanticas
					RESULT = new InstruccionPrint(false, im, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // escritura ::= PRINTLN CORCH_A impres CORCH_C 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//val semanticas
					RESULT = new InstruccionPrint(true, im, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // impres ::= impres COMA expr_log 
            {
              List<Expresion> RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				im.add(ex);
                RESULT = im;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impres",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // impres ::= expr_log 
            {
              List<Expresion> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Expresion> exps = new ArrayList<>();
                exps.add(ex);
                RESULT = exps;

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impres",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instrucciones_bloque ::= CORCH_A instrucciones CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    		RESULT = list;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instrucciones_bloque ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							List<Instruccion> instructions = new ArrayList<>();
                    		instructions.add(ins);
                    		RESULT = instructions;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instrucciones_bloque ::= CORCH_A CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = null;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
