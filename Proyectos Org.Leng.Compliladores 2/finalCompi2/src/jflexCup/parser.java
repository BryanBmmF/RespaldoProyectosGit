
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 20 09:04:17 CST 2018
//----------------------------------------------------

package jflexCup;

import java_cup.runtime.*;
import Objetos.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 20 09:04:17 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\010\000\002\004\007\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\024\003\000\002\024\004\000\002\024\003\000" +
    "\002\024\004\000\002\024\003\000\002\024\004\000\002" +
    "\024\003\000\002\024\004\000\002\024\003\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\025\004" +
    "\000\002\012\006\000\002\012\006\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\036\003\000\002" +
    "\036\003\000\002\010\005\000\002\010\004\000\002\010" +
    "\004\000\002\032\003\000\002\032\005\000\002\032\005" +
    "\000\002\031\003\000\002\031\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\004\000\002\033\003\000\002" +
    "\033\005\000\002\033\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\035\003\000\002\043\004\000\002" +
    "\042\006\000\002\042\005\000\002\013\003\000\002\013" +
    "\003\000\002\014\007\000\002\015\007\000\002\016\007" +
    "\000\002\016\007\000\002\022\003\000\002\044\002\000" +
    "\002\022\005\000\002\021\010\000\002\021\011\000\002" +
    "\020\005\000\002\020\006\000\002\017\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\023\010\000\002\023\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\014\003\014\035\011\037\004\040\016\044" +
    "\007\001\002\000\004\036\uffcf\001\002\000\006\010\307" +
    "\011\306\001\002\000\006\002\000\027\101\001\002\000" +
    "\004\036\073\001\002\000\004\002\072\001\002\000\004" +
    "\036\067\001\002\000\020\002\ufffe\003\014\027\ufffe\035" +
    "\011\037\004\040\016\044\007\001\002\000\006\010\063" +
    "\011\062\001\002\000\020\002\ufffb\003\014\027\ufffb\035" +
    "\011\037\004\040\016\044\007\001\002\000\004\036\030" +
    "\001\002\000\004\036\uffce\001\002\000\006\010\021\011" +
    "\020\001\002\000\004\036\022\001\002\000\020\002\uffd3" +
    "\003\uffd3\027\uffd3\035\uffd3\037\uffd3\040\uffd3\044\uffd3\001" +
    "\002\000\010\010\uffca\011\uffca\013\024\001\002\000\006" +
    "\010\uffcd\011\uffcd\001\002\000\006\036\025\041\026\001" +
    "\002\000\006\010\uffb6\011\uffb6\001\002\000\006\010\uffc8" +
    "\011\uffc8\001\002\000\006\010\uffc9\011\uffc9\001\002\000" +
    "\012\010\uffc7\011\uffc7\013\034\047\035\001\002\000\006" +
    "\010\uffd1\011\uffd1\001\002\000\006\010\uffd0\011\uffd0\001" +
    "\002\000\006\010\uffb5\011\uffb5\001\002\000\012\004\042" +
    "\036\041\042\044\043\046\001\002\000\004\043\036\001" +
    "\002\000\004\050\037\001\002\000\010\010\uffb3\011\uffb3" +
    "\047\035\001\002\000\006\010\uffb4\011\uffb4\001\002\000" +
    "\030\005\uffb9\010\uffb9\011\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\001\002\000" +
    "\012\004\042\036\041\042\044\043\046\001\002\000\020" +
    "\005\uffba\010\uffba\011\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\001\002\000\030\005\uffb7\010\uffb7\011\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\001\002\000\016\010\uffc6\011\uffc6\014\047\015\050" +
    "\016\052\017\051\001\002\000\030\005\uffb8\010\uffb8\011" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\001\002\000\012\004\042\036\041\042" +
    "\044\043\046\001\002\000\012\004\042\036\041\042\044" +
    "\043\046\001\002\000\012\004\042\036\041\042\044\043" +
    "\046\001\002\000\012\004\042\036\041\042\044\043\046" +
    "\001\002\000\020\005\uffbd\010\uffbd\011\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\001\002\000\020\005\uffbc\010\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\001\002\000" +
    "\020\005\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe\016\052" +
    "\017\051\001\002\000\020\005\uffbf\010\uffbf\011\uffbf\014" +
    "\uffbf\015\uffbf\016\052\017\051\001\002\000\014\005\060" +
    "\014\047\015\050\016\052\017\051\001\002\000\020\005" +
    "\uffbb\010\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\001\002\000\006\002\ufffc\027\ufffc\001\002\000\004\036" +
    "\064\001\002\000\020\002\uffd5\003\uffd5\027\uffd5\035\uffd5" +
    "\037\uffd5\040\uffd5\044\uffd5\001\002\000\010\010\uffc7\011" +
    "\uffc7\013\034\001\002\000\006\010\uffd2\011\uffd2\001\002" +
    "\000\006\002\ufffd\027\ufffd\001\002\000\012\010\uffca\011" +
    "\uffca\013\024\047\035\001\002\000\006\010\uffcb\011\uffcb" +
    "\001\002\000\006\010\uffcc\011\uffcc\001\002\000\004\002" +
    "\001\001\002\000\012\010\uffc2\011\uffc2\013\076\047\035" +
    "\001\002\000\006\010\uffc3\011\uffc3\001\002\000\006\010" +
    "\uffc4\011\uffc4\001\002\000\006\045\077\046\100\001\002" +
    "\000\006\010\uffc1\011\uffc1\001\002\000\006\010\uffc0\011" +
    "\uffc0\001\002\000\004\004\103\001\002\000\004\002\uffff" +
    "\001\002\000\004\005\104\001\002\000\004\006\105\001" +
    "\002\000\022\007\116\030\106\031\114\032\122\033\115" +
    "\036\117\051\120\052\124\001\002\000\004\004\245\001" +
    "\002\000\024\007\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\036\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\022\007" +
    "\ufff4\030\106\031\114\032\122\033\115\036\117\051\120" +
    "\052\124\001\002\000\022\007\ufff0\030\106\031\114\032" +
    "\122\033\115\036\117\051\120\052\124\001\002\000\022" +
    "\007\ufff8\030\106\031\114\032\122\033\115\036\117\051" +
    "\120\052\124\001\002\000\004\007\241\001\002\000\004" +
    "\004\235\001\002\000\004\004\211\001\002\000\004\002" +
    "\ufff9\001\002\000\004\013\170\001\002\000\004\004\164" +
    "\001\002\000\026\007\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffab\036\uffac\051\uffac\052\uffac\053\uffac\001\002" +
    "\000\004\004\135\001\002\000\022\007\ufff2\030\106\031" +
    "\114\032\122\033\115\036\117\051\120\052\124\001\002" +
    "\000\004\004\130\001\002\000\024\007\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\036\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\001\002\000\022\007\ufff6\030\106\031\114\032\122\033" +
    "\115\036\117\051\120\052\124\001\002\000\004\007\ufff5" +
    "\001\002\000\004\036\131\001\002\000\004\005\132\001" +
    "\002\000\004\010\133\001\002\000\024\007\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\036\uffad\051\uffad\052\uffad\053" +
    "\uffad\001\002\000\004\007\ufff1\001\002\000\012\004\136" +
    "\036\041\042\044\043\046\001\002\000\012\004\136\036" +
    "\041\042\044\043\046\001\002\000\026\005\uffd6\010\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\001\002\000\014\005\142\014\141\015\143" +
    "\016\145\017\144\001\002\000\012\004\136\036\041\042" +
    "\044\043\046\001\002\000\004\010\151\001\002\000\012" +
    "\004\136\036\041\042\044\043\046\001\002\000\012\004" +
    "\136\036\041\042\044\043\046\001\002\000\012\004\136" +
    "\036\041\042\044\043\046\001\002\000\026\005\uffd9\010" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\001\002\000\026\005\uffd8\010\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\001\002\000\026\005\uffda\010\uffda\014\uffda\015" +
    "\uffda\016\145\017\144\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\001\002\000\024\007\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\036\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\026" +
    "\005\uffdb\010\uffdb\014\uffdb\015\uffdb\016\145\017\144\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\001\002\000\014\005\154" +
    "\014\141\015\143\016\145\017\144\001\002\000\026\005" +
    "\uffd7\010\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\001\002\000\004\034\156\001" +
    "\002\000\004\006\160\001\002\000\024\007\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\036\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\001\002\000\022\007\162\030\106\031\114\032\122" +
    "\033\115\036\117\051\120\052\124\001\002\000\004\007" +
    "\163\001\002\000\024\007\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\036\uffa7\051\uffa7\052\uffa7\053\uffa7\001\002\000" +
    "\024\007\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\001\002\000\004\036\165\001" +
    "\002\000\004\005\166\001\002\000\004\010\167\001\002" +
    "\000\024\007\uffae\030\uffae\031\uffae\032\uffae\033\uffae\036" +
    "\uffae\051\uffae\052\uffae\053\uffae\001\002\000\020\004\136" +
    "\036\041\041\171\042\044\043\046\045\172\046\173\001" +
    "\002\000\004\010\uffde\001\002\000\004\010\uffdd\001\002" +
    "\000\004\010\uffdc\001\002\000\004\010\210\001\002\000" +
    "\024\010\uffdf\014\141\015\143\016\145\017\144\022\200" +
    "\023\201\024\203\025\202\001\002\000\004\010\177\001" +
    "\002\000\024\007\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\036\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\012\004" +
    "\136\036\041\042\044\043\046\001\002\000\012\004\136" +
    "\036\041\042\044\043\046\001\002\000\012\004\136\036" +
    "\041\042\044\043\046\001\002\000\012\004\136\036\041" +
    "\042\044\043\046\001\002\000\014\010\uff95\014\141\015" +
    "\143\016\145\017\144\001\002\000\014\010\uff96\014\141" +
    "\015\143\016\145\017\144\001\002\000\014\010\uff93\014" +
    "\141\015\143\016\145\017\144\001\002\000\014\010\uff94" +
    "\014\141\015\143\016\145\017\144\001\002\000\024\007" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\001\002\000\016\004\136\036\215\042" +
    "\044\043\046\045\213\046\214\001\002\000\004\005\uffa5" +
    "\001\002\000\004\005\uffa0\001\002\000\004\005\uff9f\001" +
    "\002\000\024\005\uff9e\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\001\002\000\022\014" +
    "\141\015\143\016\145\017\144\022\225\023\226\024\230" +
    "\025\227\001\002\000\004\005\220\001\002\000\004\006" +
    "\221\001\002\000\022\007\223\030\106\031\114\032\122" +
    "\033\115\036\117\051\120\052\124\001\002\000\004\007" +
    "\224\001\002\000\026\007\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\036\uffa9\051\uffa9\052\uffa9\053\uffa9\001" +
    "\002\000\026\007\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\036\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000" +
    "\012\004\136\036\041\042\044\043\046\001\002\000\012" +
    "\004\136\036\041\042\044\043\046\001\002\000\012\004" +
    "\136\036\041\042\044\043\046\001\002\000\012\004\136" +
    "\036\041\042\044\043\046\001\002\000\014\005\uffa3\014" +
    "\141\015\143\016\145\017\144\001\002\000\014\005\uffa4" +
    "\014\141\015\143\016\145\017\144\001\002\000\014\005" +
    "\uffa1\014\141\015\143\016\145\017\144\001\002\000\014" +
    "\005\uffa2\014\141\015\143\016\145\017\144\001\002\000" +
    "\004\041\236\001\002\000\004\005\237\001\002\000\004" +
    "\010\240\001\002\000\024\007\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\036\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002" +
    "\000\004\002\ufffa\001\002\000\004\007\ufff7\001\002\000" +
    "\004\007\uffef\001\002\000\004\007\ufff3\001\002\000\016" +
    "\004\136\036\250\042\044\043\046\045\246\046\247\001" +
    "\002\000\004\005\uff99\001\002\000\004\005\uff98\001\002" +
    "\000\024\005\uff97\014\uffb9\015\uffb9\016\uffb9\017\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\001\002\000\022\014\141" +
    "\015\143\016\145\017\144\022\276\023\277\024\301\025" +
    "\300\001\002\000\004\005\253\001\002\000\004\006\254" +
    "\001\002\000\024\007\257\030\106\031\114\032\122\033" +
    "\115\036\117\051\120\052\124\053\261\001\002\000\024" +
    "\007\uffe6\030\106\031\114\032\122\033\115\036\117\051" +
    "\120\052\124\053\261\001\002\000\004\007\274\001\002" +
    "\000\024\007\uff92\030\uff92\031\uff92\032\uff92\033\uff92\036" +
    "\uff92\051\uff92\052\uff92\053\uff92\001\002\000\024\007\uffe8" +
    "\030\106\031\114\032\122\033\115\036\117\051\120\052" +
    "\124\053\261\001\002\000\004\010\272\001\002\000\024" +
    "\007\uffea\030\106\031\114\032\122\033\115\036\117\051" +
    "\120\052\124\053\261\001\002\000\024\007\uffee\030\106" +
    "\031\114\032\122\033\115\036\117\051\120\052\124\053" +
    "\261\001\002\000\024\007\uffe3\030\106\031\114\032\122" +
    "\033\115\036\117\051\120\052\124\053\261\001\002\000" +
    "\024\007\uffec\030\106\031\114\032\122\033\115\036\117" +
    "\051\120\052\124\053\261\001\002\000\004\007\uffeb\001" +
    "\002\000\004\007\uffe4\001\002\000\004\007\uffed\001\002" +
    "\000\004\007\uffe9\001\002\000\024\007\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\036\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\004\007\uffe7\001\002\000\024\007\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\036\uff91\051\uff91\052\uff91" +
    "\053\uff91\001\002\000\004\007\uffe5\001\002\000\012\004" +
    "\136\036\041\042\044\043\046\001\002\000\012\004\136" +
    "\036\041\042\044\043\046\001\002\000\012\004\136\036" +
    "\041\042\044\043\046\001\002\000\012\004\136\036\041" +
    "\042\044\043\046\001\002\000\014\005\uff9c\014\141\015" +
    "\143\016\145\017\144\001\002\000\014\005\uff9d\014\141" +
    "\015\143\016\145\017\144\001\002\000\014\005\uff9a\014" +
    "\141\015\143\016\145\017\144\001\002\000\014\005\uff9b" +
    "\014\141\015\143\016\145\017\144\001\002\000\004\036" +
    "\310\001\002\000\020\002\uffd4\003\uffd4\027\uffd4\035\uffd4" +
    "\037\uffd4\040\uffd4\044\uffd4\001\002\000\010\010\uffc2\011" +
    "\uffc2\013\076\001\002\000\006\010\uffc5\011\uffc5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\020\002\007\003\005\005\004\006\011\007" +
    "\012\010\016\036\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\101\001\001\000\006\033\074\043" +
    "\073\001\001\000\002\001\001\000\006\032\070\043\067" +
    "\001\001\000\016\003\065\005\004\006\011\007\012\010" +
    "\016\036\014\001\001\000\002\001\001\000\016\003\060" +
    "\005\004\006\011\007\012\010\016\036\014\001\001\000" +
    "\006\031\030\043\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\042\030\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\042\030" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\042\030\055\001" +
    "\001\000\006\026\042\030\054\001\001\000\006\026\042" +
    "\030\053\001\001\000\006\026\042\030\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\112\012\111\013\125" +
    "\014\124\015\106\016\107\021\120\022\122\023\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\243" +
    "\012\111\013\125\014\124\015\106\016\107\021\120\022" +
    "\122\023\110\001\001\000\024\011\242\012\111\013\125" +
    "\014\124\015\106\016\107\021\120\022\122\023\110\001" +
    "\001\000\024\011\241\012\111\013\125\014\124\015\106" +
    "\016\107\021\120\022\122\023\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\154\001" +
    "\001\000\002\001\001\000\024\011\133\012\111\013\125" +
    "\014\124\015\106\016\107\021\120\022\122\023\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\126" +
    "\012\111\013\125\014\124\015\106\016\107\021\120\022" +
    "\122\023\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\136\027\137\001\001\000\006" +
    "\026\136\027\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\136\027\151\001\001\000\002\001\001" +
    "\000\006\026\136\027\147\001\001\000\006\026\136\027" +
    "\146\001\001\000\006\026\136\027\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\160\012\111\013\125\014\124\015\106" +
    "\016\107\021\120\022\122\023\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\136\027\174\034\173\041\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\136\027\206\001\001\000\006\026\136\027" +
    "\205\001\001\000\006\026\136\027\204\001\001\000\006" +
    "\026\136\027\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\216\026\136\027\215\037\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\221\012\111\013\125\014\124\015\106" +
    "\016\107\021\120\022\122\023\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\136" +
    "\027\233\001\001\000\006\026\136\027\232\001\001\000" +
    "\006\026\136\027\231\001\001\000\006\026\136\027\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\136\027\250\040\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\262\013\264\014" +
    "\124\015\106\016\261\021\120\022\257\023\254\024\255" +
    "\025\263\001\001\000\026\012\262\013\264\014\124\015" +
    "\106\016\261\021\120\022\257\023\254\024\274\025\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\012" +
    "\262\013\264\014\124\015\106\016\261\021\120\022\257" +
    "\023\254\024\272\025\263\001\001\000\002\001\001\000" +
    "\026\012\262\013\264\014\124\015\106\016\261\021\120" +
    "\022\257\023\254\024\270\025\263\001\001\000\026\012" +
    "\262\013\264\014\124\015\106\016\261\021\120\022\257" +
    "\023\254\024\267\025\263\001\001\000\026\012\262\013" +
    "\264\014\124\015\106\016\261\021\120\022\257\023\254" +
    "\024\266\025\263\001\001\000\026\012\262\013\264\014" +
    "\124\015\106\016\261\021\120\022\257\023\254\024\265" +
    "\025\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\136\027\304\001\001\000\006\026\136\027\303\001\001" +
    "\000\006\026\136\027\302\001\001\000\006\026\136\027" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        ManejoDatos manejoDatos;
        String tipo;
        int tempWhile;
        List<Integer> numsIf;
        List<Integer> numsWh;
        int valt=1;
        int vall=1;
        int valv=1;
        int valf=1;
        public int dimension=0;
        List<Variable> varsTemp;
        public parser(lexico lex,ManejoDatos manejoDatos) { 
            super(lex);
            this.manejoDatos=manejoDatos;
            varsTemp=new ArrayList<>();
            numsIf=new ArrayList<>();
            numsWh=new ArrayList<>();
        }
        //manejo de Errores
        public void syntax_error(Symbol s){
            manejoDatos.addErrores(String.valueOf(s.value), "Sintactico", s.left, s.right);
        }

        //manejo de Operaciones
        public Variable operar(Variable val1,String op,Variable val2,int fila,int columna){
        
            Variable resultado=new Variable("null","t"+valt,"null");
                             manejoDatos.varsC.add(new Variable(val1.getTipo(),"t"+valt,"0"));
            Instruccion ins=new Instruccion("t"+valt,op,"","");
            valt++;
            String valS;
            if(val1.getNombre().equals("null")){
                ins.setOp1(val1.getValor());
                valS=val1.getValor()+op;
            }else{
                ins.setOp1(val1.getNombre());
                valS=val1.getNombre()+op;
            }
            if(val2.getNombre().equals("null")){
                ins.setOp2(val2.getValor());
                valS+=val2.getValor();
            }else{
                ins.setOp2(val2.getNombre());
                valS+=val2.getNombre();
            }
            manejoDatos.addInstruccion(ins);
            if(val1.getTipo().equals(val2.getTipo())){
                if(val1.getTipo().equals("int")){
                    resultado.setTipo("int");
                    resultado.setValor("0");
                }else{
                    resultado.setTipo("float");
                    resultado.setValor("0f");
                }
            }else{
                manejoDatos.addErrores(valS,"valores no compatibles",fila,columna);
                resultado.setValor("0");
            }
            return resultado;
        }

        //manejo de Variables
        public Variable getVariable(String nombre,int fila,int columna){
            Variable variable = manejoDatos.getVariable(nombre,fila,columna);
            if(variable==null){
                variable=new Variable("null",nombre,"0");
            }
            return new Variable(variable.getTipo(),variable.getNombre(),variable.getValor());
        }
        public Variable operarMas(Variable op1,String op,Variable op2,int fila,int columna){
            Variable resultado= new Variable("null","t"+valt,"0");
            Variable var3d=new Variable("null","t"+valt,"0");
            valt++;
            String valS="";
            if(!op1.getNombre().equals("null")){
                valS=op1.getNombre()+"+";
            }else{
                valS=op1.getValor()+"+";
            }
            if(!op2.getNombre().equals("null")){
                valS+=op2.getNombre();
            }else{
                valS+=op2.getValor();
            }
            var3d.setValor(valS);
            if(op1.getTipo().equals(op2.getTipo())){
                if(op1.getTipo().equals("int")){
                    int res=op1.getValorI()+op2.getValorI();
                    var3d.setTipo("int");
                    resultado.setTipo("int");
                    resultado.setValor(String.valueOf(res));
                }else if(op1.getTipo().equals("float")){
                    float res=op1.getValorF()+op2.getValorF();
                    var3d.setTipo("float");
                    resultado.setTipo("float");
                    resultado.setValor(String.valueOf(res));
                }else{
                    manejoDatos.addErrores(valS,"valores de diferente tipo",fila,columna);
                }
            }else{
                //no son del mismo tipo
            }
            manejoDatos.addVar3d(var3d);
            return resultado;
        }

        public Variable operarMenos(Variable op1,String op,Variable op2,int fila,int columna){
            Variable resultado= new Variable("null","t"+valt,"0");
            Variable var3d=new Variable("null","t"+valt,"0");
            valt++;
            String valS="";
            if(!op1.getNombre().equals("null")){
                valS=op1.getNombre()+"-";
            }else{
                valS=op1.getValor()+"-";
            }
            if(!op2.getNombre().equals("null")){
                valS+=op2.getNombre();
            }else{
                valS+=op2.getValor();
            }
            var3d.setValor(valS);

            if(op1.getTipo().equals(op2.getTipo())){
                if(op1.getTipo().equals("int")){
                    int res=op1.getValorI()-op2.getValorI();
                    var3d.setTipo("int");
                    resultado.setTipo("int");
                    resultado.setValor(String.valueOf(res));
                }else if(op1.getTipo().equals("float")){
                    float res=op1.getValorF()-op2.getValorF();
                    var3d.setTipo("float");
                    resultado.setTipo("float");
                    resultado.setValor(String.valueOf(res));
                }else{
                    manejoDatos.addErrores(valS,"valores de diferente tipo",fila,columna);
                }
            }else{
                //no son del mismo tipo
            }
            manejoDatos.addVar3d(var3d);
            return resultado;
        }

        public Variable operarDiv(Variable op1,String op,Variable op2,int fila,int columna){
            Variable resultado= new Variable("null","t"+valt,"0");
            Variable var3d=new Variable("null","t"+valt,"0");
            valt++;
            String valS="";
            if(!op1.getNombre().equals("null")){
                valS=op1.getNombre()+"/";
            }else{
                valS=op1.getValor()+"/";
            }
            if(!op2.getNombre().equals("null")){
                valS+=op2.getNombre();
            }else{
                valS+=op2.getValor();
            }
            var3d.setValor(valS);

            if(op1.getTipo().equals(op2.getTipo())){
                if(op1.getTipo().equals("int")){
                    int res=op1.getValorI()+op2.getValorI();
                    var3d.setTipo("int");
                    resultado.setTipo("int");
                    resultado.setValor(String.valueOf(res));
                }else if(op1.getTipo().equals("float")){
                    float res=op1.getValorF()+op2.getValorF();
                    var3d.setTipo("float");
                    resultado.setTipo("float");
                    resultado.setValor(String.valueOf(res));
                }else{
                    manejoDatos.addErrores(valS,"valores de diferente tipo",fila,columna);
                }
            }else{
                //no son del mismo tipo
            }
            manejoDatos.addVar3d(var3d);
            return resultado;
        }

        public Variable operarPor(Variable op1,String op,Variable op2,int fila,int columna){
            Variable resultado= new Variable("null","t"+valt,"0");
            Variable var3d=new Variable("null","t"+valt,"0");
            valt++;
            String valS="";
            if(!op1.getNombre().equals("null")){
                valS=op1.getNombre()+"*";
            }else{
                valS=op1.getValor()+"*";
            }
            if(!op2.getNombre().equals("null")){
                valS+=op2.getNombre();
            }else{
                valS+=op2.getValor();
            }
            var3d.setValor(valS);

            if(op1.getTipo().equals(op2.getTipo())){
                if(op1.getTipo().equals("int")){
                    int res=op1.getValorI()+op2.getValorI();
                    var3d.setTipo("int");
                    resultado.setTipo("int");
                    resultado.setValor(String.valueOf(res));
                }else if(op1.getTipo().equals("float")){
                    float res=op1.getValorF()+op2.getValorF();
                    var3d.setTipo("float");
                    resultado.setTipo("float");
                    resultado.setValor(String.valueOf(res));
                }else{
                    manejoDatos.addErrores(valS,"valores de diferente tipo",fila,columna);
                }
            }else{
                //no son del mismo tipo
            }
            manejoDatos.addVar3d(var3d);
            return resultado;
        }
        public void cambiarValor(String nombre,Variable variable,int fila,int columna){
            Variable variable1=manejoDatos.getVariable(nombre,fila,columna);
            if(variable!=null){
                
                if(!variable1.getTipo().equals(variable.getTipo())){
                    manejoDatos.addErrores(nombre,"Semantico",fila,columna);
                }else{
                    Instruccion ins=new Instruccion(variable1.getNombre(),"",variable.getNombre(),"");
                    if(!variable.getNombre().equals("null")){
                        ins.setOp1(variable.getNombre());
                    }else{
                        ins.setOp1(variable.getValor());
                    }
                    manejoDatos.addInstruccion(ins);    
                }
            }
        }
        public void addVarTemp(Variable variable,int fila,int columna){
            String val="0";
            switch(this.tipo){
                    case "int":
                        val="0";
                        if(variable.getTipo().equals("null")||variable.getTipo().equals("int")){
                            variable.setTipo("int");
                            if(variable.getValor().equals("null")){
                                variable.setValor("0");
                            }
                            this.manejoDatos.agregarVariable(variable,fila,columna);
                        }else{
                            //error semantico
                            manejoDatos.addErrores(variable.getNombre(),"Semantico",fila,columna);
                        }
                    break;
                    case "float":
                        val="0";
                        if(variable.getTipo().equals("null")||variable.getTipo().equals("float")){
                            variable.setTipo("float");
                            if(variable.getValor().equals("null")){
                                variable.setValor("0");
                            }
                            this.manejoDatos.agregarVariable(variable,fila,columna);
                        }else{
                            //error Semantico
                            manejoDatos.addErrores(variable.getNombre(),"Semantico",fila,columna);
                        }
                    break;
                }
            for(int i=0;i<manejoDatos.vars3d.size();i++){
                if(manejoDatos.vars3d.get(i).getTipo().equals("null")){
                    manejoDatos.vars3d.get(i).setTipo(tipo);
                }
                if(manejoDatos.vars3d.get(i).getValor().equals("null")){
                    manejoDatos.vars3d.get(i).setValor(val);
                }
            }       
            varsTemp.clear();

            varsTemp.add(variable);
        }
        public String getValorString(Variable variable,int fila,int columna){
            String resultado="";
            if(variable.getTipo().equals("String")){
                resultado=variable.getValor();
            }else{
                //Error Semantico
                manejoDatos.addErrores(variable.getNombre(),"Semantico",fila,columna);
            }
            return resultado;
        }
        public void agregarVariableString(Variable variable,int fila,int columna){
            this.tipo="String";
            addVarTempString(variable,fila,columna);
        }
        public void addVarTempBoolean(Variable variable,int fila,int columna){
                Variable var3d=new Variable("boolean",variable.getNombre(),variable.getValor());
                manejoDatos.addVar3d(var3d);

                if(tipo.equals("boolean")){
                manejoDatos.agregarVariable(variable,fila,columna);
                }else{
                    //error semantico
                    manejoDatos.addErrores(variable.getNombre(),"Semantico",fila,columna);
                }
        }
        public void addVarTempString(Variable variable,int fila,int columna){
                Variable var3d=new Variable("String",variable.getNombre(),variable.getValor());
                manejoDatos.addVar3d(var3d);
                
                if(tipo.equals("String")){
                    manejoDatos.agregarVariable(variable,fila,columna);
                }else{
                    //error semantico
                    manejoDatos.addErrores(variable.getNombre(),"Semantico",fila,columna);
                }
        }
        public void agregarVariableBoolean(int fila,int columna,Variable variable){
            this.tipo="boolean";
            this.addVarTempBoolean(variable,fila,columna);
        }
        public void agregarVariable(String tipo,int fila,int columna,Variable variable){
            this.tipo=tipo;
            this.addVarTemp(variable,fila,columna);
            
        }
        public void agregarVariableArreglo(Arreglo arreglo,int fila,int columna){
            this.manejoDatos.agregarVariable(new Variable("Arreglo",arreglo.getNombre(),"0"),fila,columna);
            this.manejoDatos.agregarVariableArreglo(arreglo);
        }
        public void addCode3d(String nombre,Variable var){
            Variable var3d=new Variable("null",nombre,"null");
            if(var.getNombre().equals("null")){
                var3d.setValor(var.getValor());
            }else if(!var.getValor().equals("null")){
                var3d.setValor(var.getNombre());
            }
            manejoDatos.addVar3d(var3d);
        }
        //impresiones
        public void codPrints(String mensaje){
            manejoDatos.addInstruccion(new Instruccion("prints","",mensaje,""));
        }
        public void codPrintn(Variable variable){
            if(variable.getNombre().equals("null")){
                manejoDatos.addInstruccion(new Instruccion("printn","",variable.getValor(),""));
            }else{
                manejoDatos.addInstruccion(new Instruccion("printn","",variable.getNombre(),""));
            }
        }
        //lecturas
        public void codScanS(String id,int fila,int columna){
            Variable var=manejoDatos.getVariable(id,fila,columna);
            if(var!=null){
                if(var.getTipo().equals("String")){
                    manejoDatos.addInstruccion(new Instruccion("scanS","",id,""));
                }else{
                    manejoDatos.addErrores(id,"variable no es String",fila,columna);
                }
                
            }
        }
        public void codScanN(String id,int fila,int columna){
            Variable var=manejoDatos.getVariable(id,fila,columna);
            if(var!=null){
                if(var.getTipo().equals("int")||var.getTipo().equals("float")){
                    manejoDatos.addInstruccion(new Instruccion("scanN","",id,""));
                }else{
                    manejoDatos.addErrores(id,"variable no es tipo Numerico",fila,columna);
                }
                
            }

        }
        //Sentencia Logicas
        public String codIf(Variable var1,String op,Variable var2){
            if(!numsIf.isEmpty()){
                if(numsIf.get(numsIf.size()-1)==vall){
                    vall++;
                }
            }
            String nombre="L"+vall;
            String op1;
            String op2;
            if(var1.getNombre().equals("null")){
                op1=var1.getValor();
            }else{
                op1=var1.getNombre();
            }
            if(var2.getNombre().equals("null")){
                op2=var2.getValor();
            }else{
                op2=var2.getNombre();
            }
            Instruccion ins=new Instruccion(nombre,op,op1,op2);
            Instruccion ins2=new Instruccion("if","goto",nombre,"L"+(vall+1));
            manejoDatos.addInstruccion(ins2); 
            manejoDatos.addInstruccion(ins);   
            vall++;
            numsIf.add(vall);
            return nombre;
        }
        public String codIfUn(String val){
            if(!numsIf.isEmpty()){
                if(numsIf.get(numsIf.size()-1)==vall){
                    vall++;
                }
            }
            String nombre="L"+vall;
            Instruccion ins=new Instruccion(nombre,"",val,"");
            Instruccion ins2=new Instruccion("ifUn","goto",nombre,"L"+(vall+1));
            manejoDatos.addInstruccion(ins2); 
            manejoDatos.addInstruccion(ins);   
            vall++;
            numsIf.add(vall);
            return val;
        }
        public String getVarBoolean(String val,int fila,int columna){
            Variable var=manejoDatos.getVariable(val,fila,columna);   
            if(var!=null){
                if(!var.getTipo().equals("boolean")){
                    manejoDatos.addErrores(val,"variable no es booleana",fila,columna);
                }else{
                    if(!numsIf.isEmpty()){
                        if(numsIf.get(numsIf.size()-1)==vall){
                            vall++;
                        }
                    }
                    String nombre="L"+vall;
                    Instruccion ins=new Instruccion(nombre,"",val,"");
                    Instruccion ins2=new Instruccion("ifUn","goto",nombre,"L"+(vall+1));
                    manejoDatos.addInstruccion(ins2); 
                    manejoDatos.addInstruccion(ins);   
                    vall++;
                    numsIf.add(vall);
                }
            }
            return val;
        }
        public void codBool(String id,String val,int fila,int columna){
            Variable var=manejoDatos.getVariable(id,fila,columna);
            if(var!=null){
                if(var.getTipo().equals("boolean")){
                    Instruccion ins=new Instruccion(id,"",val,"");
                    manejoDatos.addInstruccion(ins);
                }else{
                    manejoDatos.addErrores(id,"no es booleano",fila,columna);
                }
            }
            
        }
        public void fin(){
            Instruccion ins=new Instruccion("fin","","L"+numsIf.get(numsIf.size()-1),"");
            manejoDatos.addInstruccion(ins);
            vall++;
            numsIf.remove(numsIf.size()-1);
        }
        public void codElse(){
            Instruccion ins=new Instruccion("else","","L"+numsIf.get(numsIf.size()-1),"L"+(numsIf.get(numsIf.size()-1)+1));
            manejoDatos.addInstruccion(ins);
            numsIf.remove(numsIf.size()-1);
            vall++;
            numsIf.add(vall);
        }
        public String codWhile(Variable var1,String op,Variable var2){
            String nombre="L"+vall;
            String op1;
            String op2;
            if(var1.getNombre().equals("null")){
                op1=var1.getValor();
            }else{
                op1=var1.getNombre();
            }
            if(var2.getNombre().equals("null")){
                op2=var2.getValor();
            }else{
                op2=var2.getNombre();
            }
            Instruccion ins=new Instruccion(nombre,op,op1,op2);
            Instruccion ins2=new Instruccion("while",nombre,"L"+(vall+1),"L"+(vall+2));
            manejoDatos.addInstruccion(ins2); 
            manejoDatos.addInstruccion(ins);
            numsWh.add(vall);
            vall=vall+3;
            return nombre;
        }
        public void finWhile(){
            Instruccion ins=new Instruccion("finWhile","","L"+(numsWh.get(numsWh.size()-1)),"L"+(numsWh.get(numsWh.size()-1)+2));
            manejoDatos.addInstruccion(ins);
            numsWh.remove(numsWh.size()-1);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // estructuraWhile ::= WHILE PARA opeRelacionales2 PARC LLAVEA instrucciones2 LLAVEC 
            {
              Object RESULT =null;
		parser.finWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraWhile",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // estructuraWhile ::= WHILE PARA opeRelacionales2 PARC LLAVEA LLAVEC 
            {
              Object RESULT =null;
		parser.finWhile();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraWhile",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opeRelacionales3 ::= operacion DIFERENTE operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"!=",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opeRelacionales3 ::= operacion IGUAL operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"==",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opeRelacionales3 ::= operacion MAYOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,">",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opeRelacionales3 ::= operacion MENOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"<",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opeRelacionales2 ::= ID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.getVarBoolean(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opeRelacionales2 ::= FALSE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opeRelacionales2 ::= TRUE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opeRelacionales2 ::= operacion DIFERENTE operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codWhile(a,"!=",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opeRelacionales2 ::= operacion IGUAL operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codWhile(a,"==",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opeRelacionales2 ::= operacion MAYOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codWhile(a,">",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opeRelacionales2 ::= operacion MENOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codWhile(a,"<",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opeRelacionales ::= ID 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.getVarBoolean(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opeRelacionales ::= FALSE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIfUn("0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opeRelacionales ::= TRUE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIfUn("1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opeRelacionales ::= operacion DIFERENTE operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"!=",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opeRelacionales ::= operacion IGUAL operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"==",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opeRelacionales ::= operacion MAYOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,">",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opeRelacionales ::= operacion MENOR operacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.codIf(a,"<",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opeRelacionales",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // booleano ::= opeRelacionales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleano",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccionElse ::= ELSE LLAVEA instrucciones LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElse",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccionElse ::= ELSE LLAVEA LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionElse",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instruccionIf ::= IF PARA booleano PARC LLAVEA instrucciones LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instruccionIf ::= IF PARA booleano PARC LLAVEA LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estructuraIf ::= instruccionIf NT$0 instruccionElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.fin();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraIf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$0 ::= 
            {
              Object RESULT =null;
parser.codElse();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estructuraIf ::= instruccionIf 
            {
              Object RESULT =null;
		parser.fin();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraIf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lecturas ::= SCANN PARA ID PARC PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.codScanN(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lecturas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lecturas ::= SCANS PARA ID PARC PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.codScanS(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lecturas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructuraPrintn ::= PRINTN PARA operacion PARC PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.codPrintn(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrintn",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructuraPrints ::= PRINTS PARA LITERAL PARC PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.codPrints(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraPrints",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // impresiones ::= estructuraPrintn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresiones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // impresiones ::= estructuraPrints 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresiones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cantidad ::= CORA ENTERO CORC 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.dimension++;RESULT=Integer.parseInt(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidad",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cantidad ::= CORA ENTERO CORC cantidad 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.dimension++;RESULT=Integer.parseInt(a)*e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cantidad",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arreglo ::= ID cantidad 
            {
              Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Arreglo(a,"null",parser.dimension,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valoresS ::= ID 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= parser.getVariable(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valoresD ::= FLOTANTE 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable("float","null",e.substring(0,e.length()-1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valoresD ::= ENTERO 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable("int","null",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valoresD ::= ID 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= parser.getVariable(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valoresD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operacion2 ::= valoresD 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operacion2 ::= PARA operacion2 PARC 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operacion2 ::= operacion2 DIV operacion2 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=parser.operarDiv(a,"*",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operacion2 ::= operacion2 POR operacion2 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=parser.operarPor(a,"/",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operacion2 ::= operacion2 MENOS operacion2 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operarMenos(a,"-",e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operacion2 ::= operacion2 MAS operacion2 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operarMas(a,"+",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variableBoolean ::= ID ASIGNAR FALSE 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable("boolean",a,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBoolean",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variableBoolean ::= ID ASIGNAR TRUE 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Variable("boolean",a,"1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBoolean",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variableBoolean ::= ID 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable("boolean",e,"0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableBoolean",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varsBoolean ::= BOOLEAN arreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo e = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.dimension=0;e.setTipo(a);parser.agregarVariableArreglo(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsBoolean",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varsBoolean ::= BOOLEAN variableBoolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.agregarVariableBoolean(eleft,eright,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsBoolean",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varsBoolean ::= varsBoolean COMA variableBoolean 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.addVarTempBoolean(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsBoolean",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable ::= ID ASIGNAR operacion2 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.addCode3d(a,e);e.setNombre(a);RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable ::= ID 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.addCode3d(e,new Variable("null",e,"null"));RESULT = new Variable("null",e,"null");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variableS ::= ID ASIGNAR LITERAL 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable("String",a,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variableS ::= ID ASIGNAR valoresS 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable("String",a,parser.getValorString(e,eleft,eright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variableS ::= ID 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable("String",e,"\"\"");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varsString ::= STRING arreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo e = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.dimension=0;e.setTipo(a);parser.agregarVariableArreglo(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsString",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varsString ::= STRING variableS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.agregarVariableString(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsString",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varsString ::= varsString COMA variableS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.addVarTempString(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varsString",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= INT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vars ::= tipo arreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo e = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.dimension=0;e.setTipo(a);parser.agregarVariableArreglo(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vars ::= tipo variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.agregarVariable(a,eleft,eright,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vars ::= vars COMA variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.addVarTemp(e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion ::= varsString PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= varsBoolean PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= vars PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= valoresD 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion ::= PARA operacion PARC 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion ::= operacion DIV operacion 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operar(a,"/",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion ::= operacion POR operacion 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operar(a,"*",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion ::= operacion MENOS operacion 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operar(a,"-",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= operacion MAS operacion 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=parser.operar(a,"+",e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipValores ::= FALSE 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable("boolean","null","0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipValores ::= TRUE 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable("boolean","null","1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipValores ::= LITERAL 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable("String","null",e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipValores ::= operacion 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipValores",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cambiarValor ::= ID ASIGNAR opeRelacionales3 PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.codBool(a,"1",aleft,aright);parser.codElse();parser.codBool(a,"0",aleft,aright);parser.fin();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cambiarValor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cambiarValor ::= ID ASIGNAR tipValores PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.cambiarValor(a,e,eleft,eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cambiarValor",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // insBreak ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		parser.manejoDatos.addInstruccion(new Instruccion("break","","",""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insBreak",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones2 ::= insBreak 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones2 ::= insBreak instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones2 ::= estructuraWhile instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones2 ::= estructuraWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones2 ::= estructuraIf instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones2 ::= estructuraIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones2 ::= lecturas instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones2 ::= lecturas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones2 ::= impresiones instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones2 ::= impresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones2 ::= cambiarValor instrucciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciones2 ::= cambiarValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= estructuraWhile instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= estructuraWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= estructuraIf instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= estructuraIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= lecturas instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= lecturas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= impresiones instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= impresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= cambiarValor instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= cambiarValor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccion2 ::= MAIN PARA PARC LLAVEA LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccion2 ::= MAIN PARA PARC LLAVEA instrucciones LLAVEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccion1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccion1 ::= error seccion1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccion1 ::= asignacion seccion1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion1 ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= seccion1 seccion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= seccion1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

