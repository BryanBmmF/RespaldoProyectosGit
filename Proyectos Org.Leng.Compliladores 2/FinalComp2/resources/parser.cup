package practica1comp2.backend.analizadores;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import javax.swing.JTextArea;
import practica1comp2.backend.ast.*;
import practica1comp2.backend.expresiones.Expresion;
import practica1comp2.backend.instrucciones.*;
import practica1comp2.backend.analizadores.simbolos.*;
import practica1comp2.backend.generadores.GeneradorCod;
import practica1comp2.backend.generadores.EtiqCondicion;


parser code {:

	private Lexer myLexer;
    private List<String> errorsList;
    private GeneradorCod generador;
    private TablaSimbolos symTable;

	public Parser(Lexer lex, GeneradorCod generador, TablaSimbolos symTable) { //falta recibir algunas tabals sim/tip
		super(lex);
		this.myLexer = lex;
		this.errorsList = myLexer.getErrorsList();
		this.generador = generador;
        this.symTable = symTable;
	}
	/*Manejo de Errores*/
	@Override
        public void syntax_error(Symbol st) {
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura- linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
            
            System.out.println("Error Sintactico con el Token: " + token.getLexeme() + " este no pertenece a la estructura linea: " + token.getLine() + ", columna: " + token.getColumn());
                    errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura linea: %d  columna: %d. Corrige e intenta de nuevo.", token.getLexeme(), token.getLine(), token.getColumn()));
        }

        public void addSemanticError(String msg) {
            this.errorsList.add(msg);
        }

	
:}

/* Terminals (tokens returned by the scanner). */
terminal Token BOOLEAN;
terminal Token	CHAR;
terminal Token	BYTE;
terminal Token	INT;
terminal Token	LONG;
terminal Token	FLOAT;
terminal Token	DOUBLE;
terminal Token	STRING;
terminal Token	VOID;
terminal Token	RETURN;

terminal Token	MAS;
terminal Token	MENOS;
terminal Token  POR;
terminal Token DIV;
terminal Token	MOD;

terminal Token	NOT;
terminal Token	AND;
terminal Token	OR;
terminal Token	TRUE;
terminal Token	FALSE;

terminal Token	MAYOR;
terminal Token	MENOR;
terminal Token	MAYOR_I;
terminal Token	MENOR_I;
terminal Token IGUAL;
terminal Token	DISTINTO;

terminal Token	PARENT_A;
terminal Token	PARENT_C;
terminal Token	CORCH_A;
terminal Token	CORCH_C;

terminal Token	COMA;
terminal Token	PT_COMA;
terminal Token	DOS_PT;
terminal Token	ASIGN;
terminal Token	PORCENT;

terminal Token NUMERO_ENTERO;
terminal Token	NUMERO_FLOTANTE;
terminal Token	IDENTIFICADOR;

terminal Token	MAIN;
terminal Token	ARRAY;
terminal Token	IF;

terminal Token	ELSE;
terminal Token	ELSIF;
terminal Token	WHILE;
terminal Token	DO;
terminal Token	FOR;
terminal Token	PRINT;
terminal Token	PRINTLN;
terminal Token	SCANS;
terminal Token	SCANN;

terminal Token	CADENA;

/* Non-Terminals (created scanner). */
non terminal List<Instruccion> instrucciones;
non terminal List<Instruccion> instrucciones_bloque;
non terminal Instruccion instruccion;
non terminal Instruccion declaracion;
non terminal Instruccion arreglo;
non terminal Instruccion sentencia;
non terminal Instruccion escritura;
non terminal Instruccion llamar_sub;
non terminal Instruccion retorno;
non terminal Instruccion scans;
non terminal List<InstruccionIf> elsifs;
non terminal InstruccionIf elsif;
non terminal Instruccion sent_while;
non terminal Instruccion sent_do_while;
non terminal Instruccion sent_for;

non terminal List<Id> vars, vars1;
non terminal Id var;
non terminal Tipo tipo;
non terminal Instruccion asig;

non terminal  Expresion expr_dec, termin, factor, f_unar;
non terminal  Expresion expr_log, expr_log2, expr_log3;
non terminal  Expresion cond_rel;

//non terminal dims;
non terminal Incremento incremento;
non terminal List<Expresion> impres;

non terminal Ast program;
non terminal Expresion loc; 
non terminal TipoDim tipo_dim;

//nuevos
non terminal List<Instruccion> subprogramas;
non terminal Instruccion subprograma;
non terminal List<Parametro>  parameters;
non terminal Parametro        parameter;
non terminal List<Expresion>  parameters_llamada;
non terminal Expresion       parameter_llamada;
non terminal Instruccion declaraciones;
non terminal List<Instruccion> n_declaraciones;
non terminal InstruccionMain mains;

non terminal InstruccionSub instrucciones_subprograma;
non terminal List<Instruccion> instrucciones_main;
non terminal List<Expresion> dimensiones;
non terminal Expresion unaDimension;

/* Precedences */
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
//precedence left MENOSUNARIO;
precedence left OR, AND, NOT;
precedence left ELSE, ELSIF;


/* The grammar : */

start with program;

/*program -> declaracion
			 declaracion de arreglos
			 subprogramas
				declaraciones 
				declaracion de arreglos
				%%%
				instrucciones
			 %%%
			 main
				declaracion
				declaracion arreglos
				instrucciones

			 */
/*Estructura de codigo fuente*/
program ::= n_declaraciones:des subprogramas:subs PORCENT:ps mains:mains
			{:
				/*Aqui hacemos la validacion semantica de las declaraciones porque sabemos que son globales*/
				/*validar que alguna de las variables que se estan declarando/asignando no hallan sido declaradas anteriormente*/
				if(symTable.verificarProgComplet(des, subs, mains)){
					RESULT = new Ast(des, subs, mains);	
				} else {
					RESULT = null;
				}	
				
			:}
			| n_declaraciones:des PORCENT:ps mains:mains
			{:
				if(symTable.verificarProgComplet(des, null, mains)){
					RESULT = new Ast(des, null, mains);	
				} else {
					RESULT = null;
				}
			:}
			| subprogramas:subs PORCENT:ps mains:mains
			{:
				if(symTable.verificarProgComplet(null, subs, mains)){
					RESULT = new Ast(subs, mains, true);	
				} else {
					RESULT = null;
				}

			:}
			| PORCENT:ps mains:mains
			{:
				if(symTable.verificarProgComplet(null, null, mains)){
					RESULT = new Ast(mains);
				} else {
					RESULT = null;
				}

			:}

;

/*Declaraciones*/
n_declaraciones ::= n_declaraciones:ndes declaraciones:des {:
						ndes.add(des);
                    	RESULT = ndes;
					:}
					| declaraciones:des {:
						List<Instruccion> instructions = new ArrayList<>();
                    	instructions.add(des);
                    	RESULT = instructions;

					:}
;  

declaraciones ::= declaracion:dec PT_COMA:e1 {:
					RESULT = dec;
				:}
				|arreglo:arr PT_COMA:e1 {:
					RESULT = arr;
				:}
				|asig:as PT_COMA:e1 {:
					RESULT = as;
					
				:}
				
;

/*Subprogramas*/
subprogramas ::=  subprogramas:subs subprograma:sub {:
						subs.add(sub);
                    	RESULT = subs;
					:}
					| subprograma:sub {:
						List<Instruccion> instructions = new ArrayList<>();
                    	instructions.add(sub);
                    	RESULT = instructions;

					:}

;

subprograma ::= tipo:tipo IDENTIFICADOR:id PARENT_A:pa parameters:parameters PARENT_C:pc instrucciones_subprograma:sub
					{: 			/*seteo de algunos parametros*/
								sub.setTipo(tipo);
								sub.setProcessName(id);
								sub.setParametros(parameters);
								RESULT = sub;
					:}
				| tipo:tipo IDENTIFICADOR:id PARENT_A:pa PARENT_C:pc instrucciones_subprograma:sub //sin parametros
					{: 			/*seteo de algunos parametros*/
								sub.setTipo(tipo);
								sub.setProcessName(id);
								RESULT = sub;
					:}
				
;

parameters ::= parameters:parameters COMA parameter:parameter 
                {: parameters.add(parameter);
                   RESULT = parameters;
                :}
                
                | parameter:parameter 
                {:
                    List<Parametro> parameters = new ArrayList<>();
                    parameters.add(parameter);
                    RESULT = parameters;
                :}
;
parameter ::= tipo:t IDENTIFICADOR:parameter 
                {:
                	RESULT = new Parametro(t, parameter);
                :}
;   

parameters_llamada ::= parameters_llamada:parameters_llamada COMA parameter_llamada:parameter_llamada 
                {: parameters_llamada.add(parameter_llamada);
                   RESULT = parameters_llamada;
                :}
                
                | parameter_llamada:parameter_llamada 
                {:
                    List<Expresion> parameters = new ArrayList<>();
                    parameters.add(parameter_llamada);
                    RESULT = parameters;
                :}
;
parameter_llamada ::= expr_log:parameter 
                {:
                	RESULT = parameter;
                :}
;

/*funcion main*/
mains ::= MAIN:m PARENT_A:pa PARENT_C:pc instrucciones_main:list {:
				RESULT = new InstruccionMain(list,generador);
		:}

;

/*instrucciones sentencias de control ciclos etc*/
instrucciones ::= instrucciones:list instruccion:ins {:  
					list.add(ins);
                    RESULT = list;

				:}

				| instruccion:ins {:
					List<Instruccion> instructions = new ArrayList<>();
                    instructions.add(ins);
                    RESULT = instructions;

				:}
;

instruccion ::= declaracion:dec PT_COMA:e1 {: //acepta declaraciones en cualquier parte por el main
					RESULT = dec;
				:}
				|arreglo:arr PT_COMA:e1 {:
						RESULT = arr;
				:}
				|asig:as PT_COMA:e1 {:
					/*Validacion semantica de asignacion se hace despues */
					RESULT = as;				
					
				:}
				|sentencia:s {:
					RESULT = s;
				:}
				|escritura:esc PT_COMA:e1 {:
					RESULT = esc;
				:}
			  	|sent_while:sent_while {:
					RESULT = sent_while;
				:}
			  	|sent_do_while:do_while {:
					RESULT = do_while;
				:}
			  	|sent_for:sent_for {:
					RESULT = sent_for;
				:}
				|llamar_sub:llamar_sub PT_COMA:e1  {:
					RESULT = llamar_sub;
				:}
				|retorno:retorno PT_COMA:e1{:
					RESULT = retorno;
				:}
				|scans:scans PT_COMA:e1{:
					RESULT = scans;
				:}
				| error:e  
					{: 
						System.out.println("--------Error instrucion invalida  " + eleft + eright); RESULT = new InstruccionVacia(generador);
					:}

			;
llamar_sub ::= IDENTIFICADOR:id PARENT_A:pa parameters_llamada:parameters PARENT_C:pc {:
					RESULT = new InstruccionLlamarSub(id, parameters, generador);	
				:}
				| IDENTIFICADOR:id PARENT_A:pa PARENT_C:pc {://sin parametros
					RESULT = new InstruccionLlamarSub(id, null, generador);
				:}
;

retorno ::= 
			 RETURN:ret expr_log:exp {:
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion despues
			 		RESULT = new InstruccionRetorno(ret, exp,generador);
			 	:}
;

scans ::= SCANS:ss CORCH_A:pa IDENTIFICADOR:id CORCH_C:pc  //VALIDAR QUE ID SEA TIPO STRING 
				{:
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion
			 		RESULT = new InstruccionScan(id, generador.getOp().SCANS, symTable ,generador);
			 	:}
			| SCANN:ss CORCH_A:pa IDENTIFICADOR:id CORCH_C:pc  //VALIDAR QUE ID SEA TIPO NUMERICO
				{:
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion
			 		RESULT = new InstruccionScan(id, generador.getOp().SCANN, symTable ,generador);
			 	:}
;

declaracion ::= tipo:t vars:vs {:
				/*No se hace la validacion semantica en este punto porque no se sabe si se esta declarando en un subprograma o global*/
				RESULT = new InstruccionDeclaracion(t,vs,generador);
			:}			
;

vars ::= vars:vs COMA:e1 var:var {:
			vs.add(var);
             RESULT = vs;
		:}
			| var:v {:
				List<Id> vars = new ArrayList<>();
              	vars.add(v);
              	RESULT = vars;
			:}
;

var ::= asig:as {:
			InstruccionAsig temp = (InstruccionAsig)as;
			RESULT = new Id(temp.getLoc().getId(),true, (InstruccionAsig)as,null);
		:}
		| IDENTIFICADOR:id {:
		  	RESULT = new Id(id,false);
		:}
;

asig ::= loc:l ASIGN:e2 expr_log:ex {:
			//en este punto no puedo hacer la validacion semantica porque puede se este declarando y asignando la variable de una vez
			if (l.getIdent()!=null) {
				RESULT = new InstruccionAsig(new Id(new Token(l.getLugarTemp(),l.getIdent().getId().getLine(),l.getIdent().getId().getColumn()),true, l),ex, generador);
			} else {
				//para identificador de arreglos
				RESULT = new InstruccionAsig(new Id(l.getIdArray().getId(),true, l),ex, generador);
			}	

		:}			
;

tipo ::= BOOLEAN:e1 {:
			RESULT = symTable.getTipo(e1);
		:}
			|CHAR:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|BYTE:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|INT:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|LONG:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|FLOAT:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|DOUBLE:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|STRING:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
			|VOID:e1 {:
			RESULT = symTable.getTipo(e1);
			:}
		;

/* Las producciones de la gramática para expresiones aritmeticas */
expr_dec ::= expr_dec:e1 MAS:e2 termin:t1 {:
				RESULT = new Expresion(generador.getOp().MAS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, null, generador);		
			:}
			|expr_dec:e1 MENOS:e2 termin:t1 {:
				RESULT = new Expresion(generador.getOp().MENOS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, null, generador);
			:}	
            |termin:t1 {:
            	RESULT = t1;
            :}
;

termin ::=  termin:t1 POR:e2 f_unar:f1 {:
				//RETORNA EL DE MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().POR,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			:}
		   |termin:t1 DIV:e2 f_unar:f1 {:
		   		//RETORNA MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().DIV,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			:}
		   |termin:t1 MOD:e2 f_unar:f1 {:
		   		//RETORNA RESIDUO MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().MOD,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			:}    
				
		   | f_unar:f1 {:
				RESULT = f1;
			:} 
		;
f_unar ::=  NOT:no f_unar:f1 {:
				//comprobar que sea una expresion booleana la que se va negar
				RESULT = new Expresion(generador.getOp().NOT,null, f1, null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);
			:}
			| MENOS:m f_unar:f1 {:
				//comprobar que sea una exp aritmetica la que se va convertir en negativa
				RESULT = new Expresion(generador.getOp().MINUS,null, f1,null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);
			:} 
			| factor:f1 {:
				RESULT = f1;
			:}
        ;
factor ::= PARENT_A:e1 expr_log:e2 PARENT_C:e3 {:
				RESULT = e2;
			:}
			| NUMERO_ENTERO:e1 {:
				//COMPROBAR RANGO PARA ASIGNAR SU TIPO DE ENTERO EN TEORIA TODOS SON LONG SI ESTAN DENTR DEL RANGO
				RESULT = new Expresion(null,""+e1.getLexeme(), null, null,null, null,
				 null, symTable.getComprob().tipoEntero(e1), generador);
			:}
			| NUMERO_FLOTANTE:e1 {:
				//COMPROBAR QUE TRAIGA LA F PARA SER FLOAT SINO ES DOUBLE 
				RESULT = new Expresion(null,e1.getLexeme().substring(0, e1.getLexeme().length()-1), null, null,null, null,
				 null, symTable.getComprob().tipoDecimal(e1), generador);
			:}
			| TRUE:t1 {:
				RESULT = new Expresion(generador.getOp().TRUE,"1", null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,t1), generador);
			:}
			| FALSE: f1 {:
				RESULT = new Expresion(generador.getOp().FALSE,"0", null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,f1), generador);
			:}
			| loc:l {:
					RESULT = l;
			:}
			| CADENA:c1 {:
				RESULT = new Expresion(null,c1.getLexeme(), null, null,null, null, null,
				 new Tipo(generador.getTipoVar().STRING,null,null,null,generador.getCategoria().VAR,0,null,0,7,null,c1), generador);
			:}
			| llamar_sub:sub {:
				//una expresion especial
				if (sub!=null) {
					InstruccionLlamarSub s = (InstruccionLlamarSub)sub;
					RESULT = new Expresion(generador.getLugarTemp(), new ArrayList(),null, sub, generador);
				}	

			:}
		;

expr_log ::= expr_log:ex1 OR:or expr_log2:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().OR,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			|expr_log2:l2 {:
				RESULT = l2;
			:}
		;	
expr_log2 ::= expr_log2:ex1 AND:and expr_log3:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().AND,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			|expr_log3:l3 {:
				RESULT = l3;
			:}
		;
expr_log3 ::= expr_log3:ex1 IGUAL cond_rel:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().IGUAL,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			  | expr_log3:ex1 DISTINTO cond_rel:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().DISTINTO,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			  | cond_rel:r1 {:
				RESULT = r1;
			:}
		;

cond_rel ::= expr_dec:ex1 MENOR expr_dec:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			| expr_dec:ex1 MENOR_I expr_dec:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			| expr_dec:ex1 MAYOR_I expr_dec:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			| expr_dec:ex1 MAYOR expr_dec:ex2 {:
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			:}
			| expr_dec:ex1 {:
				RESULT = ex1;
			:}
		;

arreglo ::= ARRAY:a1 tipo_dim:tip vars1:vs1 {:
				tip.getTipo().setCategoria(generador.getCategoria().ARRAY); //tipo array de tipo t
				RESULT = new InstruccionArray(tip, vs1, generador);		

		:}
;


vars1 ::= vars1:vs1 COMA:c1 IDENTIFICADOR:e1 {:
				vs1.add(new Id(e1,false));
             	RESULT = vs1;	
		:}
			| IDENTIFICADOR:e1 {:
				List<Id> vars = new ArrayList<>();
              	vars.add(new Id(e1,false));
              	RESULT = vars;
		:}
;

loc ::= IDENTIFICADOR:e1 dimensiones:dim {: //para asignacion de arrays n dim deberia retornar una lista de exp correspon->dimens
			//l.add(ins);
			//ex1.setIsPosArray(true);  //es una posicion de array
			//ex1.setIdArray(new Id(e1,false));
            //RESULT = ex1;
			/*Array de n dimensiones*/
			RESULT = new Expresion(e1.getLexeme(), true, new Id(e1,false), dim, generador);
		:}
		|IDENTIFICADOR:e1 {:
			//RESULT = new Id(e1.getLexeme);  no se asigna tipo todavia
			RESULT = new Expresion(e1.getLexeme(), new Id(e1,false),generador);
		:} 
	;
tipo_dim ::= tipo:t dimensiones:dims {:
				//un tipo y una ex1 dimension 1
				RESULT = new TipoDim(t, dims); //en lugar de null una lista de espresiones
		:}
;

dimensiones ::= dimensiones:dims unaDimension:dim {:
				dims.add(dim);
                RESULT = dims;
			:}
				|unaDimension:dim {:
					List<Expresion> expsDim = new ArrayList<>();
                	expsDim.add(dim);
                	RESULT = expsDim;
			:}
;

unaDimension ::= CORCH_A:ca expr_dec:ex CORCH_C:cc {:
				  RESULT = ex;	
	:}
						
;


sentencia ::=  IF:i PARENT_A:pa  expr_log:ex PARENT_C:cc instrucciones_bloque:list {:

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null, null, generador);
				:}
				| IF:i PARENT_A:pa  expr_log:ex PARENT_C:cc instrucciones_bloque:list ELSE:els instrucciones_bloque:list2 {:

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null,
								 new InstruccionElse(list2, generador), generador);
				:}
				| IF:i PARENT_A:pa  expr_log:ex PARENT_C:cc instrucciones_bloque:list elsifs:elsifs {: 
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			null, generador);
				:}
				| IF:i PARENT_A:pa  expr_log:ex PARENT_C:cc instrucciones_bloque:list elsifs:elsifs ELSE:els instrucciones_bloque:list2 {:
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			new InstruccionElse(list2, generador), generador);

				:}
;

elsifs ::= elsifs:els elsif:el {:
				els.add(el);
                RESULT = els;
			:}
			| elsif:el {:
				List<InstruccionIf> instructions = new ArrayList<>();
                instructions.add(el);
                RESULT = instructions;
			:}
;
elsif ::= ELSIF:els  PARENT_A:pa  expr_log:ex PARENT_C:cc instrucciones_bloque:list {:
			RESULT = new InstruccionIf(ex, list, generador);
		:}

;

sent_while ::= WHILE:wh PARENT_A:pa expr_log:ex PARENT_C:pc instrucciones_bloque:list {:
				//validaciones semanticas
				RESULT = new InstruccionWhile(ex,list,generador);

	:}
;
sent_do_while ::= DO:dow instrucciones_bloque:list WHILE:wh PARENT_A:pa expr_log:ex PARENT_C:pc {:
				//validaciones semanticas
				RESULT = new InstruccionDo(list, ex, generador);

	:}
;
sent_for ::= FOR:fr PARENT_A:pa asig:as DOS_PT:pt1 expr_log:ex DOS_PT:pt2 incremento:in PARENT_C:pc instrucciones_bloque:list {:
				//val semanticas
				RESULT = new InstruccionFor((InstruccionAsig)as, ex, in, list, generador);

			:}
				//|FOR:for PARENT_A:pa asig:as DOS_PT:pt1 expr_log:ex DOS_PT:pt2 incremento:in PARENT_C:pc instrucciones:list
		;
incremento ::= MAS:m1 MAS:m2 {:

				:}
				| MENOS:m1 MENOS:m2 {:

				:}
				| MAS:m1 expr_dec:ex {:
					RESULT = new Incremento(generador.getOp().MAS, ex);

				:}
				| MENOS:m1 expr_dec:ex {:
					RESULT = new Incremento(generador.getOp().MENOS, ex);
				:}
;
escritura ::= PRINT:p CORCH_A:ca impres:im CORCH_C:cc {:
					//val semanticas
					RESULT = new InstruccionPrint(false, im, generador);
			:}
				| PRINTLN:p CORCH_A:ca impres:im CORCH_C:cc {:
					//val semanticas
					RESULT = new InstruccionPrint(true, im, generador);
			:}
;
impres ::= impres:im COMA:c1 expr_log:ex {:
				im.add(ex);
                RESULT = im;
			:}
			| expr_log:ex {:
				List<Expresion> exps = new ArrayList<>();
                exps.add(ex);
                RESULT = exps;

			:}
;
/*para bloques de codigo en estructutas de control y ciclos*/
instrucciones_bloque ::= CORCH_A:ca instrucciones:list CORCH_C:cc {:
                    		RESULT = list;
					:}
						| instruccion:ins {:
							List<Instruccion> instructions = new ArrayList<>();
                    		instructions.add(ins);
                    		RESULT = instructions;

					:}
						| CORCH_A:ca CORCH_C:cc {:
							RESULT = null;

					:}//ninguna instruccion 
					;

/*para instrucciones de subprogramas*/
instrucciones_subprograma ::= CORCH_A:ca n_declaraciones:decs PORCENT:ps  instrucciones:list CORCH_C:cc {:

                    				RESULT = new InstruccionSub(null,null,null,decs,list,symTable,generador);
							:}
							| CORCH_A:ca PORCENT:ps  instrucciones:list CORCH_C:cc {:
                    				RESULT = new InstruccionSub(null,null,null,null,list,symTable,generador);
							:}
							| CORCH_A:ca n_declaraciones:decs PORCENT:ps CORCH_C:cc {:
                    				RESULT = new InstruccionSub(null,null,null,decs,null,symTable,generador);
							:}
							| CORCH_A:ca PORCENT:ps  CORCH_C:cc {:
									RESULT = new InstruccionSub(null,null,null,null,null,symTable,generador);
							:}//ninguna declaracion e instruccion
					;

/*para instrucciones del main*/
instrucciones_main ::= CORCH_A:ca instrucciones:list CORCH_C:cc {:
                    		RESULT = list;
					:}
					| CORCH_A:ca CORCH_C:cc {:
							RESULT = null;

					:}//ninguna instruccion 
					;