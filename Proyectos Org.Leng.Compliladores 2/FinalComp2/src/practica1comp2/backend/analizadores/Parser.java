
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package practica1comp2.backend.analizadores;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import javax.swing.JTextArea;
import practica1comp2.backend.ast.*;
import practica1comp2.backend.expresiones.Expresion;
import practica1comp2.backend.instrucciones.*;
import practica1comp2.backend.analizadores.simbolos.*;
import practica1comp2.backend.generadores.GeneradorCod;
import practica1comp2.backend.generadores.EtiqCondicion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\040\006\000\002\040" +
    "\005\000\002\040\005\000\002\040\004\000\002\052\004" +
    "\000\002\052\003\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\043\004\000\002\043\003\000\002" +
    "\044\010\000\002\044\007\000\002\045\005\000\002\045" +
    "\003\000\002\046\004\000\002\047\005\000\002\047\003" +
    "\000\002\050\003\000\002\053\006\000\002\002\004\000" +
    "\002\002\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\011\006\000\002\011\005\000\002\012\004\000\002" +
    "\013\006\000\002\013\006\000\002\005\004\000\002\021" +
    "\005\000\002\021\003\000\002\023\003\000\002\023\003" +
    "\000\002\025\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\003\000\002\031\004\000\002\031\004\000\002" +
    "\031\003\000\002\030\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\032\005\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\006\005\000\002\022\005\000" +
    "\002\022\003\000\002\041\004\000\002\041\003\000\002" +
    "\042\004\000\002\056\004\000\002\056\003\000\002\057" +
    "\005\000\002\007\007\000\002\007\011\000\002\007\010" +
    "\000\002\007\012\000\002\014\004\000\002\014\003\000" +
    "\002\015\007\000\002\016\007\000\002\017\010\000\002" +
    "\020\013\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\010\006\000\002\010\006" +
    "\000\002\037\005\000\002\037\003\000\002\003\005\000" +
    "\002\003\003\000\002\003\004\000\002\054\007\000\002" +
    "\054\006\000\002\054\006\000\002\054\005\000\002\055" +
    "\005\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\032\004\020\005\011\006\012\007\010\010" +
    "\005\011\023\012\031\013\021\014\027\046\014\051\025" +
    "\053\030\001\002\000\032\004\020\005\011\006\012\007" +
    "\010\010\005\011\023\012\031\013\021\014\027\046\354" +
    "\051\025\053\030\001\002\000\006\040\uffcf\051\uffcf\001" +
    "\002\000\026\004\020\005\011\006\012\007\010\010\005" +
    "\011\023\012\031\013\021\014\027\046\346\001\002\000" +
    "\004\051\317\001\002\000\006\040\uffd0\051\uffd0\001\002" +
    "\000\006\040\uffd2\051\uffd2\001\002\000\006\040\uffd1\051" +
    "\uffd1\001\002\000\004\002\316\001\002\000\004\052\145" +
    "\001\002\000\004\045\142\001\002\000\026\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\046\ufff6\001\002\000\004\043\141\001\002\000" +
    "\006\040\uffd3\051\uffd3\001\002\000\006\040\uffcc\051\uffcc" +
    "\001\002\000\004\043\140\001\002\000\006\040\uffce\051" +
    "\uffce\001\002\000\004\043\137\001\002\000\006\040\036" +
    "\045\uffa8\001\002\000\032\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\046\ufffb" +
    "\051\ufffb\053\ufffb\001\002\000\006\040\uffcb\051\uffcb\001" +
    "\002\000\024\004\020\005\011\006\012\007\010\010\005" +
    "\011\023\012\031\013\021\014\027\001\002\000\006\040" +
    "\uffcd\051\uffcd\001\002\000\004\051\133\001\002\000\004" +
    "\040\036\001\002\000\054\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\024\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\051\uffa5\001\002\000\006" +
    "\040\036\051\uffa7\001\002\000\024\017\041\023\052\026" +
    "\042\027\046\036\053\047\043\050\047\051\054\066\037" +
    "\001\002\000\046\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\024\uffba\025\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\037\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\001\002\000\010\016\070\017\072\041\132\001\002" +
    "\000\024\017\041\023\052\026\042\027\046\036\053\047" +
    "\043\050\047\051\054\066\037\001\002\000\046\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\001\002\000\046\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\001\002\000\046" +
    "\016\uffc8\017\uffc8\020\104\021\103\022\102\024\uffc8\025" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\037\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000" +
    "\046\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb" +
    "\025\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\001\002" +
    "\000\046\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024" +
    "\uffbc\025\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\037\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\001" +
    "\002\000\046\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\025\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\001\002\000\046\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\001\002\000\046\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\001\002\000\024\017\041\023\052\026\042\027" +
    "\046\036\053\047\043\050\047\051\054\066\037\001\002" +
    "\000\024\017\041\023\052\026\042\027\046\036\053\047" +
    "\043\050\047\051\054\066\037\001\002\000\054\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\057" +
    "\037\uffa8\040\036\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\001\002\000\046\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\001\002\000\052\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\024\uffa9\025\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\036\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\001\002\000\026\017\041" +
    "\023\052\026\042\027\046\036\053\037\066\047\043\050" +
    "\047\051\054\066\037\001\002\000\024\024\uffb2\025\uffb2" +
    "\034\uffb2\035\uffb2\037\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\001\002\000\006\037\123\042\122\001\002\000\024" +
    "\024\uffb5\025\uffb5\034\116\035\117\037\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\001\002\000\020\024\114\025\uffb7" +
    "\037\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\001\002\000" +
    "\006\037\uffef\042\uffef\001\002\000\010\025\112\037\uffee" +
    "\042\uffee\001\002\000\046\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\037\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\001\002\000\040\016\070\017\072\024\uffad" +
    "\025\uffad\030\075\031\073\032\074\033\071\034\uffad\035" +
    "\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad\001\002" +
    "\000\024\017\041\023\052\026\042\027\046\036\053\047" +
    "\043\050\047\051\054\066\037\001\002\000\024\017\041" +
    "\023\052\026\042\027\046\036\053\047\043\050\047\051" +
    "\054\066\037\001\002\000\024\017\041\023\052\026\042" +
    "\027\046\036\053\047\043\050\047\051\054\066\037\001" +
    "\002\000\024\017\041\023\052\026\042\027\046\036\053" +
    "\047\043\050\047\051\054\066\037\001\002\000\024\017" +
    "\041\023\052\026\042\027\046\036\053\047\043\050\047" +
    "\051\054\066\037\001\002\000\024\017\041\023\052\026" +
    "\042\027\046\036\053\047\043\050\047\051\054\066\037" +
    "\001\002\000\030\016\070\017\072\024\uffae\025\uffae\034" +
    "\uffae\035\uffae\037\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\001\002\000\030\016\070\017\072\024\uffaf\025\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\001\002\000\030\016\070\017\072\024\uffb1\025\uffb1\034" +
    "\uffb1\035\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\001\002\000\046\016\uffc9\017\uffc9\020\104\021\103\022" +
    "\102\024\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\001\002\000\024\017\041\023\052\026\042\027\046" +
    "\036\053\047\043\050\047\051\054\066\037\001\002\000" +
    "\024\017\041\023\052\026\042\027\046\036\053\047\043" +
    "\050\047\051\054\066\037\001\002\000\024\017\041\023" +
    "\052\026\042\027\046\036\053\047\043\050\047\051\054" +
    "\066\037\001\002\000\046\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\037\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\046\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\001\002\000\046\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\001\002\000\030\016\070\017\072" +
    "\024\uffb0\025\uffb0\034\uffb0\035\uffb0\037\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\001\002\000\046\016\uffca\017\uffca" +
    "\020\104\021\103\022\102\024\uffca\025\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\001\002\000\024\017\041\023" +
    "\052\026\042\027\046\036\053\047\043\050\047\051\054" +
    "\066\037\001\002\000\020\024\114\025\uffb8\037\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\001\002\000\024\017\041" +
    "\023\052\026\042\027\046\036\053\047\043\050\047\051" +
    "\054\066\037\001\002\000\024\024\uffb6\025\uffb6\034\116" +
    "\035\117\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\001" +
    "\002\000\024\017\041\023\052\026\042\027\046\036\053" +
    "\047\043\050\047\051\054\066\037\001\002\000\024\017" +
    "\041\023\052\026\042\027\046\036\053\047\043\050\047" +
    "\051\054\066\037\001\002\000\024\024\uffb3\025\uffb3\034" +
    "\uffb3\035\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\001\002\000\024\024\uffb4\025\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\001\002\000\024" +
    "\017\041\023\052\026\042\027\046\036\053\047\043\050" +
    "\047\051\054\066\037\001\002\000\046\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\024\uffde\025\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\001\002\000\006\037\ufff0\042" +
    "\ufff0\001\002\000\054\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\025\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\051\uffa6\001\002\000\006\025" +
    "\112\037\127\001\002\000\046\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\024\uffc0\025\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\037\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\001\002\000\046\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\001\002\000\046\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\001\002\000\054\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\051\uffa4" +
    "\001\002\000\006\042\uffaa\043\uffaa\001\002\000\006\042" +
    "\135\043\uffac\001\002\000\004\051\136\001\002\000\006" +
    "\042\uffab\043\uffab\001\002\000\032\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\046\ufff8\051\ufff8\053\ufff8\001\002\000\032\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\046\ufff9\051\ufff9\053\ufff9\001\002\000\032\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\046\ufffa\051\ufffa\053\ufffa\001\002\000" +
    "\024\017\041\023\052\026\042\027\046\036\053\047\043" +
    "\050\047\051\054\066\037\001\002\000\012\025\112\042" +
    "\uffd4\043\uffd4\044\uffd4\001\002\000\004\002\ufffd\001\002" +
    "\000\004\036\146\001\002\000\004\037\147\001\002\000" +
    "\004\040\150\001\002\000\056\003\165\004\020\005\011" +
    "\006\012\007\010\010\005\011\023\012\031\013\021\014" +
    "\027\015\164\041\175\051\054\053\030\054\161\057\170" +
    "\060\200\061\157\062\177\063\156\064\174\065\201\001" +
    "\002\000\004\002\uffed\001\002\000\062\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\041\uffe3\051\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\001\002\000\004\043\315\001\002" +
    "\000\056\003\165\004\020\005\011\006\012\007\010\010" +
    "\005\011\023\012\031\013\021\014\027\015\164\041\314" +
    "\051\054\053\030\054\161\057\170\060\200\061\157\062" +
    "\177\063\156\064\174\065\201\001\002\000\004\043\313" +
    "\001\002\000\004\040\310\001\002\000\004\036\272\001" +
    "\002\000\062\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\041" +
    "\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\001" +
    "\002\000\004\036\252\001\002\000\056\003\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\041\uffeb\051\uffeb\053\uffeb\054\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\001\002\000\062\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\041\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\001\002\000\024\017\041\023\052\026\042\027\046" +
    "\036\053\047\043\050\047\051\054\066\037\001\002\000" +
    "\062\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\041\uffdf\051" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\001\002\000" +
    "\004\043\250\001\002\000\004\051\243\001\002\000\004" +
    "\036\236\001\002\000\062\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\041\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\001\002\000\004\043\235\001\002\000\004\043" +
    "\234\001\002\000\004\040\231\001\002\000\004\002\uff89" +
    "\001\002\000\004\043\230\001\002\000\004\040\222\001" +
    "\002\000\056\003\165\004\020\005\011\006\012\007\010" +
    "\010\005\011\023\012\031\013\021\014\027\015\164\040" +
    "\211\051\054\053\030\054\161\057\170\060\200\061\157" +
    "\062\177\063\156\064\174\065\201\001\002\000\004\040" +
    "\204\001\002\000\004\043\203\001\002\000\062\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\041\uffe9\051\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\001\002\000\004\051\205" +
    "\001\002\000\004\041\206\001\002\000\004\043\uffda\001" +
    "\002\000\062\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\041" +
    "\uff90\051\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\001" +
    "\002\000\004\057\216\001\002\000\056\003\165\004\020" +
    "\005\011\006\012\007\010\010\005\011\023\012\031\013" +
    "\021\014\027\015\164\041\213\051\054\053\030\054\161" +
    "\057\170\060\200\061\157\062\177\063\156\064\174\065" +
    "\201\001\002\000\056\003\165\004\020\005\011\006\012" +
    "\007\010\010\005\011\023\012\031\013\021\014\027\015" +
    "\164\041\215\051\054\053\030\054\161\057\170\060\200" +
    "\061\157\062\177\063\156\064\174\065\201\001\002\000" +
    "\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f" +
    "\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\041\uff8f\051" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\001\002\000" +
    "\056\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\041\uffec\051" +
    "\uffec\053\uffec\054\uffec\057\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\065\uffec\001\002\000\062\003\uff91\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\041\uff91\051\uff91\053\uff91\054" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\001\002\000\004\036\217\001" +
    "\002\000\024\017\041\023\052\026\042\027\046\036\053" +
    "\047\043\050\047\051\054\066\037\001\002\000\006\025" +
    "\112\037\221\001\002\000\062\003\uff9b\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\041\uff9b\051\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\001\002\000\024\017\041\023\052\026\042" +
    "\027\046\036\053\047\043\050\047\051\054\066\037\001" +
    "\002\000\010\025\112\041\uff92\042\uff92\001\002\000\006" +
    "\041\226\042\225\001\002\000\024\017\041\023\052\026" +
    "\042\027\046\036\053\047\043\050\047\051\054\066\037" +
    "\001\002\000\004\043\uff95\001\002\000\010\025\112\041" +
    "\uff93\042\uff93\001\002\000\062\003\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\041\uffe1\051\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\001\002\000\004\051\232\001\002\000\004" +
    "\041\233\001\002\000\004\043\uffdb\001\002\000\062\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\041\uffea\051\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\065\uffea\001\002\000\062\003" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\041\uffe0\051\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\001\002\000\024\017" +
    "\041\023\052\026\042\027\046\036\053\047\043\050\047" +
    "\051\054\066\037\001\002\000\006\025\112\037\240\001" +
    "\002\000\056\003\165\004\020\005\011\006\012\007\010" +
    "\010\005\011\023\012\031\013\021\014\027\015\164\040" +
    "\211\051\054\053\030\054\161\057\170\060\200\061\157" +
    "\062\177\063\156\064\174\065\201\001\002\000\062\003" +
    "\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\041\uff9c\051\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\001\002\000\006\042" +
    "\uffd7\043\uffd7\001\002\000\012\040\036\042\uffd5\043\uffd5" +
    "\045\uffa8\001\002\000\006\042\uffd6\043\uffd6\001\002\000" +
    "\006\042\246\043\uffd9\001\002\000\004\051\243\001\002" +
    "\000\006\042\uffd8\043\uffd8\001\002\000\062\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\041\uffe2\051\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\001\002\000\006\025\112\043" +
    "\uffdc\001\002\000\024\017\041\023\052\026\042\027\046" +
    "\036\053\047\043\050\047\051\054\066\037\001\002\000" +
    "\006\025\112\037\254\001\002\000\056\003\165\004\020" +
    "\005\011\006\012\007\010\010\005\011\023\012\031\013" +
    "\021\014\027\015\164\040\211\051\054\053\030\054\161" +
    "\057\170\060\200\061\157\062\177\063\156\064\174\065" +
    "\201\001\002\000\062\003\uffa3\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\041\uffa3\051\uffa3\053\uffa3\054\uffa3\055\256\056\261" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\001\002\000\056\003\165\004\020\005\011\006\012" +
    "\007\010\010\005\011\023\012\031\013\021\014\027\015" +
    "\164\040\211\051\054\053\030\054\161\057\170\060\200" +
    "\061\157\062\177\063\156\064\174\065\201\001\002\000" +
    "\062\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\041\uffa1\051" +
    "\uffa1\053\uffa1\054\uffa1\055\266\056\261\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\001\002\000" +
    "\062\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\041\uff9e\051" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\001\002\000" +
    "\004\036\262\001\002\000\024\017\041\023\052\026\042" +
    "\027\046\036\053\047\043\050\047\051\054\066\037\001" +
    "\002\000\006\025\112\037\264\001\002\000\056\003\165" +
    "\004\020\005\011\006\012\007\010\010\005\011\023\012" +
    "\031\013\021\014\027\015\164\040\211\051\054\053\030" +
    "\054\161\057\170\060\200\061\157\062\177\063\156\064" +
    "\174\065\201\001\002\000\062\003\uff9d\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\041\uff9d\051\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\001\002\000\056\003\165\004\020\005\011" +
    "\006\012\007\010\010\005\011\023\012\031\013\021\014" +
    "\027\015\164\040\211\051\054\053\030\054\161\057\170" +
    "\060\200\061\157\062\177\063\156\064\174\065\201\001" +
    "\002\000\062\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\041" +
    "\uff9f\051\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\001" +
    "\002\000\062\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\041" +
    "\uffa0\051\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\001" +
    "\002\000\062\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\041" +
    "\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\001" +
    "\002\000\004\051\025\001\002\000\004\044\274\001\002" +
    "\000\024\017\041\023\052\026\042\027\046\036\053\047" +
    "\043\050\047\051\054\066\037\001\002\000\006\025\112" +
    "\044\276\001\002\000\006\016\277\017\300\001\002\000" +
    "\026\016\307\017\041\023\052\026\042\027\046\036\053" +
    "\047\043\050\047\051\054\066\037\001\002\000\024\017" +
    "\305\023\052\026\042\027\046\036\053\047\043\050\047" +
    "\051\054\066\037\001\002\000\004\037\302\001\002\000" +
    "\056\003\165\004\020\005\011\006\012\007\010\010\005" +
    "\011\023\012\031\013\021\014\027\015\164\040\211\051" +
    "\054\053\030\054\161\057\170\060\200\061\157\062\177" +
    "\063\156\064\174\065\201\001\002\000\062\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\041\uff9a\051\uff9a\053\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\001\002\000\010\016\070\017" +
    "\072\037\uff96\001\002\000\026\017\041\023\052\026\042" +
    "\027\046\036\053\037\uff98\047\043\050\047\051\054\066" +
    "\037\001\002\000\010\016\070\017\072\037\uff97\001\002" +
    "\000\004\037\uff99\001\002\000\024\017\041\023\052\026" +
    "\042\027\046\036\053\047\043\050\047\051\054\066\037" +
    "\001\002\000\006\041\312\042\225\001\002\000\004\043" +
    "\uff94\001\002\000\062\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\041\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\001\002\000\004\002\uff8a\001\002\000\062\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\041\uffe8\051\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\001\002\000\004\002\001" +
    "\001\002\000\014\036\320\040\036\042\uffd5\043\uffd5\045" +
    "\uffa8\001\002\000\026\004\020\005\011\006\012\007\010" +
    "\010\005\011\023\012\031\013\021\014\027\037\323\001" +
    "\002\000\004\051\345\001\002\000\006\037\ufff2\042\ufff2" +
    "\001\002\000\004\040\330\001\002\000\006\037\326\042" +
    "\325\001\002\000\024\004\020\005\011\006\012\007\010" +
    "\010\005\011\023\012\031\013\021\014\027\001\002\000" +
    "\004\040\330\001\002\000\026\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\046" +
    "\ufff5\001\002\000\032\004\020\005\011\006\012\007\010" +
    "\010\005\011\023\012\031\013\021\014\027\046\332\051" +
    "\025\053\030\001\002\000\032\004\020\005\011\006\012" +
    "\007\010\010\005\011\023\012\031\013\021\014\027\046" +
    "\336\051\025\053\030\001\002\000\056\003\165\004\020" +
    "\005\011\006\012\007\010\010\005\011\023\012\031\013" +
    "\021\014\027\015\164\041\334\051\054\053\030\054\161" +
    "\057\170\060\200\061\157\062\177\063\156\064\174\065" +
    "\201\001\002\000\056\003\165\004\020\005\011\006\012" +
    "\007\010\010\005\011\023\012\031\013\021\014\027\015" +
    "\164\041\335\051\054\053\030\054\161\057\170\060\200" +
    "\061\157\062\177\063\156\064\174\065\201\001\002\000" +
    "\026\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\046\uff8b\001\002\000\026\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\046\uff8d\001\002\000\056\003\165\004" +
    "\020\005\011\006\012\007\010\010\005\011\023\012\031" +
    "\013\021\014\027\015\164\041\341\051\054\053\030\054" +
    "\161\057\170\060\200\061\157\062\177\063\156\064\174" +
    "\065\201\001\002\000\032\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\046\ufffc" +
    "\051\ufffc\053\ufffc\001\002\000\056\003\165\004\020\005" +
    "\011\006\012\007\010\010\005\011\023\012\031\013\021" +
    "\014\027\015\164\041\342\051\054\053\030\054\161\057" +
    "\170\060\200\061\157\062\177\063\156\064\174\065\201" +
    "\001\002\000\026\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\046\uff8c\001\002" +
    "\000\026\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\046\uff8e\001\002\000\006" +
    "\037\ufff3\042\ufff3\001\002\000\026\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\046\ufff4\001\002\000\006\037\ufff1\042\ufff1\001\002\000" +
    "\004\052\145\001\002\000\026\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\046" +
    "\ufff7\001\002\000\004\051\351\001\002\000\004\036\320" +
    "\001\002\000\004\002\ufffe\001\002\000\026\004\020\005" +
    "\011\006\012\007\010\010\005\011\023\012\031\013\021" +
    "\014\027\046\356\001\002\000\004\052\145\001\002\000" +
    "\004\002\uffff\001\002\000\004\052\145\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\026\005\016\006\021\024\006\025\023\040" +
    "\012\041\014\043\005\044\015\051\025\052\003\001\001" +
    "\000\022\005\016\006\021\024\006\025\023\041\014\043" +
    "\352\044\015\051\336\001\001\000\002\001\001\000\006" +
    "\024\347\044\346\001\001\000\012\021\244\023\241\025" +
    "\243\041\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\055\057\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\032\042\031\001\001\000\002\001\001\000\004\022\133" +
    "\001\001\000\006\056\034\057\033\001\001\000\002\001" +
    "\001\000\004\057\124\001\001\000\016\011\054\026\037" +
    "\027\043\030\047\031\050\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\054\030\047\031\130" +
    "\041\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\054\030\047\031\127\041\044\001\001\000\026\011\054" +
    "\026\066\027\043\030\047\031\050\032\125\033\062\034" +
    "\061\035\057\041\044\001\001\000\006\056\055\057\033" +
    "\001\001\000\002\001\001\000\004\057\124\001\001\000" +
    "\032\011\054\026\066\027\043\030\047\031\050\032\064" +
    "\033\062\034\061\035\057\041\044\047\060\050\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\054\027\110" +
    "\030\047\031\050\041\044\001\001\000\016\011\054\026" +
    "\107\027\043\030\047\031\050\041\044\001\001\000\014" +
    "\011\054\027\100\030\047\031\050\041\044\001\001\000" +
    "\016\011\054\026\077\027\043\030\047\031\050\041\044" +
    "\001\001\000\016\011\054\026\076\027\043\030\047\031" +
    "\050\041\044\001\001\000\016\011\054\026\075\027\043" +
    "\030\047\031\050\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\054\030\047\031\106\041\044\001\001\000\012\011" +
    "\054\030\047\031\105\041\044\001\001\000\012\011\054" +
    "\030\047\031\104\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\054\026\066\027\043\030\047\031" +
    "\050\033\112\034\061\035\057\041\044\001\001\000\002" +
    "\001\001\000\022\011\054\026\066\027\043\030\047\031" +
    "\050\034\114\035\057\041\044\001\001\000\002\001\001" +
    "\000\020\011\054\026\066\027\043\030\047\031\050\035" +
    "\120\041\044\001\001\000\020\011\054\026\066\027\043" +
    "\030\047\031\050\035\117\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\054\026\066\027\043" +
    "\030\047\031\050\032\064\033\062\034\061\035\057\041" +
    "\044\050\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\054\026\066\027\043\030\047\031\050\032" +
    "\142\033\062\034\061\035\057\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\150\001\001\000\040\002\153\004\161" +
    "\005\172\006\201\007\170\010\154\011\165\012\175\013" +
    "\171\016\162\017\157\020\151\024\166\025\152\041\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\213\005\172\006\201\007\170\010\154" +
    "\011\165\012\175\013\171\016\162\017\157\020\151\024" +
    "\166\025\152\041\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\054" +
    "\026\066\027\043\030\047\031\050\032\250\033\062\034" +
    "\061\035\057\041\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\244\023\241\025\243\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\207\004\206" +
    "\005\172\006\201\007\170\010\154\011\165\012\175\013" +
    "\171\016\162\017\157\020\151\024\166\025\152\041\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\211\004" +
    "\161\005\172\006\201\007\170\010\154\011\165\012\175" +
    "\013\171\016\162\017\157\020\151\024\166\025\152\041" +
    "\014\001\001\000\036\004\213\005\172\006\201\007\170" +
    "\010\154\011\165\012\175\013\171\016\162\017\157\020" +
    "\151\024\166\025\152\041\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\054\026\066\027\043\030\047\031\050\032\217" +
    "\033\062\034\061\035\057\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\054\026\066\027\043" +
    "\030\047\031\050\032\222\033\062\034\061\035\057\037" +
    "\223\041\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\054\026\066\027\043\030\047\031\050\032" +
    "\226\033\062\034\061\035\057\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\054\026\066\027\043\030" +
    "\047\031\050\032\236\033\062\034\061\035\057\041\044" +
    "\001\001\000\002\001\001\000\040\003\240\004\206\005" +
    "\172\006\201\007\170\010\154\011\165\012\175\013\171" +
    "\016\162\017\157\020\151\024\166\025\152\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\056\055" +
    "\057\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\246\025\243\041\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\054\026" +
    "\066\027\043\030\047\031\050\032\252\033\062\034\061" +
    "\035\057\041\044\001\001\000\002\001\001\000\040\003" +
    "\254\004\206\005\172\006\201\007\170\010\154\011\165" +
    "\012\175\013\171\016\162\017\157\020\151\024\166\025" +
    "\152\041\014\001\001\000\006\014\256\015\257\001\001" +
    "\000\040\003\270\004\206\005\172\006\201\007\170\010" +
    "\154\011\165\012\175\013\171\016\162\017\157\020\151" +
    "\024\166\025\152\041\014\001\001\000\004\015\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\054" +
    "\026\066\027\043\030\047\031\050\032\262\033\062\034" +
    "\061\035\057\041\044\001\001\000\002\001\001\000\040" +
    "\003\264\004\206\005\172\006\201\007\170\010\154\011" +
    "\165\012\175\013\171\016\162\017\157\020\151\024\166" +
    "\025\152\041\014\001\001\000\002\001\001\000\040\003" +
    "\267\004\206\005\172\006\201\007\170\010\154\011\165" +
    "\012\175\013\171\016\162\017\157\020\151\024\166\025" +
    "\152\041\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\272\041\014\001\001\000" +
    "\002\001\001\000\026\011\054\026\066\027\043\030\047" +
    "\031\050\032\274\033\062\034\061\035\057\041\044\001" +
    "\001\000\002\001\001\000\004\036\300\001\001\000\016" +
    "\011\054\026\305\027\043\030\047\031\050\041\044\001" +
    "\001\000\016\011\054\026\303\027\043\030\047\031\050" +
    "\041\044\001\001\000\002\001\001\000\040\003\302\004" +
    "\206\005\172\006\201\007\170\010\154\011\165\012\175" +
    "\013\171\016\162\017\157\020\151\024\166\025\152\041" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\054\030\047\031\130\041\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\054\026\066\027\043" +
    "\030\047\031\050\032\222\033\062\034\061\035\057\037" +
    "\310\041\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\055\057\033\001\001\000\010" +
    "\024\320\045\323\046\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\343\001\001\000\002\001\001" +
    "\000\006\024\320\046\342\001\001\000\004\054\326\001" +
    "\001\000\002\001\001\000\020\005\016\006\021\024\166" +
    "\025\023\041\014\051\025\052\330\001\001\000\016\005" +
    "\016\006\021\024\166\025\023\041\014\051\336\001\001" +
    "\000\040\002\332\004\161\005\172\006\201\007\170\010" +
    "\154\011\165\012\175\013\171\016\162\017\157\020\151" +
    "\024\166\025\152\041\014\001\001\000\036\004\213\005" +
    "\172\006\201\007\170\010\154\011\165\012\175\013\171" +
    "\016\162\017\157\020\151\024\166\025\152\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\337" +
    "\004\161\005\172\006\201\007\170\010\154\011\165\012" +
    "\175\013\171\016\162\017\157\020\151\024\166\025\152" +
    "\041\014\001\001\000\002\001\001\000\036\004\213\005" +
    "\172\006\201\007\170\010\154\011\165\012\175\013\171" +
    "\016\162\017\157\020\151\024\166\025\152\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\347\044\346\001\001\000" +
    "\004\053\354\001\001\000\002\001\001\000\004\053\356" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Lexer myLexer;
    private List<String> errorsList;
    private GeneradorCod generador;
    private TablaSimbolos symTable;

	public Parser(Lexer lex, GeneradorCod generador, TablaSimbolos symTable) { //falta recibir algunas tabals sim/tip
		super(lex);
		this.myLexer = lex;
		this.errorsList = myLexer.getErrorsList();
		this.generador = generador;
        this.symTable = symTable;
	}
	/*Manejo de Errores*/
	@Override
        public void syntax_error(Symbol st) {
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura- linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
            
            System.out.println("Error Sintactico con el Token: " + token.getLexeme() + " este no pertenece a la estructura linea: " + token.getLine() + ", columna: " + token.getColumn());
                    errorsList.add(String.format("Error Sintactico con el Token: '%s' este no pertenece a la estructura linea: %d  columna: %d. Corrige e intenta de nuevo.", token.getLexeme(), token.getLine(), token.getColumn()));
        }

        public void addSemanticError(String msg) {
            this.errorsList.add(msg);
        }

	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ast start_val = (Ast)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= n_declaraciones subprogramas PORCENT mains 
            {
              Ast RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> des = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int subsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> subs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionMain mains = (InstruccionMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				/*Aqui hacemos la validacion semantica de las declaraciones porque sabemos que son globales*/
				/*validar que alguna de las variables que se estan declarando/asignando no hallan sido declaradas anteriormente*/
				if(symTable.verificarProgComplet(des, subs, mains)){
					RESULT = new Ast(des, subs, mains);	
				} else {
					RESULT = null;
				}	
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= n_declaraciones PORCENT mains 
            {
              Ast RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> des = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionMain mains = (InstruccionMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if(symTable.verificarProgComplet(des, null, mains)){
					RESULT = new Ast(des, null, mains);	
				} else {
					RESULT = null;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= subprogramas PORCENT mains 
            {
              Ast RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> subs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionMain mains = (InstruccionMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if(symTable.verificarProgComplet(null, subs, mains)){
					RESULT = new Ast(subs, mains, true);	
				} else {
					RESULT = null;
				}

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PORCENT mains 
            {
              Ast RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mainsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionMain mains = (InstruccionMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if(symTable.verificarProgComplet(null, null, mains)){
					RESULT = new Ast(mains);
				} else {
					RESULT = null;
				}

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // n_declaraciones ::= n_declaraciones declaraciones 
            {
              List<Instruccion> RESULT =null;
		int ndesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ndesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> ndes = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion des = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						ndes.add(des);
                    	RESULT = ndes;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_declaraciones",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // n_declaraciones ::= declaraciones 
            {
              List<Instruccion> RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion des = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						List<Instruccion> instructions = new ArrayList<>();
                    	instructions.add(des);
                    	RESULT = instructions;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_declaraciones",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion PT_COMA 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = dec;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= arreglo PT_COMA 
            {
              Instruccion RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion arr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = arr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= asig PT_COMA 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = as;
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // subprogramas ::= subprogramas subprograma 
            {
              List<Instruccion> RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> subs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sub = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						subs.add(sub);
                    	RESULT = subs;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // subprogramas ::= subprograma 
            {
              List<Instruccion> RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sub = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						List<Instruccion> instructions = new ArrayList<>();
                    	instructions.add(sub);
                    	RESULT = instructions;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprogramas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // subprograma ::= tipo IDENTIFICADOR PARENT_A parameters PARENT_C instrucciones_subprograma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Parametro> parameters = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSub sub = (InstruccionSub)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 			/*seteo de algunos parametros*/
								sub.setTipo(tipo);
								sub.setProcessName(id);
								sub.setParametros(parameters);
								RESULT = sub;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprograma",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // subprograma ::= tipo IDENTIFICADOR PARENT_A PARENT_C instrucciones_subprograma 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionSub sub = (InstruccionSub)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 			/*seteo de algunos parametros*/
								sub.setTipo(tipo);
								sub.setProcessName(id);
								RESULT = sub;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subprograma",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= parameters COMA parameter 
            {
              List<Parametro> RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Parametro> parameters = (List<Parametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro parameter = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parameters.add(parameter);
                   RESULT = parameters;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= parameter 
            {
              List<Parametro> RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro parameter = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    List<Parametro> parameters = new ArrayList<>();
                    parameters.add(parameter);
                    RESULT = parameters;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameter ::= tipo IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token parameter = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	RESULT = new Parametro(t, parameter);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters_llamada ::= parameters_llamada COMA parameter_llamada 
            {
              List<Expresion> RESULT =null;
		int parameters_llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parameters_llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expresion> parameters_llamada = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parameter_llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameter_llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion parameter_llamada = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parameters_llamada.add(parameter_llamada);
                   RESULT = parameters_llamada;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_llamada",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters_llamada ::= parameter_llamada 
            {
              List<Expresion> RESULT =null;
		int parameter_llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameter_llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion parameter_llamada = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    List<Expresion> parameters = new ArrayList<>();
                    parameters.add(parameter_llamada);
                    RESULT = parameters;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_llamada",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameter_llamada ::= expr_log 
            {
              Expresion RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion parameter = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	RESULT = parameter;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_llamada",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mains ::= MAIN PARENT_A PARENT_C instrucciones_main 
            {
              InstruccionMain RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new InstruccionMain(list,generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mains",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= instrucciones instruccion 
            {
              List<Instruccion> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
					list.add(ins);
                    RESULT = list;

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					List<Instruccion> instructions = new ArrayList<>();
                    instructions.add(ins);
                    RESULT = instructions;

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= declaracion PT_COMA 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //acepta declaraciones en cualquier parte por el main
					RESULT = dec;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= arreglo PT_COMA 
            {
              Instruccion RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion arr = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						RESULT = arr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= asig PT_COMA 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					/*Validacion semantica de asignacion se hace despues */
					RESULT = as;				
					
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= sentencia 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = s;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= escritura PT_COMA 
            {
              Instruccion RESULT =null;
		int escleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int escright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion esc = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = esc;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= sent_while 
            {
              Instruccion RESULT =null;
		int sent_whileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent_whileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sent_while = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = sent_while;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= sent_do_while 
            {
              Instruccion RESULT =null;
		int do_whileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int do_whileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion do_while = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = do_while;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= sent_for 
            {
              Instruccion RESULT =null;
		int sent_forleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent_forright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sent_for = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = sent_for;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= llamar_sub PT_COMA 
            {
              Instruccion RESULT =null;
		int llamar_subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamar_subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion llamar_sub = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = llamar_sub;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= retorno PT_COMA 
            {
              Instruccion RESULT =null;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion retorno = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = retorno;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= scans PT_COMA 
            {
              Instruccion RESULT =null;
		int scansleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scansright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion scans = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = scans;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
						System.out.println("--------Error instrucion invalida  " + eleft + eright); RESULT = new InstruccionVacia(generador);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // llamar_sub ::= IDENTIFICADOR PARENT_A parameters_llamada PARENT_C 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> parameters = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new InstruccionLlamarSub(id, parameters, generador);	
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamar_sub",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // llamar_sub ::= IDENTIFICADOR PARENT_A PARENT_C 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//sin parametros
					RESULT = new InstruccionLlamarSub(id, null, generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamar_sub",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // retorno ::= RETURN expr_log 
            {
              Instruccion RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ret = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion despues
			 		RESULT = new InstruccionRetorno(ret, exp,generador);
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // scans ::= SCANS CORCH_A IDENTIFICADOR CORCH_C 
            {
              Instruccion RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token ss = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion
			 		RESULT = new InstruccionScan(id, generador.getOp().SCANS, symTable ,generador);
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scans",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // scans ::= SCANN CORCH_A IDENTIFICADOR CORCH_C 
            {
              Instruccion RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token ss = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			 		//evaluar que el retorno sea del mismo tipo y si es de otra funcion
			 		RESULT = new InstruccionScan(id, generador.getOp().SCANN, symTable ,generador);
			 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scans",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= tipo vars 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> vs = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				/*No se hace la validacion semantica en este punto porque no se sabe si se esta declarando en un subprograma o global*/
				RESULT = new InstruccionDeclaracion(t,vs,generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vars ::= vars COMA var 
            {
              List<Id> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> vs = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id var = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			vs.add(var);
             RESULT = vs;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vars ::= var 
            {
              List<Id> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id v = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Id> vars = new ArrayList<>();
              	vars.add(v);
              	RESULT = vars;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var ::= asig 
            {
              Id RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			InstruccionAsig temp = (InstruccionAsig)as;
			RESULT = new Id(temp.getLoc().getId(),true, (InstruccionAsig)as,null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= IDENTIFICADOR 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		  	RESULT = new Id(id,false);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asig ::= loc ASIGN expr_log 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			//en este punto no puedo hacer la validacion semantica porque puede se este declarando y asignando la variable de una vez
			if (l.getIdent()!=null) {
				RESULT = new InstruccionAsig(new Id(new Token(l.getLugarTemp(),l.getIdent().getId().getLine(),l.getIdent().getId().getColumn()),true, l),ex, generador);
			} else {
				//para identificador de arreglos
				RESULT = new InstruccionAsig(new Id(l.getIdArray().getId(),true, l),ex, generador);
			}	

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asig",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = symTable.getTipo(e1);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_dec ::= expr_dec MAS termin 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().MAS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, null, generador);		
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_dec ::= expr_dec MENOS termin 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().MENOS,generador.getLugarTemp(), e1, t1,
						generador.unirQuad(e1.getList(),t1.getList()), null,
						 null, null, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_dec ::= termin 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            	RESULT = t1;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_dec",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termin ::= termin POR f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//RETORNA EL DE MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().POR,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // termin ::= termin DIV f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		//RETORNA MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().DIV,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termin ::= termin MOD f_unar 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion t1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		   		//RETORNA RESIDUO MAYOR JERARQUIA
				RESULT = new Expresion(generador.getOp().MOD,generador.getLugarTemp(), t1, f1,
						generador.unirQuad(t1.getList(),f1.getList()), null,
						 null, null, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termin ::= f_unar 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("termin",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // f_unar ::= NOT f_unar 
            {
              Expresion RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token no = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//comprobar que sea una expresion booleana la que se va negar
				RESULT = new Expresion(generador.getOp().NOT,null, f1, null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // f_unar ::= MENOS f_unar 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//comprobar que sea una exp aritmetica la que se va convertir en negativa
				RESULT = new Expresion(generador.getOp().MINUS,null, f1,null,f1.getList(), f1.getEtiq1(),
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // f_unar ::= factor 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion f1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = f1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_unar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= PARENT_A expr_log PARENT_C 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e3 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = e2;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= NUMERO_ENTERO 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//COMPROBAR RANGO PARA ASIGNAR SU TIPO DE ENTERO EN TEORIA TODOS SON LONG SI ESTAN DENTR DEL RANGO
				RESULT = new Expresion(null,""+e1.getLexeme(), null, null,null, null,
				 null, symTable.getComprob().tipoEntero(e1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= NUMERO_FLOTANTE 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//COMPROBAR QUE TRAIGA LA F PARA SER FLOAT SINO ES DOUBLE 
				RESULT = new Expresion(null,e1.getLexeme().substring(0, e1.getLexeme().length()-1), null, null,null, null,
				 null, symTable.getComprob().tipoDecimal(e1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= TRUE 
            {
              Expresion RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().TRUE,"1", null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,t1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= FALSE 
            {
              Expresion RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token f1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(generador.getOp().FALSE,"0", null, null,null, null,
				 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,f1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= loc 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = l;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= CADENA 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expresion(null,c1.getLexeme(), null, null,null, null, null,
				 new Tipo(generador.getTipoVar().STRING,null,null,null,generador.getCategoria().VAR,0,null,0,7,null,c1), generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= llamar_sub 
            {
              Expresion RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion sub = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//una expresion especial
				if (sub!=null) {
					InstruccionLlamarSub s = (InstruccionLlamarSub)sub;
					RESULT = new Expresion(generador.getLugarTemp(), new ArrayList(),null, sub, generador);
				}	

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_log ::= expr_log OR expr_log2 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token or = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().OR,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_log ::= expr_log2 
            {
              Expresion RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l2;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_log2 ::= expr_log2 AND expr_log3 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token and = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().AND,null, ex1, ex2,
					null, ex1.getEtiq1(), ex2.getEtiq1(), new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_log2 ::= expr_log3 
            {
              Expresion RESULT =null;
		int l3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l3 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = l3;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_log3 ::= expr_log3 IGUAL cond_rel 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().IGUAL,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_log3 ::= expr_log3 DISTINTO cond_rel 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().DISTINTO,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_log3 ::= cond_rel 
            {
              Expresion RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion r1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = r1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_log3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_rel ::= expr_dec MENOR expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond_rel ::= expr_dec MENOR_I expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MENOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cond_rel ::= expr_dec MAYOR_I expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR_I,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond_rel ::= expr_dec MAYOR expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//EVAL SEMANTICAS ANTES DE ENVIAR EL RESULT
				RESULT = new Expresion(generador.getOp().MAYOR,null, ex1, ex2,
					generador.unirQuad(ex1.getList(),ex2.getList()), new EtiqCondicion(generador.getNuevaEtiq(), generador.getNuevaEtiq()),
					 null, new Tipo(generador.getTipoVar().BOOLEAN,null,null,null,generador.getCategoria().VAR,0,null,0,1,null,null), generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cond_rel ::= expr_dec 
            {
              Expresion RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = ex1;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_rel",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arreglo ::= ARRAY tipo_dim vars1 
            {
              Instruccion RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDim tip = (TipoDim)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Id> vs1 = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				tip.getTipo().setCategoria(generador.getCategoria().ARRAY); //tipo array de tipo t
				RESULT = new InstruccionArray(tip, vs1, generador);		

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // vars1 ::= vars1 COMA IDENTIFICADOR 
            {
              List<Id> RESULT =null;
		int vs1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vs1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Id> vs1 = (List<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				vs1.add(new Id(e1,false));
             	RESULT = vs1;	
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vars1 ::= IDENTIFICADOR 
            {
              List<Id> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Id> vars = new ArrayList<>();
              	vars.add(new Id(e1,false));
              	RESULT = vars;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // loc ::= IDENTIFICADOR dimensiones 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expresion> dim = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //para asignacion de arrays n dim deberia retornar una lista de exp correspon->dimens
			//l.add(ins);
			//ex1.setIsPosArray(true);  //es una posicion de array
			//ex1.setIdArray(new Id(e1,false));
            //RESULT = ex1;
			/*Array de n dimensiones*/
			RESULT = new Expresion(e1.getLexeme(), true, new Id(e1,false), dim, generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // loc ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			//RESULT = new Id(e1.getLexeme);  no se asigna tipo todavia
			RESULT = new Expresion(e1.getLexeme(), new Id(e1,false),generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loc",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_dim ::= tipo dimensiones 
            {
              TipoDim RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expresion> dims = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//un tipo y una ex1 dimension 1
				RESULT = new TipoDim(t, dims); //en lugar de null una lista de espresiones
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dim",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dimensiones ::= dimensiones unaDimension 
            {
              List<Expresion> RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> dims = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion dim = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				dims.add(dim);
                RESULT = dims;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dimensiones ::= unaDimension 
            {
              List<Expresion> RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion dim = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					List<Expresion> expsDim = new ArrayList<>();
                	expsDim.add(dim);
                	RESULT = expsDim;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimensiones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unaDimension ::= CORCH_A expr_dec CORCH_C 
            {
              Expresion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				  RESULT = ex;	
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaDimension",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null, null, generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque ELSE instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), null,
								 new InstruccionElse(list2, generador), generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque elsifs 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elsifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<InstruccionIf> elsifs = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			null, generador);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia ::= IF PARENT_A expr_log PARENT_C instrucciones_bloque elsifs ELSE instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elsifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elsifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<InstruccionIf> elsifs = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list2 = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new InstruccionSentIf(new InstruccionIf(ex, list, generador), new InstruccionElsif(elsifs, generador),
					 			new InstruccionElse(list2, generador), generador);

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // elsifs ::= elsifs elsif 
            {
              List<InstruccionIf> RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<InstruccionIf> els = (List<InstruccionIf>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionIf el = (InstruccionIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				els.add(el);
                RESULT = els;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // elsifs ::= elsif 
            {
              List<InstruccionIf> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstruccionIf el = (InstruccionIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<InstruccionIf> instructions = new ArrayList<>();
                instructions.add(el);
                RESULT = instructions;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsifs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // elsif ::= ELSIF PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              InstruccionIf RESULT =null;
		int elsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new InstruccionIf(ex, list, generador);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sent_while ::= WHILE PARENT_A expr_log PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token wh = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//validaciones semanticas
				RESULT = new InstruccionWhile(ex,list,generador);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_while",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sent_do_while ::= DO instrucciones_bloque WHILE PARENT_A expr_log PARENT_C 
            {
              Instruccion RESULT =null;
		int dowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token dow = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int whleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token wh = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//validaciones semanticas
				RESULT = new InstruccionDo(list, ex, generador);

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sent_for ::= FOR PARENT_A asig DOS_PT expr_log DOS_PT incremento PARENT_C instrucciones_bloque 
            {
              Instruccion RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Token fr = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token pa = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token pt1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token pt2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Incremento in = (Incremento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//val semanticas
				RESULT = new InstruccionFor((InstruccionAsig)as, ex, in, list, generador);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // incremento ::= MAS MAS 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // incremento ::= MENOS MENOS 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token m2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // incremento ::= MAS expr_dec 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Incremento(generador.getOp().MAS, ex);

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // incremento ::= MENOS expr_dec 
            {
              Incremento RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					RESULT = new Incremento(generador.getOp().MENOS, ex);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("incremento",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // escritura ::= PRINT CORCH_A impres CORCH_C 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//val semanticas
					RESULT = new InstruccionPrint(false, im, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // escritura ::= PRINTLN CORCH_A impres CORCH_C 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					//val semanticas
					RESULT = new InstruccionPrint(true, im, generador);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // impres ::= impres COMA expr_log 
            {
              List<Expresion> RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expresion> im = (List<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token c1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				im.add(ex);
                RESULT = im;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impres",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // impres ::= expr_log 
            {
              List<Expresion> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Expresion> exps = new ArrayList<>();
                exps.add(ex);
                RESULT = exps;

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impres",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instrucciones_bloque ::= CORCH_A instrucciones CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    		RESULT = list;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instrucciones_bloque ::= instruccion 
            {
              List<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							List<Instruccion> instructions = new ArrayList<>();
                    		instructions.add(ins);
                    		RESULT = instructions;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instrucciones_bloque ::= CORCH_A CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = null;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instrucciones_subprograma ::= CORCH_A n_declaraciones PORCENT instrucciones CORCH_C 
            {
              InstruccionSub RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Instruccion> decs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                    				RESULT = new InstruccionSub(null,null,null,decs,list,symTable,generador);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_subprograma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instrucciones_subprograma ::= CORCH_A PORCENT instrucciones CORCH_C 
            {
              InstruccionSub RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    				RESULT = new InstruccionSub(null,null,null,null,list,symTable,generador);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_subprograma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instrucciones_subprograma ::= CORCH_A n_declaraciones PORCENT CORCH_C 
            {
              InstruccionSub RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> decs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    				RESULT = new InstruccionSub(null,null,null,decs,null,symTable,generador);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_subprograma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // instrucciones_subprograma ::= CORCH_A PORCENT CORCH_C 
            {
              InstruccionSub RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ps = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									RESULT = new InstruccionSub(null,null,null,null,null,symTable,generador);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_subprograma",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // instrucciones_main ::= CORCH_A instrucciones CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> list = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    		RESULT = list;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_main",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // instrucciones_main ::= CORCH_A CORCH_C 
            {
              List<Instruccion> RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ca = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token cc = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							RESULT = null;

					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones_main",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
