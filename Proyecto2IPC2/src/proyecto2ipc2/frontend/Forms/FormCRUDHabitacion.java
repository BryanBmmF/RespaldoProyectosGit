/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto2ipc2.frontend.Forms;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import proyecto2ipc2.backend.Hotel.ControladorHabitaciones;
import proyecto2ipc2.backend.Hotel.Habitacion;
import proyecto2ipc2.backend.Hotel.Hotel;
import proyecto2ipc2.backend.User.Logger;
import static proyecto2ipc2.database.OperadorEsquema.CAMPOS_OBLIGATORIOS;
import static proyecto2ipc2.database.OperadorEsquema.ERROR_CREACION;
import static proyecto2ipc2.database.OperadorEsquema.ERROR_ELIMINACION;
import static proyecto2ipc2.frontend.Forms.FormCRUDHotel.ELIMINAR_DATOS_HOTEL;
import static proyecto2ipc2.frontend.Forms.FormCRUDHotel.ELIMINAR_HOTEL;
import proyecto2ipc2.frontend.JFramePrincipal;

/**
 *
 * @author bryan
 */
public class FormCRUDHabitacion extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormCRUDHabitacion
     */
    private ControladorHabitaciones controladorHabitaciones;
    private Habitacion habitacion;
    private int idHabitacion;
    private JFramePrincipal frame;
    public FormCRUDHabitacion() {
        this.idHabitacion=0;
        initComponents();
        this.cargarComboHoteles();
        this.deshabilitarBotones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNivel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnRecuperar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        txtPrecio = new javax.swing.JFormattedTextField();
        txtEstado = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtCostoMant = new javax.swing.JFormattedTextField();
        comboHoteles = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtIdHotel = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbHabitaciones = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Gestion de Habitaciones");

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Numero:*");

        jLabel2.setText("Nivel del Edificio:*");

        jLabel3.setText("Tipo:  *");

        jLabel4.setText("Estado:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Habitacion_Junior", "Habitacion_Master", "Habitacion_De_Lujo" }));

        jLabel5.setText("Precio:* Q.");

        btnRecuperar.setText("Recuperar");
        btnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecuperarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar Info.");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        txtPrecio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        txtEstado.setEditable(false);

        btnLimpiar.setText("Limpiar Campos");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel7.setText("C/Mantenimiento:* Q.");

        comboHoteles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHotelesActionPerformed(evt);
            }
        });

        jLabel8.setText("Nombre del Hotel:");

        jLabel9.setText("ID:");

        txtIdHotel.setEditable(false);

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboHoteles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(txtNumero)))
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdHotel, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNivel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCostoMant)))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecuperar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtNivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtCostoMant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboHoteles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtIdHotel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegistrar)
                    .addComponent(btnRecuperar)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(btnLimpiar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(102, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tbHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.Habitacion", "Tipo", "Nivel", "Precio", "Estado", "Costo de Mant."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbHabitaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbHabitacionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbHabitaciones);

        jLabel6.setText("Listado de Habitaciones (Seleccione una)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
            if (txtNumero.getText().isEmpty()||txtPrecio.getText().isEmpty()||
                    txtNivel.getText().isEmpty()||txtCostoMant.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, CAMPOS_OBLIGATORIOS, ERROR_CREACION, JOptionPane.ERROR_MESSAGE);
            } else {
                        int opcion= JOptionPane.showConfirmDialog(this, "Esta seguro de Modificar estos datos?");
                        if (opcion==0) {
                                habitacion= new Habitacion(Integer.parseInt(txtNumero.getText()),
                                       (String)comboTipo.getSelectedItem(),Integer.parseInt(txtNivel.getText()),
                                        Double.parseDouble(txtPrecio.getText()),txtEstado.getText(),Double.parseDouble(txtCostoMant.getText()),
                                        Integer.parseInt(txtIdHotel.getText()));
                                controladorHabitaciones= new ControladorHabitaciones(habitacion, this);
                                controladorHabitaciones.actualizarHabitacion();

                        }
                        if(opcion==1){
                                limpiarCampos();
                                deshabilitarBotones();
                        }
                }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void tbHabitacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbHabitacionesMouseClicked
        // TODO add your handling code here:
            habilitarBotones();
            DefaultTableModel model =(DefaultTableModel)tbHabitaciones.getModel();
            
            if(tbHabitaciones.getSelectedRow()!=-1){//si se ha seleccionado algo en la tabla se rellenan los campo
                    txtNumero.setText(model.getValueAt(tbHabitaciones.getSelectedRow(), 0).toString());
                    comboTipo.setSelectedItem(model.getValueAt(tbHabitaciones.getSelectedRow(), 1));
                    txtNivel.setText(model.getValueAt(tbHabitaciones.getSelectedRow(), 2).toString());
                    txtPrecio.setText(model.getValueAt(tbHabitaciones.getSelectedRow(), 3).toString());
                    txtEstado.setText(model.getValueAt(tbHabitaciones.getSelectedRow(), 4).toString());
                    txtCostoMant.setText(model.getValueAt(tbHabitaciones.getSelectedRow(), 5).toString());
                    //almacenamos el usuario temporal seleccionado
                    idHabitacion= Integer.parseInt(model.getValueAt(tbHabitaciones.getSelectedRow(), 0).toString());
                    
            }
            
    }//GEN-LAST:event_tbHabitacionesMouseClicked

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
            limpiarCampos();
            deshabilitarBotones();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecuperarActionPerformed
        // TODO add your handling code here:
            if (txtNumero.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Para recuperar los datos de una Habitacion\n se debe especificar el Numero", "Error de Recuperacion", JOptionPane.ERROR_MESSAGE);
        } else {    
                    habitacion= new Habitacion(Integer.parseInt(txtNumero.getText()),Integer.parseInt(txtIdHotel.getText()));
                    controladorHabitaciones= new ControladorHabitaciones(habitacion, this);
                    controladorHabitaciones.consultarHabitacion();
            
            }
    }//GEN-LAST:event_btnRecuperarActionPerformed

    private void comboHotelesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHotelesActionPerformed
        // TODO add your handling code here:
            controladorHabitaciones= new ControladorHabitaciones();
            
            Logger logger = Logger.getInstance();
            if (logger.getEstablecimiento()!=null) {
                    txtIdHotel.setText(""+logger.getIdEstablecimiento());
                    cargarTablaHabitaciones();
                    deshabilitarComboHoteles();
            } else {
                        txtIdHotel.setText(""+controladorHabitaciones.recuperarHotel((String)comboHoteles.getSelectedItem()));
                        cargarTablaHabitaciones();
            }
            
    }//GEN-LAST:event_comboHotelesActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
            if (txtNumero.getText().isEmpty()||txtPrecio.getText().isEmpty()||
                    txtNivel.getText().isEmpty()||txtCostoMant.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, CAMPOS_OBLIGATORIOS, ERROR_CREACION, JOptionPane.ERROR_MESSAGE);
            } else {
                        int opcion= JOptionPane.showConfirmDialog(this, "Esta seguro de Modificar estos datos?");
                        if (opcion==0) {
                                habitacion= new Habitacion(Integer.parseInt(txtNumero.getText()),
                                       (String)comboTipo.getSelectedItem(),Integer.parseInt(txtNivel.getText()),
                                        Double.parseDouble(txtPrecio.getText()),"Desocupada",Double.parseDouble(txtCostoMant.getText()),
                                        Integer.parseInt(txtIdHotel.getText()),0);
                                controladorHabitaciones= new ControladorHabitaciones(habitacion,this);
                                controladorHabitaciones.registrarHabitacion();

                        }
                        if(opcion==1){
                                limpiarCampos();
                                deshabilitarBotones();
                        }
                }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
            if (txtNumero.getText().isEmpty()||txtIdHotel.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, ELIMINAR_HOTEL, ERROR_ELIMINACION, JOptionPane.ERROR_MESSAGE);
            } else {    
                        int opcion= JOptionPane.showConfirmDialog(this, ELIMINAR_DATOS_HOTEL+idHabitacion+"?");
                        if (opcion==0) {
                                habitacion= new Habitacion(Integer.parseInt(txtNumero.getText()), Integer.parseInt(txtIdHotel.getText()));
                                controladorHabitaciones= new ControladorHabitaciones(habitacion, this);
                                controladorHabitaciones.eliminarHabitacion();
                        }
                        if(opcion==1){
                                limpiarCampos();
                                deshabilitarBotones();
                        }
                        

                }
    }//GEN-LAST:event_btnEliminarActionPerformed
                                               
    public void cargarTablaHabitaciones(){
            limpiarTabla();
            controladorHabitaciones= new ControladorHabitaciones();
            List<Habitacion> lista= controladorHabitaciones.recuperarHabitaciones(Integer.parseInt(txtIdHotel.getText()));
            DefaultTableModel model= (DefaultTableModel)this.tbHabitaciones.getModel();
            for(Habitacion habitacion: lista){
                    model.addRow(new Object[]{habitacion.getNumero(),habitacion.getTipo(),
                    habitacion.getNivel(),habitacion.getPrecio(),habitacion.getEstado(),habitacion.getCostoMant()});
            }                        
    }
    //metodo para limpiar tablas
    public void limpiarTabla(){
            DefaultTableModel tb = (DefaultTableModel)tbHabitaciones.getModel();
            int a = tbHabitaciones.getRowCount()-1;
            for (int i = a; i >= 0; i--) {          
                    tb.removeRow(tb.getRowCount()-1);
            }
    }
    public void cargarComboHoteles(){
            controladorHabitaciones= new ControladorHabitaciones();
            List<Hotel> lista= controladorHabitaciones.recuperarHoteles();
            DefaultComboBoxModel modelComboRestaurantes=(DefaultComboBoxModel)comboHoteles.getModel();
            for(Hotel hotel: lista){
                modelComboRestaurantes.addElement(hotel.getNombre());
            }   AutoCompleteDecorator.decorate(comboHoteles);
    }
    public void agregarHabitacionEnTabla(Habitacion habitacion){
            controladorHabitaciones= new ControladorHabitaciones();
            DefaultTableModel model= (DefaultTableModel)this.tbHabitaciones.getModel();        
            model.addRow(new Object[]{habitacion.getNumero(),habitacion.getTipo(),
                    habitacion.getNivel(),habitacion.getPrecio(),habitacion.getEstado(),habitacion.getCostoMant()});
                              
    }
    public void eliminarHabitacionlEnTabla(){
            DefaultTableModel model=(DefaultTableModel)tbHabitaciones.getModel();
            model.removeRow(tbHabitaciones.getSelectedRow());
    }
     public void actualizarHabitacionEnTabla(){
            DefaultTableModel model=(DefaultTableModel)tbHabitaciones.getModel();
            //Actualizando Tabla habitaciones
            model.setValueAt(txtNumero.getText(), tbHabitaciones.getSelectedRow(),0);
            model.setValueAt(comboTipo.getSelectedItem(), tbHabitaciones.getSelectedRow(), 1);
            model.setValueAt(txtNivel.getText(), tbHabitaciones.getSelectedRow(),2);
            model.setValueAt(txtPrecio.getText(), tbHabitaciones.getSelectedRow(),3);
            model.setValueAt(txtEstado.getText(), tbHabitaciones.getSelectedRow(),4);
            model.setValueAt(txtCostoMant.getText(), tbHabitaciones.getSelectedRow(),5);
            
    }
    public void limpiarCampos(){
            txtPrecio.setText("");
            txtEstado.setText("");
            txtNumero.setText("");
            txtNivel.setText("");
            txtCostoMant.setText("");
            comboTipo.setSelectedIndex(0);
    } 
    public void organizarFormulario(){
            limpiarCampos();
            deshabilitarBotones();
    }
    public void rellenarCampos(Habitacion habitacion){
            txtPrecio.setText(String.valueOf(habitacion.getPrecio()));
            txtEstado.setText(habitacion.getEstado());
            txtNumero.setText(String.valueOf(habitacion.getNumero()));
            txtNivel.setText(String.valueOf(habitacion.getNivel()));
            txtCostoMant.setText(String.valueOf(habitacion.getCostoMant()));
            comboTipo.setSelectedItem(habitacion.getTipo());
    }
    public void seleccionarHotel(String hotel){
            comboHoteles.setSelectedItem(hotel);
    }
    public void deshabilitarComboHoteles(){
            comboHoteles.setEnabled(false);
    }
    public void deshabilitarBotones(){
            btnActualizar.setEnabled(false);
            btnEliminar.setEnabled(false);
    } 
    public void habilitarBotones(){
            btnActualizar.setEnabled(true);
            btnEliminar.setEnabled(true);
    } 
    public int retornarIdHabitacionTemporal(){
            return idHabitacion;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRecuperar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> comboHoteles;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbHabitaciones;
    private javax.swing.JFormattedTextField txtCostoMant;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtIdHotel;
    private javax.swing.JTextField txtNivel;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JFormattedTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
